<channel version="3.6.0">
  <id>66f094af-b533-4370-952d-83e992115e90</id>
  <nextMetaDataId>4</nextMetaDataId>
  <name>Bundle Inicio Dev</name>
  <description></description>
  <revision>192</revision>
  <sourceConnector version="3.6.0">
    <metaDataId>0</metaDataId>
    <name>sourceConnector</name>
    <properties class="com.mirth.connect.connectors.http.HttpReceiverProperties" version="3.6.0">
      <pluginProperties>
        <com.mirth.connect.plugins.httpauth.NoneHttpAuthProperties version="3.6.0">
  <authType>NONE</authType>
        </com.mirth.connect.plugins.httpauth.NoneHttpAuthProperties>
        <com.mirth.connect.plugins.ssl.model.SSLConnectorPluginProperties version="3.6.0">
  <enabled>false</enabled>
          <clientAuthentication>DISABLED</clientAuthentication>
          <hostnameVerificationEnabled>true</hostnameVerificationEnabled>
          <trustAllCertificates>false</trustAllCertificates>
          <trustedCertificates>
    <trustedCertificateAliases/>
            <trustCACerts>true</trustCACerts>
          </trustedCertificates>
          <localCertificateAlias/>
          <ocspEnabled>false</ocspEnabled>
          <ocspURI/>
          <ocspHardFail>false</ocspHardFail>
          <crlEnabled>false</crlEnabled>
          <crlURI/>
          <crlHardFail>false</crlHardFail>
          <subjectDNValidationEnabled>false</subjectDNValidationEnabled>
          <trustedSubjectDNs class="linked-hash-map"/>
          <hideIssuerDNs>false</hideIssuerDNs>
          <allowExpiredCertificates>false</allowExpiredCertificates>
          <implicitFTPS>true</implicitFTPS>
          <useSTARTTLS>false</useSTARTTLS>
        </com.mirth.connect.plugins.ssl.model.SSLConnectorPluginProperties>
      </pluginProperties>
      <listenerConnectorProperties version="3.6.0">
        <host>0.0.0.0</host>
        <port>33358</port>
      </listenerConnectorProperties>
      <sourceConnectorProperties version="3.6.0">
        <responseVariable>response</responseVariable>
        <respondAfterProcessing>true</respondAfterProcessing>
        <processBatch>false</processBatch>
        <firstResponse>false</firstResponse>
        <processingThreads>1</processingThreads>
        <resourceIds class="linked-hash-map">
          <entry>
            <string>Default Resource</string>
            <string>[Default Resource]</string>
          </entry>
        </resourceIds>
        <queueBufferSize>1000</queueBufferSize>
      </sourceConnectorProperties>
      <xmlBody>false</xmlBody>
      <parseMultipart>true</parseMultipart>
      <includeMetadata>false</includeMetadata>
      <binaryMimeTypes>application/.*(?&lt;!json|xml)$|image/.*|video/.*|audio/.*</binaryMimeTypes>
      <binaryMimeTypesRegex>true</binaryMimeTypesRegex>
      <responseContentType>application/json</responseContentType>
      <responseDataTypeBinary>false</responseDataTypeBinary>
      <responseStatusCode>application/json</responseStatusCode>
      <responseHeaders class="linked-hash-map"/>
      <charset>UTF-8</charset>
      <contextPath>LE_Bundle</contextPath>
      <timeout>30000</timeout>
      <staticResources/>
    </properties>
    <transformer version="3.6.0">
      <elements/>
      <inboundTemplate encoding="base64">ewogICAgInJlc291cmNlVHlwZSI6ICJCdW5kbGUiLAogICAgImlkIjogIkVqZW1wbG9CdW5kbGVJ
bmljaW8iLAogICAgIm1ldGEiOiB7CiAgICAgICAgImxhc3RVcGRhdGVkIjogIjIwMjMtMDEtMjBU
MTQ6MTI6MTBaIiwKICAgICAgICAicHJvZmlsZSI6IFsKICAgICAgICAgICAgImh0dHA6Ly9taW5z
YWwuY2wvbGlzdGFlc3BlcmEvU3RydWN0dXJlRGVmaW5pdGlvbi9CdW5kbGVJbmljaW9MRSIKICAg
ICAgICBdCiAgICB9LAogICAgInR5cGUiOiAibWVzc2FnZSIsCiAgICAidGltZXN0YW1wIjogIjIw
MjMtMDItMDlUMTc6MTU6MjJaIiwKICAgICJlbnRyeSI6IFsKICAgICAgICB7CiAgICAgICAgICAg
ICJmdWxsVXJsIjogImh0dHA6Ly9hY21lLmNvbS9laHIvZmhpci9NZXNzYWdlSGVhZGVyL21oMSIs
CiAgICAgICAgICAgICJyZXNvdXJjZSI6IHsKICAgICAgICAgICAgICAgICJyZXNvdXJjZVR5cGUi
OiAiTWVzc2FnZUhlYWRlciIsCiAgICAgICAgICAgICAgICAiaWQiOiAiRWplbXBsb01lc3NhZ2VI
ZWFkZXIiLAogICAgICAgICAgICAgICAgIm1ldGEiOiB7CiAgICAgICAgICAgICAgICAgICAgImxh
c3RVcGRhdGVkIjogIjIwMjMtMDEtMjBUMTQ6MTI6MTBaIiwKICAgICAgICAgICAgICAgICAgICAi
cHJvZmlsZSI6IFsKICAgICAgICAgICAgICAgICAgICAgICAgImh0dHA6Ly9taW5zYWwuY2wvbGlz
dGFlc3BlcmEvU3RydWN0dXJlRGVmaW5pdGlvbi9NZXNzYWdlSGVhZGVyTEUiCiAgICAgICAgICAg
ICAgICAgICAgXQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICJ0ZXh0Ijogewog
ICAgICAgICAgICAgICAgICAgICJzdGF0dXMiOiAiZ2VuZXJhdGVkIiwKICAgICAgICAgICAgICAg
ICAgICAiZGl2IjogIjxkaXYgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCI+
PHA+PGI+R2VuZXJhdGVkIE5hcnJhdGl2ZTogTWVzc2FnZUhlYWRlcjwvYj48YSBuYW1lPVwiRWpl
bXBsb01lc3NhZ2VIZWFkZXJcIj4gPC9hPjwvcD48ZGl2IHN0eWxlPVwiZGlzcGxheTogaW5saW5l
LWJsb2NrOyBiYWNrZ3JvdW5kLWNvbG9yOiAjZDllMGU3OyBwYWRkaW5nOiA2cHg7IG1hcmdpbjog
NHB4OyBib3JkZXI6IDFweCBzb2xpZCAjOGRhMWI0OyBib3JkZXItcmFkaXVzOiA1cHg7IGxpbmUt
aGVpZ2h0OiA2MCVcIj48cCBzdHlsZT1cIm1hcmdpbi1ib3R0b206IDBweFwiPlJlc291cmNlIE1l
c3NhZ2VIZWFkZXIgJnF1b3Q7RWplbXBsb01lc3NhZ2VIZWFkZXImcXVvdDsgVXBkYXRlZCAmcXVv
dDsyMDIzLTAxLTIwIDE0OjEyOjEwKzAwMDAmcXVvdDsgPC9wPjxwIHN0eWxlPVwibWFyZ2luLWJv
dHRvbTogMHB4XCI+UHJvZmlsZTogPGEgaHJlZj1cIlN0cnVjdHVyZURlZmluaXRpb24tTWVzc2Fn
ZUhlYWRlckxFLmh0bWxcIj5NZXNzYWdlSGVhZGVyIExFPC9hPjwvcD48L2Rpdj48cD48Yj5ldmVu
dDwvYj46IEluaWNpbyAoRGV0YWlsczogaHR0cDovL21pbnNhbC5jbC9saXN0YWVzcGVyYS9Db2Rl
U3lzdGVtL0NTVGlwb0V2ZW50b0xFIGNvZGUgaW5pY2lvID0gJ0luaWNpbycsIHN0YXRlZCBhcyAn
bnVsbCcpPC9wPjxwPjxiPmF1dGhvcjwvYj46IDxhIGhyZWY9XCIjUHJhY3RpdGlvbmVyUm9sZV9F
amVtcGxvUHJhY3RpdGlvbmVyUm9sZVwiPlNlZSBhYm92ZSAoaHR0cDovL2FjbWUuY29tL2Voci9m
aGlyL1ByYWN0aXRpb25lclJvbGUvcHJhUjEpPC9hPjwvcD48aDM+U291cmNlczwvaDM+PHRhYmxl
IGNsYXNzPVwiZ3JpZFwiPjx0cj48dGQ+LTwvdGQ+PHRkPjxiPlNvZnR3YXJlPC9iPjwvdGQ+PHRk
PjxiPkVuZHBvaW50PC9iPjwvdGQ+PC90cj48dHI+PHRkPio8L3RkPjx0ZD5Tb2x1Y2lvbkluZm9y
bWF0aWNhPC90ZD48dGQ+PGEgaHJlZj1cImh0dHA6Ly9saW5rLXRvLXNlbmRpbmcuY2xcIj5odHRw
Oi8vbGluay10by1zZW5kaW5nLmNsPC9hPjwvdGQ+PC90cj48L3RhYmxlPjxwPjxiPmZvY3VzPC9i
PjogPGEgaHJlZj1cIiNTZXJ2aWNlUmVxdWVzdF9FamVtcGxvU2VydmljZVJlcXVlc3RcIj5TZWUg
YWJvdmUgKGh0dHA6Ly9hY21lLmNvbS9laHIvZmhpci9TZXJ2aWNlUmVxdWVzdC9zZXJ2MSk8L2E+
PC9wPjwvZGl2PiIKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAiZXZlbnRDb2Rp
bmciOiB7CiAgICAgICAgICAgICAgICAgICAgInN5c3RlbSI6ICJodHRwOi8vbWluc2FsLmNsL2xp
c3RhZXNwZXJhL0NvZGVTeXN0ZW0vQ1NUaXBvRXZlbnRvTEUiLAogICAgICAgICAgICAgICAgICAg
ICJjb2RlIjogImluaWNpbyIKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAiYXV0
aG9yIjogewogICAgICAgICAgICAgICAgICAgICJyZWZlcmVuY2UiOiAiaHR0cDovL2FjbWUuY29t
L2Voci9maGlyL1ByYWN0aXRpb25lclJvbGUvcHJhUjEiCiAgICAgICAgICAgICAgICB9LAogICAg
ICAgICAgICAgICAgInNvdXJjZSI6IHsKICAgICAgICAgICAgICAgICAgICAic29mdHdhcmUiOiAi
c29sdWNpb25CdW5kbGUiLAogICAgICAgICAgICAgICAgICAgICJlbmRwb2ludCI6ICJodHRwOi8v
bGluay10by1zZW5kaW5nLmNsIgogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICJm
b2N1cyI6IFsKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICJy
ZWZlcmVuY2UiOiAiaHR0cDovL2FjbWUuY29tL2Voci9maGlyL1NlcnZpY2VSZXF1ZXN0L3NlcnYx
IgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgfQog
ICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgICAiZnVsbFVybCI6ICJodHRwOi8vYWNtZS5j
b20vZWhyL2ZoaXIvU2VydmljZVJlcXVlc3Qvc2VydjEiLAogICAgICAgICAgICAicmVzb3VyY2Ui
OiB7CiAgICAgICAgICAgICAgICAicmVzb3VyY2VUeXBlIjogIlNlcnZpY2VSZXF1ZXN0IiwKICAg
ICAgICAgICAgICAgICJpZCI6ICJFamVtcGxvU2VydmljZVJlcXVlc3QiLAogICAgICAgICAgICAg
ICAgIm1ldGEiOiB7CiAgICAgICAgICAgICAgICAgICAgInByb2ZpbGUiOiBbCiAgICAgICAgICAg
ICAgICAgICAgICAgICJodHRwOi8vbWluc2FsLmNsL2xpc3RhZXNwZXJhL1N0cnVjdHVyZURlZmlu
aXRpb24vU2VydmljZVJlcXVlc3RMRSIKICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAg
ICAgICB9LAogICAgICAgICAgICAgICAgInRleHQiOiB7CiAgICAgICAgICAgICAgICAgICAgInN0
YXR1cyI6ICJleHRlbnNpb25zIiwKICAgICAgICAgICAgICAgICAgICAiZGl2IjogIjxkaXYgeG1s
bnM9XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCI+PHA+PGI+R2VuZXJhdGVkIE5hcnJh
dGl2ZTogU2VydmljZVJlcXVlc3Q8L2I+PGEgbmFtZT1cIkVqZW1wbG9TZXJ2aWNlUmVxdWVzdFwi
PiA8L2E+PC9wPjxkaXYgc3R5bGU9XCJkaXNwbGF5OiBpbmxpbmUtYmxvY2s7IGJhY2tncm91bmQt
Y29sb3I6ICNkOWUwZTc7IHBhZGRpbmc6IDZweDsgbWFyZ2luOiA0cHg7IGJvcmRlcjogMXB4IHNv
bGlkICM4ZGExYjQ7IGJvcmRlci1yYWRpdXM6IDVweDsgbGluZS1oZWlnaHQ6IDYwJVwiPjxwIHN0
eWxlPVwibWFyZ2luLWJvdHRvbTogMHB4XCI+UmVzb3VyY2UgU2VydmljZVJlcXVlc3QgJnF1b3Q7
RWplbXBsb1NlcnZpY2VSZXF1ZXN0JnF1b3Q7IDwvcD48cCBzdHlsZT1cIm1hcmdpbi1ib3R0b206
IDBweFwiPlByb2ZpbGU6IDxhIGhyZWY9XCJTdHJ1Y3R1cmVEZWZpbml0aW9uLVNlcnZpY2VSZXF1
ZXN0TEUuaHRtbFwiPlNlcnZpY2VSZXF1ZXN0IExFPC9hPjwvcD48L2Rpdj48cD48Yj5QcmV2aXNp
w7NuIGRldGVybWluYWRhICBkZSBhc2VndXJhbWllbnRvIGRlIHNhbHVkIGRlbCBwYWNpZW50ZS48
L2I+OiAxIDxzcGFuIHN0eWxlPVwiYmFja2dyb3VuZDogTGlnaHRHb2xkZW5Sb2RZZWxsb3c7IG1h
cmdpbjogNHB4OyBib3JkZXI6IDFweCBzb2xpZCBraGFraVwiPiAoW25vdCBzdGF0ZWRdIzEpPC9z
cGFuPjwvcD48cD48Yj5FeHRTdHJpbmdGdW5kYW1lbnRvUHJpb3JpemFjaW9uPC9iPjogRnVuZGFt
ZW50b1ByaW9yaXphY2lvbjwvcD48cD48Yj5Tb3NwZWNoYVBhdG9sb2dpYUdlczwvYj46IHRydWU8
L3A+PHA+PGI+RXh0Qm9vbCBSZXNvbHV0aXZpZGFkQVBTPC9iPjogdHJ1ZTwvcD48cD48Yj5FeHRC
b29sIEFsZXJnaWE8L2I+OiBmYWxzZTwvcD48cD48Yj5PcmlnZW4gSW50ZXJjb25zdWx0YTwvYj46
IDEgPHNwYW4gc3R5bGU9XCJiYWNrZ3JvdW5kOiBMaWdodEdvbGRlblJvZFllbGxvdzsgbWFyZ2lu
OiA0cHg7IGJvcmRlcjogMXB4IHNvbGlkIGtoYWtpXCI+IChbbm90IHN0YXRlZF0jMSk8L3NwYW4+
PC9wPjxwPjxiPkVzdGFkbyBJbnRlcmNvbnN1bHRhIENvZGlnbzwvYj46IDEgPHNwYW4gc3R5bGU9
XCJiYWNrZ3JvdW5kOiBMaWdodEdvbGRlblJvZFllbGxvdzsgbWFyZ2luOiA0cHg7IGJvcmRlcjog
MXB4IHNvbGlkIGtoYWtpXCI+IChbbm90IHN0YXRlZF0jMSk8L3NwYW4+PC9wPjxwPjxiPkV4dEJv
b2wgQ3VpZGFkb3I8L2I+OiB0cnVlPC9wPjxwPjxiPkRvYyBBY3JlZGl0YWNpb24gQ3VpZGFkb3I8
L2I+OiAxIDxzcGFuIHN0eWxlPVwiYmFja2dyb3VuZDogTGlnaHRHb2xkZW5Sb2RZZWxsb3c7IG1h
cmdpbjogNHB4OyBib3JkZXI6IDFweCBzb2xpZCBraGFraVwiPiAoW25vdCBzdGF0ZWRdIzEpPC9z
cGFuPjwvcD48cD48Yj5FeHRCb29sIFByZXNlbnRhRGlzY2FwYWNpZGFkPC9iPjogZmFsc2U8L3A+
PHA+PGI+aWRlbnRpZmllcjwvYj46IElkSW50ZXJjb25zdWx0YTogMTwvcD48cD48Yj5zdGF0dXM8
L2I+OiBkcmFmdDwvcD48cD48Yj5pbnRlbnQ8L2I+OiBwcm9wb3NhbDwvcD48cD48Yj5wcmlvcml0
eTwvYj46IHVyZ2VudDwvcD48cD48Yj5zdWJqZWN0PC9iPjogPGEgaHJlZj1cIiNQYXRpZW50X0Vq
ZW1wbG9QYXRpZW50XCI+U2VlIGFib3ZlIChodHRwOi8vYWNtZS5jb20vZWhyL2ZoaXIvUGF0aWVu
dC9FamVtcGxvUGF0aWVudCk8L2E+PC9wPjxwPjxiPmVuY291bnRlcjwvYj46IDxhIGhyZWY9XCIj
RW5jb3VudGVyX0VqZW1wbG9FbmNvdW50ZXJcIj5TZWUgYWJvdmUgKGh0dHA6Ly9hY21lLmNvbS9l
aHIvZmhpci9FbmNvdW50ZXIvZW5jMSk8L2E+PC9wPjxwPjxiPmF1dGhvcmVkT248L2I+OiAyMDIy
LTAxLTIwIDEzOjUwOjIwKzAwMDA8L3A+PHA+PGI+cmVhc29uQ29kZTwvYj46IGNvbmZpcm1hY2lv
biA8c3BhbiBzdHlsZT1cImJhY2tncm91bmQ6IExpZ2h0R29sZGVuUm9kWWVsbG93OyBtYXJnaW46
IDRweDsgYm9yZGVyOiAxcHggc29saWQga2hha2lcIj4gKG1vdGl2b0ludGVyY29uc3VsdGEjMSk8
L3NwYW4+PC9wPjxwPjxiPnJlYXNvblJlZmVyZW5jZTwvYj46IDxhIGhyZWY9XCIjT2JzZXJ2YXRp
b25fRWplbXBsb09ic2VydmF0aW9uXCI+U2VlIGFib3ZlIChodHRwOi8vYWNtZS5jb20vZWhyL2Zo
aXIvT2JzZXJ2YXRpb24vb2JzMSk8L2E+PC9wPjxwPjxiPnN1cHBvcnRpbmdJbmZvPC9iPjogPC9w
Pjx1bD48bGk+PGEgaHJlZj1cIiNBcHBvaW50bWVudF9FamVtcGxvQXBwb2ludG1lbnRcIj5TZWUg
YWJvdmUgKGh0dHA6Ly9hY21lLmNvbS9laHIvZmhpci9BcHBvaW50bWVudC9hcHAxKTwvYT48L2xp
PjxsaT48YSBocmVmPVwiI1F1ZXN0aW9ubmFpcmVSZXNwb25zZV9FamVtcGxvUXVlc3Rpb25uYWly
ZVJlc3BvbnNlXCI+U2VlIGFib3ZlIChodHRwOi8vYWNtZS5jb20vZWhyL2ZoaXIvUXVlc3Rpb25u
YWlyZVJlc3BvbnNlL3F1ZTEpPC9hPjwvbGk+PGxpPjxhIGhyZWY9XCIjQWxsZXJneUludG9sZXJh
bmNlX0VqZW1wbG9BbGxlcmd5SW50b2xlcmFuY2VcIj5TZWUgYWJvdmUgKGh0dHA6Ly9hY21lLmNv
bS9laHIvZmhpci9BbGxlcmd5SW50b2xlcmFuY2UvYWxsMSk8L2E+PC9saT48bGk+PGEgaHJlZj1c
IiNDb25kaXRpb25fRWplbXBsb0NvbmRpdGlvblwiPlNlZSBhYm92ZSAoaHR0cDovL2FjbWUuY29t
L2Voci9maGlyL0NvbmRpdGlvbi9jb24xKTwvYT48L2xpPjxsaT48YSBocmVmPVwiI0NvbmRpdGlv
bl9FamVtcGxvQ29uZGl0aW9uMlwiPlNlZSBhYm92ZSAoaHR0cDovL2FjbWUuY29tL2Voci9maGly
L0NvbmRpdGlvbi9jb24yKTwvYT48L2xpPjxsaT48YSBocmVmPVwiI0NvbmRpdGlvbl9FamVtcGxv
Q29uZGl0aW9uM1wiPlNlZSBhYm92ZSAoaHR0cDovL2FjbWUuY29tL2Voci9maGlyL0NvbmRpdGlv
bi9jb24zKTwvYT48L2xpPjwvdWw+PC9kaXY+IgogICAgICAgICAgICAgICAgfSwKICAgICAgICAg
ICAgICAgICJleHRlbnNpb24iOiBbCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAg
ICAgICAgICAgICAidXJsIjogImh0dHA6Ly9taW5zYWwuY2wvbGlzdGFlc3BlcmEvU3RydWN0dXJl
RGVmaW5pdGlvbi9QcmV2aXNpb25Db2RpZ29MRSIsCiAgICAgICAgICAgICAgICAgICAgICAgICJ2
YWx1ZUNvZGVhYmxlQ29uY2VwdCI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJjb2Rp
bmciOiBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAiY29kZSI6ICIxIgogICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAg
ICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgewogICAg
ICAgICAgICAgICAgICAgICAgICAidXJsIjogImh0dHA6Ly9taW5zYWwuY2wvbGlzdGFlc3BlcmEv
U3RydWN0dXJlRGVmaW5pdGlvbi9FeHRTdHJpbmdGdW5kYW1lbnRvUHJpb3JpemFjaW9uIiwKICAg
ICAgICAgICAgICAgICAgICAgICAgInZhbHVlU3RyaW5nIjogIkZ1bmRhbWVudG9Qcmlvcml6YWNp
b24iCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAg
ICAgICAgICAgICAgICAgICJ1cmwiOiAiaHR0cDovL21pbnNhbC5jbC9saXN0YWVzcGVyYS9TdHJ1
Y3R1cmVEZWZpbml0aW9uL1Nvc3BlY2hhUGF0b2xvZ2lhR2VzIiwKICAgICAgICAgICAgICAgICAg
ICAgICAgInZhbHVlQm9vbGVhbiI6IHRydWUKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAg
ICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgInVybCI6ICJodHRwOi8vbWlu
c2FsLmNsL2xpc3RhZXNwZXJhL1N0cnVjdHVyZURlZmluaXRpb24vRXh0Qm9vbFJlc29sdXRpdmlk
YWRBUFMiLAogICAgICAgICAgICAgICAgICAgICAgICAidmFsdWVCb29sZWFuIjogdHJ1ZQogICAg
ICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAg
ICAgICAgICAidXJsIjogImh0dHA6Ly9taW5zYWwuY2wvbGlzdGFlc3BlcmEvU3RydWN0dXJlRGVm
aW5pdGlvbi9FeHRCb29sQWxlcmdpYSIsCiAgICAgICAgICAgICAgICAgICAgICAgICJ2YWx1ZUJv
b2xlYW4iOiBmYWxzZQogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAg
ewogICAgICAgICAgICAgICAgICAgICAgICAidXJsIjogImh0dHA6Ly9taW5zYWwuY2wvbGlzdGFl
c3BlcmEvU3RydWN0dXJlRGVmaW5pdGlvbi9PcmlnZW5JbnRlcmNvbnN1bHRhIiwKICAgICAgICAg
ICAgICAgICAgICAgICAgInZhbHVlQ29kZWFibGVDb25jZXB0IjogewogICAgICAgICAgICAgICAg
ICAgICAgICAgICAgImNvZGluZyI6IFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7
CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJjb2RlIjogIjEiCiAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgXQog
ICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAg
ICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICJ1cmwiOiAiaHR0cDovL21pbnNh
bC5jbC9saXN0YWVzcGVyYS9TdHJ1Y3R1cmVEZWZpbml0aW9uL0VzdGFkb0ludGVyY29uc3VsdGFD
b2RpZ29MRSIsCiAgICAgICAgICAgICAgICAgICAgICAgICJ2YWx1ZUNvZGVhYmxlQ29uY2VwdCI6
IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJjb2RpbmciOiBbCiAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAi
Y29kZSI6ICIxIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAg
ICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAg
ICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAi
dXJsIjogImh0dHA6Ly9taW5zYWwuY2wvbGlzdGFlc3BlcmEvU3RydWN0dXJlRGVmaW5pdGlvbi9F
eHRCb29sQ3VpZGFkb3IiLAogICAgICAgICAgICAgICAgICAgICAgICAidmFsdWVCb29sZWFuIjog
dHJ1ZQogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgewogICAgICAg
ICAgICAgICAgICAgICAgICAidXJsIjogImh0dHA6Ly9taW5zYWwuY2wvbGlzdGFlc3BlcmEvU3Ry
dWN0dXJlRGVmaW5pdGlvbi9Eb2NBY3JlZGl0YWNpb25DdWlkYWRvckNvZGlnb0xFIiwKICAgICAg
ICAgICAgICAgICAgICAgICAgInZhbHVlQ29kZWFibGVDb25jZXB0IjogewogICAgICAgICAgICAg
ICAgICAgICAgICAgICAgImNvZGluZyI6IFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJjb2RlIjogIjEiCiAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAg
XQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAg
ICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICJ1cmwiOiAiaHR0cDovL21p
bnNhbC5jbC9saXN0YWVzcGVyYS9TdHJ1Y3R1cmVEZWZpbml0aW9uL0V4dEJvb2xQcmVzZW50YURp
c2NhcGFjaWRhZCIsCiAgICAgICAgICAgICAgICAgICAgICAgICJ2YWx1ZUJvb2xlYW4iOiBmYWxz
ZQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAg
ICAiaWRlbnRpZmllciI6IFsKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAg
ICAgICAgICJ0eXBlIjogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgImNvZGluZyI6IFsK
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICJzeXN0ZW0iOiAiaHR0cDovL3Rlcm1pbm9sb2d5LmNlbnMuY2wvQ29kZVN5
c3RlbS9saXN0YWVzcGVyYSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJj
b2RlIjogIklkSW50ZXJjb25zdWx0YSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9
CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgICAgIH0s
CiAgICAgICAgICAgICAgICAgICAgICAgICJ2YWx1ZSI6ICIxIgogICAgICAgICAgICAgICAgICAg
IH0KICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAic3RhdHVzIjogImRyYWZ0IiwK
ICAgICAgICAgICAgICAgICJpbnRlbnQiOiAicHJvcG9zYWwiLAogICAgICAgICAgICAgICAgInBy
aW9yaXR5IjogInVyZ2VudCIsCiAgICAgICAgICAgICAgICAic3ViamVjdCI6IHsKICAgICAgICAg
ICAgICAgICAgICAicmVmZXJlbmNlIjogImh0dHA6Ly9hY21lLmNvbS9laHIvZmhpci9QYXRpZW50
L0VqZW1wbG9QYXRpZW50IgogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICJlbmNv
dW50ZXIiOiB7CiAgICAgICAgICAgICAgICAgICAgInJlZmVyZW5jZSI6ICJodHRwOi8vYWNtZS5j
b20vZWhyL2ZoaXIvRW5jb3VudGVyL2VuYzEiCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAg
ICAgICAgImF1dGhvcmVkT24iOiAiMjAyMi0wMS0yMFQxMzo1MDoyMFoiLAogICAgICAgICAgICAg
ICAgInJlYXNvbkNvZGUiOiBbCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAg
ICAgICAgICAiY29kaW5nIjogWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICJzeXN0ZW0iOiAiaHR0cDovL3Rlcm1pbm9sb2d5LmNl
bnMuY2wvY29kaWdvc0RlaXMvbW90aXZvSW50ZXJjb25zdWx0YSIsCiAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgImNvZGUiOiAiMSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgImRpc3BsYXkiOiAiY29uZmlybWFjaW9uIgogICAgICAgICAgICAgICAgICAgICAgICAgICAg
fQogICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAg
ICAgICAgICAgXSwKICAgICAgICAgICAgICAgICJyZWFzb25SZWZlcmVuY2UiOiBbCiAgICAgICAg
ICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAicmVmZXJlbmNlIjogImh0dHA6
Ly9hY21lLmNvbS9laHIvZmhpci9PYnNlcnZhdGlvbi9vYnMxIgogICAgICAgICAgICAgICAgICAg
IH0KICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAic3VwcG9ydGluZ0luZm8iOiBb
CiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAicmVmZXJlbmNl
IjogImh0dHA6Ly9hY21lLmNvbS9laHIvZmhpci9BcHBvaW50bWVudC9hcHAxIgogICAgICAgICAg
ICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAg
ICAicmVmZXJlbmNlIjogImh0dHA6Ly9hY21lLmNvbS9laHIvZmhpci9RdWVzdGlvbm5haXJlUmVz
cG9uc2UvcXVlMSIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIHsK
ICAgICAgICAgICAgICAgICAgICAgICAgInJlZmVyZW5jZSI6ICJodHRwOi8vYWNtZS5jb20vZWhy
L2ZoaXIvQWxsZXJneUludG9sZXJhbmNlL2FsbDEiCiAgICAgICAgICAgICAgICAgICAgfSwKICAg
ICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICJyZWZlcmVuY2UiOiAi
aHR0cDovL2FjbWUuY29tL2Voci9maGlyL0NvbmRpdGlvbi9jb24xIgogICAgICAgICAgICAgICAg
ICAgIH0sCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAicmVm
ZXJlbmNlIjogImh0dHA6Ly9hY21lLmNvbS9laHIvZmhpci9Db25kaXRpb24vY29uMiIKICAgICAg
ICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAg
ICAgICAgInJlZmVyZW5jZSI6ICJodHRwOi8vYWNtZS5jb20vZWhyL2ZoaXIvQ29uZGl0aW9uL2Nv
bjMiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgXQogICAgICAgICAgICB9
CiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAgICJmdWxsVXJsIjogImh0dHA6Ly9hY21l
LmNvbS9laHIvZmhpci9FbmNvdW50ZXIvZW5jMSIsCiAgICAgICAgICAgICJyZXNvdXJjZSI6IHsK
ICAgICAgICAgICAgICAgICJyZXNvdXJjZVR5cGUiOiAiRW5jb3VudGVyIiwKICAgICAgICAgICAg
ICAgICJpZCI6ICJFamVtcGxvRW5jb3VudGVyIiwKICAgICAgICAgICAgICAgICJtZXRhIjogewog
ICAgICAgICAgICAgICAgICAgICJwcm9maWxlIjogWwogICAgICAgICAgICAgICAgICAgICAgICAi
aHR0cDovL21pbnNhbC5jbC9saXN0YWVzcGVyYS9TdHJ1Y3R1cmVEZWZpbml0aW9uL0VuY291bnRl
ckluaWNpb0xFIgogICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgIH0sCiAgICAg
ICAgICAgICAgICAidGV4dCI6IHsKICAgICAgICAgICAgICAgICAgICAic3RhdHVzIjogImdlbmVy
YXRlZCIsCiAgICAgICAgICAgICAgICAgICAgImRpdiI6ICI8ZGl2IHhtbG5zPVwiaHR0cDovL3d3
dy53My5vcmcvMTk5OS94aHRtbFwiPjxwPjxiPkdlbmVyYXRlZCBOYXJyYXRpdmU6IEVuY291bnRl
cjwvYj48YSBuYW1lPVwiRWplbXBsb0VuY291bnRlclwiPiA8L2E+PC9wPjxkaXYgc3R5bGU9XCJk
aXNwbGF5OiBpbmxpbmUtYmxvY2s7IGJhY2tncm91bmQtY29sb3I6ICNkOWUwZTc7IHBhZGRpbmc6
IDZweDsgbWFyZ2luOiA0cHg7IGJvcmRlcjogMXB4IHNvbGlkICM4ZGExYjQ7IGJvcmRlci1yYWRp
dXM6IDVweDsgbGluZS1oZWlnaHQ6IDYwJVwiPjxwIHN0eWxlPVwibWFyZ2luLWJvdHRvbTogMHB4
XCI+UmVzb3VyY2UgRW5jb3VudGVyICZxdW90O0VqZW1wbG9FbmNvdW50ZXImcXVvdDsgPC9wPjxw
IHN0eWxlPVwibWFyZ2luLWJvdHRvbTogMHB4XCI+UHJvZmlsZTogPGEgaHJlZj1cIlN0cnVjdHVy
ZURlZmluaXRpb24tRW5jb3VudGVySW5pY2lvTEUuaHRtbFwiPkVuY291bnRlciBJbmljaW8gTEU8
L2E+PC9wPjwvZGl2PjxwPjxiPmlkZW50aWZpZXI8L2I+OiBJZENvbnN1bHRhQVBTOiAxPC9wPjxw
PjxiPnN0YXR1czwvYj46IGZpbmlzaGVkPC9wPjxwPjxiPmNsYXNzPC9iPjogQU1CIChEZXRhaWxz
OiBbbm90IHN0YXRlZF0gY29kZSBBTUIgPSAnQU1CJywgc3RhdGVkIGFzICdudWxsJyk8L3A+PHA+
PGI+c3ViamVjdDwvYj46IDxhIGhyZWY9XCIjUGF0aWVudF9FamVtcGxvUGF0aWVudFwiPlNlZSBh
Ym92ZSAoaHR0cDovL2FjbWUuY29tL2Voci9maGlyL1BhdGllbnQvRWplbXBsb1BhdGllbnQpPC9h
PjwvcD48cD48Yj5hcHBvaW50bWVudDwvYj46IDxhIGhyZWY9XCIjQXBwb2ludG1lbnRfRWplbXBs
b0FwcG9pbnRtZW50XCI+U2VlIGFib3ZlIChodHRwOi8vYWNtZS5jb20vZWhyL2ZoaXIvQXBwb2lu
dG1lbnQvYXBwMSk8L2E+PC9wPjwvZGl2PiIKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAg
ICAgICAiaWRlbnRpZmllciI6IFsKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAg
ICAgICAgICAgICJ0eXBlIjogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgImNvZGluZyI6
IFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICJzeXN0ZW0iOiAiaHR0cDovL3Rlcm1pbm9sb2d5LmNlbnMuY2wvQ29k
ZVN5c3RlbS9saXN0YWVzcGVyYSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICJjb2RlIjogIklkQ29uc3VsdGFBUFMiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
fQogICAgICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgICAgICB9
LAogICAgICAgICAgICAgICAgICAgICAgICAidmFsdWUiOiAiMSIKICAgICAgICAgICAgICAgICAg
ICB9CiAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgInN0YXR1cyI6ICJmaW5pc2hl
ZCIsCiAgICAgICAgICAgICAgICAiY2xhc3MiOiB7CiAgICAgICAgICAgICAgICAgICAgImNvZGUi
OiAiQU1CIgogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICJzdWJqZWN0Ijogewog
ICAgICAgICAgICAgICAgICAgICJyZWZlcmVuY2UiOiAiaHR0cDovL2FjbWUuY29tL2Voci9maGly
L1BhdGllbnQvRWplbXBsb1BhdGllbnQiCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAg
ICAgImFwcG9pbnRtZW50IjogWwogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAg
ICAgICAgICAgInJlZmVyZW5jZSI6ICJodHRwOi8vYWNtZS5jb20vZWhyL2ZoaXIvQXBwb2ludG1l
bnQvYXBwMSIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBdCiAgICAgICAg
ICAgIH0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICAgImZ1bGxVcmwiOiAiaHR0cDov
L2FjbWUuY29tL2Voci9maGlyL0FwcG9pbnRtZW50L2FwcDEiLAogICAgICAgICAgICAicmVzb3Vy
Y2UiOiB7CiAgICAgICAgICAgICAgICAicmVzb3VyY2VUeXBlIjogIkFwcG9pbnRtZW50IiwKICAg
ICAgICAgICAgICAgICJpZCI6ICJFamVtcGxvQXBwb2ludG1lbnQiLAogICAgICAgICAgICAgICAg
Im1ldGEiOiB7CiAgICAgICAgICAgICAgICAgICAgInByb2ZpbGUiOiBbCiAgICAgICAgICAgICAg
ICAgICAgICAgICJodHRwOi8vbWluc2FsLmNsL2xpc3RhZXNwZXJhL1N0cnVjdHVyZURlZmluaXRp
b24vQXBwb2ludG1lbnRJbmljaW9MRSIKICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAg
ICAgICB9LAogICAgICAgICAgICAgICAgInRleHQiOiB7CiAgICAgICAgICAgICAgICAgICAgInN0
YXR1cyI6ICJnZW5lcmF0ZWQiLAogICAgICAgICAgICAgICAgICAgICJkaXYiOiAiPGRpdiB4bWxu
cz1cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIj48cD48Yj5HZW5lcmF0ZWQgTmFycmF0
aXZlOiBBcHBvaW50bWVudDwvYj48YSBuYW1lPVwiRWplbXBsb0FwcG9pbnRtZW50XCI+IDwvYT48
L3A+PGRpdiBzdHlsZT1cImRpc3BsYXk6IGlubGluZS1ibG9jazsgYmFja2dyb3VuZC1jb2xvcjog
I2Q5ZTBlNzsgcGFkZGluZzogNnB4OyBtYXJnaW46IDRweDsgYm9yZGVyOiAxcHggc29saWQgIzhk
YTFiNDsgYm9yZGVyLXJhZGl1czogNXB4OyBsaW5lLWhlaWdodDogNjAlXCI+PHAgc3R5bGU9XCJt
YXJnaW4tYm90dG9tOiAwcHhcIj5SZXNvdXJjZSBBcHBvaW50bWVudCAmcXVvdDtFamVtcGxvQXBw
b2ludG1lbnQmcXVvdDsgPC9wPjxwIHN0eWxlPVwibWFyZ2luLWJvdHRvbTogMHB4XCI+UHJvZmls
ZTogPGEgaHJlZj1cIlN0cnVjdHVyZURlZmluaXRpb24tQXBwb2ludG1lbnRJbmljaW9MRS5odG1s
XCI+QXBwb2ludG1lbnQgSW5pY2lvIExFPC9hPjwvcD48L2Rpdj48cD48Yj5pZGVudGlmaWVyPC9i
PjogaWQ6XHUwMGEwMjE8L3A+PHA+PGI+c3RhdHVzPC9iPjogZnVsZmlsbGVkPC9wPjxwPjxiPnN0
YXJ0PC9iPjogSmFuIDIyLCAyMDIzLCA5OjAwOjAwIEFNPC9wPjxwPjxiPmJhc2VkT248L2I+OiA8
YSBocmVmPVwiI1NlcnZpY2VSZXF1ZXN0X0VqZW1wbG9TZXJ2aWNlUmVxdWVzdFwiPlNlZSBhYm92
ZSAoaHR0cDovL2FjbWUuY29tL2Voci9maGlyL1NlcnZpY2VSZXF1ZXN0L3NlcnYxKTwvYT48L3A+
PGgzPlBhcnRpY2lwYW50czwvaDM+PHRhYmxlIGNsYXNzPVwiZ3JpZFwiPjx0cj48dGQ+LTwvdGQ+
PHRkPjxiPkFjdG9yPC9iPjwvdGQ+PHRkPjxiPlN0YXR1czwvYj48L3RkPjwvdHI+PHRyPjx0ZD4q
PC90ZD48dGQ+PGEgaHJlZj1cIiNQcmFjdGl0aW9uZXJfRWplbXBsb1ByYWN0aXRpb25lclwiPlNl
ZSBhYm92ZSAoaHR0cDovL2FjbWUuY29tL2Voci9maGlyL1ByYWN0aXRpb25lci9wcmExKTwvYT48
L3RkPjx0ZD5hY2NlcHRlZDwvdGQ+PC90cj48L3RhYmxlPjwvZGl2PiIKICAgICAgICAgICAgICAg
IH0sCiAgICAgICAgICAgICAgICAiaWRlbnRpZmllciI6IFsKICAgICAgICAgICAgICAgICAgICB7
CiAgICAgICAgICAgICAgICAgICAgICAgICJ2YWx1ZSI6ICIyMSIKICAgICAgICAgICAgICAgICAg
ICB9CiAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgInN0YXR1cyI6ICJmdWxmaWxs
ZWQiLAogICAgICAgICAgICAgICAgInN0YXJ0IjogIjIwMjMtMDEtMjJUMDk6MDA6MDBaIiwKICAg
ICAgICAgICAgICAgICJlbmQiOiAiMjAyMy0wMS0yMlQwOTowMDowMFoiLAogICAgICAgICAgICAg
ICAgImJhc2VkT24iOiBbCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAg
ICAgICAicmVmZXJlbmNlIjogImh0dHA6Ly9hY21lLmNvbS9laHIvZmhpci9TZXJ2aWNlUmVxdWVz
dC9zZXJ2MSIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBdLAogICAgICAg
ICAgICAgICAgInBhcnRpY2lwYW50IjogWwogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAg
ICAgICAgICAgICAgICAgImFjdG9yIjogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgInJl
ZmVyZW5jZSI6ICJodHRwOi8vYWNtZS5jb20vZWhyL2ZoaXIvUHJhY3RpdGlvbmVyL3ByYTEiCiAg
ICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICJzdGF0dXMi
OiAiYWNjZXB0ZWQiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgXQogICAg
ICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAgICJmdWxsVXJsIjogImh0
dHA6Ly9hY21lLmNvbS9laHIvZmhpci9QYXRpZW50L0VqZW1wbG9QYXRpZW50IiwKICAgICAgICAg
ICAgInJlc291cmNlIjogewogICAgICAgICAgICAgICAgInJlc291cmNlVHlwZSI6ICJQYXRpZW50
IiwKICAgICAgICAgICAgICAgICJpZCI6ICJFamVtcGxvUGF0aWVudCIsCiAgICAgICAgICAgICAg
ICAibWV0YSI6IHsKICAgICAgICAgICAgICAgICAgICAicHJvZmlsZSI6IFsKICAgICAgICAgICAg
ICAgICAgICAgICAgImh0dHA6Ly9taW5zYWwuY2wvbGlzdGFlc3BlcmEvU3RydWN0dXJlRGVmaW5p
dGlvbi9QYXRpZW50TEUiCiAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgfSwK
ICAgICAgICAgICAgICAgICJ0ZXh0IjogewogICAgICAgICAgICAgICAgICAgICJzdGF0dXMiOiAi
ZXh0ZW5zaW9ucyIsCiAgICAgICAgICAgICAgICAgICAgImRpdiI6ICI8ZGl2IHhtbG5zPVwiaHR0
cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiPjxwPjxiPkdlbmVyYXRlZCBOYXJyYXRpdmU6IFBh
dGllbnQ8L2I+PGEgbmFtZT1cIkVqZW1wbG9QYXRpZW50XCI+IDwvYT48L3A+PGRpdiBzdHlsZT1c
ImRpc3BsYXk6IGlubGluZS1ibG9jazsgYmFja2dyb3VuZC1jb2xvcjogI2Q5ZTBlNzsgcGFkZGlu
ZzogNnB4OyBtYXJnaW46IDRweDsgYm9yZGVyOiAxcHggc29saWQgIzhkYTFiNDsgYm9yZGVyLXJh
ZGl1czogNXB4OyBsaW5lLWhlaWdodDogNjAlXCI+PHAgc3R5bGU9XCJtYXJnaW4tYm90dG9tOiAw
cHhcIj5SZXNvdXJjZSBQYXRpZW50ICZxdW90O0VqZW1wbG9QYXRpZW50JnF1b3Q7IDwvcD48cCBz
dHlsZT1cIm1hcmdpbi1ib3R0b206IDBweFwiPlByb2ZpbGU6IDxhIGhyZWY9XCJTdHJ1Y3R1cmVE
ZWZpbml0aW9uLVBhdGllbnRMRS5odG1sXCI+UGFjaWVudGUgTEU8L2E+PC9wPjwvZGl2PjxwPjxi
PkNvZGlnbyBkZSBJZGVudGlmaWNhY2nDs24gZGUgcGHDrXNlczwvYj46IEFuZG9ycmEgPHNwYW4g
c3R5bGU9XCJiYWNrZ3JvdW5kOiBMaWdodEdvbGRlblJvZFllbGxvdzsgbWFyZ2luOiA0cHg7IGJv
cmRlcjogMXB4IHNvbGlkIGtoYWtpXCI+IChbbm90IHN0YXRlZF0jQUQpPC9zcGFuPjwvcD48cD48
Yj5Db2RpZ28gZGUgSWRlbnRpZmljYWNpw7NuIGRlIE5hY2lvbmFsaWRhZDwvYj46IEFuZG9ycmEg
PHNwYW4gc3R5bGU9XCJiYWNrZ3JvdW5kOiBMaWdodEdvbGRlblJvZFllbGxvdzsgbWFyZ2luOiA0
cHg7IGJvcmRlcjogMXB4IHNvbGlkIGtoYWtpXCI+IChbbm90IHN0YXRlZF0jQUQpPC9zcGFuPjwv
cD48cD48Yj5JZGVudGlkYWQgZGUgZ2VuZXJvPC9iPjogbWFsZSA8c3BhbiBzdHlsZT1cImJhY2tn
cm91bmQ6IExpZ2h0R29sZGVuUm9kWWVsbG93OyBtYXJnaW46IDRweDsgYm9yZGVyOiAxcHggc29s
aWQga2hha2lcIj4gKFtub3Qgc3RhdGVkXSNtYWxlKTwvc3Bhbj48L3A+PHA+PGI+RXh0Qm9vbCBB
ZnJvZGVzY2VuZGllbnRlPC9iPjogZmFsc2U8L3A+PHA+PGI+aWRlbnRpZmllcjwvYj46IFJVTjog
MTU5OTk5OTk8L3A+PHA+PGI+bmFtZTwvYj46IEx1aXMgUGVyZXogKE9GRklDSUFMKSwgTHVpc2Eg
PC9wPjxwPjxiPnRlbGVjb208L2I+OiBwaDogNTY5ODU0ODc1NDU3KE1PQklMRSk8L3A+PHA+PGI+
Z2VuZGVyPC9iPjogbWFsZTwvcD48cD48Yj5iaXJ0aERhdGU8L2I+OiAxOTk1LTEyLTEyPC9wPjwv
ZGl2PiIKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAiZXh0ZW5zaW9uIjogWwog
ICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgInVybCI6ICJodHRw
Oi8vbWluc2FsLmNsL2xpc3RhZXNwZXJhL1N0cnVjdHVyZURlZmluaXRpb24vQ29kaWdvUGFpc2Vz
IiwKICAgICAgICAgICAgICAgICAgICAgICAgInZhbHVlQ29kZWFibGVDb25jZXB0IjogewogICAg
ICAgICAgICAgICAgICAgICAgICAgICAgImNvZGluZyI6IFsKICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJjb2RlIjog
IkFEIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAg
ICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAidGV4dCI6ICJBbmRvcnJh
IgogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAg
ICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICJ1cmwiOiAiaHR0cDovL21p
bnNhbC5jbC9saXN0YWVzcGVyYS9TdHJ1Y3R1cmVEZWZpbml0aW9uL05hY2lvbmFsaWRhZENvZGln
byIsCiAgICAgICAgICAgICAgICAgICAgICAgICJ2YWx1ZUNvZGVhYmxlQ29uY2VwdCI6IHsKICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICJjb2RpbmciOiBbCiAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiY29kZSI6
ICJBRCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAg
ICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgInRleHQiOiAiQW5kb3Jy
YSIKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0sCiAgICAg
ICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAidXJsIjogImh0dHA6Ly9t
aW5zYWwuY2wvbGlzdGFlc3BlcmEvU3RydWN0dXJlRGVmaW5pdGlvbi9JZGVudGlkYWRHZW5lcm8i
LAogICAgICAgICAgICAgICAgICAgICAgICAidmFsdWVDb2RlYWJsZUNvbmNlcHQiOiB7CiAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAiY29kaW5nIjogWwogICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImNvZGUiOiAi
bWFsZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAg
ICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAg
ICB9LAogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgInVybCI6
ICJodHRwOi8vbWluc2FsLmNsL2xpc3RhZXNwZXJhL1N0cnVjdHVyZURlZmluaXRpb24vRXh0Qm9v
bEFmcm9kZXNjZW5kaWVudGUiLAogICAgICAgICAgICAgICAgICAgICAgICAidmFsdWVCb29sZWFu
IjogZmFsc2UKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBdLAogICAgICAg
ICAgICAgICAgImlkZW50aWZpZXIiOiBbCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAg
ICAgICAgICAgICAgICAiZXh0ZW5zaW9uIjogWwogICAgICAgICAgICAgICAgICAgICAgICAgICAg
ewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ1cmwiOiAiaHR0cDovL21pbnNhbC5j
bC9saXN0YWVzcGVyYS9TdHJ1Y3R1cmVEZWZpbml0aW9uL0RpZ2l0b1ZlcmlmaWNhZG9yIiwKICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAidmFsdWVTdHJpbmciOiAiMSIKICAgICAgICAg
ICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAg
ICAgICAgICAgICAgICAgInR5cGUiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiZXh0
ZW5zaW9uIjogWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgInVybCI6ICJodHRwOi8vbWluc2FsLmNsL2xpc3RhZXNw
ZXJhL1N0cnVjdHVyZURlZmluaXRpb24vQ29kaWdvUGFpc2VzIiwKICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgInZhbHVlQ29kaW5nIjogewogICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgImNvZGUiOiAiQUQiCiAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAg
ICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgImNvZGluZyI6
IFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICJzeXN0ZW0iOiAiaHR0cDovL21pbnNhbC5jbC9saXN0YWVzcGVyYS9D
b2RlU3lzdGVtL0NTVGlwb0lkZW50aWZpY2Fkb3IiLAogICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAiY29kZSI6ICIxIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgImRpc3BsYXkiOiAiUlVOIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAg
ICAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAg
ICAgICAgICAgICAgICAgICAgICAgInN5c3RlbSI6ICJodHRwOi8vd3d3LmFjbWUuY29tL2lkZW50
aWZpZXJzL3BhdGllbnQiLAogICAgICAgICAgICAgICAgICAgICAgICAidmFsdWUiOiAiOTEyMzU2
NCIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAg
ICAgIm5hbWUiOiBbCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAg
ICAidXNlIjogIm9mZmljaWFsIiwKICAgICAgICAgICAgICAgICAgICAgICAgImZhbWlseSI6ICJj
b250cmVyYXMiLAogICAgICAgICAgICAgICAgICAgICAgICAiX2ZhbWlseSI6IHsKICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICJleHRlbnNpb24iOiBbCiAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAidXJsIjogImh0
dHA6Ly9taW5zYWwuY2wvbGlzdGFlc3BlcmEvU3RydWN0dXJlRGVmaW5pdGlvbi9TZWd1bmRvQXBl
bGxpZG8iLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAidmFsdWVTdHJpbmci
OiAiY29udHJlcmFzIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAg
ICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAg
ICAgICAgICAgICAgICAgImdpdmVuIjogWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgImZl
cm5hbmRvIgogICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgfSwK
ICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICJ1c2UiOiAidXN1
YWwiLAogICAgICAgICAgICAgICAgICAgICAgICAiZ2l2ZW4iOiBbCiAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAiamF2aWVyIgogICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAg
ICAgICAgICAgfQogICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICJ0ZWxlY29tIjog
WwogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgInN5c3RlbSI6
ICJwaG9uZSIsCiAgICAgICAgICAgICAgICAgICAgICAgICJ2YWx1ZSI6ICI1NjkxMjM0NTY3OCIs
CiAgICAgICAgICAgICAgICAgICAgICAgICJ1c2UiOiAibW9iaWxlIiwKICAgICAgICAgICAgICAg
ICAgICAgICAgInJhbmsiOiAxCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAg
XSwKICAgICAgICAgICAgICAgICJnZW5kZXIiOiAibWFsZSIsCiAgICAgICAgICAgICAgICAiYmly
dGhEYXRlIjogIjE5OTItMTEtMTIiCiAgICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIHsK
ICAgICAgICAgICAgImZ1bGxVcmwiOiAiaHR0cDovL2FjbWUuY29tL2Voci9maGlyL1F1ZXN0aW9u
bmFpcmVSZXNwb25zZS9xdWUxIiwKICAgICAgICAgICAgInJlc291cmNlIjogewogICAgICAgICAg
ICAgICAgInJlc291cmNlVHlwZSI6ICJRdWVzdGlvbm5haXJlUmVzcG9uc2UiLAogICAgICAgICAg
ICAgICAgImlkIjogIkVqZW1wbG9RdWVzdGlvbm5haXJlUmVzcG9uc2UiLAogICAgICAgICAgICAg
ICAgIm1ldGEiOiB7CiAgICAgICAgICAgICAgICAgICAgInByb2ZpbGUiOiBbCiAgICAgICAgICAg
ICAgICAgICAgICAgICJodHRwOi8vbWluc2FsLmNsL2xpc3RhZXNwZXJhL1N0cnVjdHVyZURlZmlu
aXRpb24vUXVlc3Rpb25uYWlyZVJlc3BvbnNlSW5pY2lvTEUiCiAgICAgICAgICAgICAgICAgICAg
XQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICJ0ZXh0IjogewogICAgICAgICAg
ICAgICAgICAgICJzdGF0dXMiOiAiZ2VuZXJhdGVkIiwKICAgICAgICAgICAgICAgICAgICAiZGl2
IjogIjxkaXYgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCI+PHA+PGI+R2Vu
ZXJhdGVkIE5hcnJhdGl2ZTogUXVlc3Rpb25uYWlyZVJlc3BvbnNlPC9iPjxhIG5hbWU9XCJFamVt
cGxvUXVlc3Rpb25uYWlyZVJlc3BvbnNlXCI+IDwvYT48L3A+PGRpdiBzdHlsZT1cImRpc3BsYXk6
IGlubGluZS1ibG9jazsgYmFja2dyb3VuZC1jb2xvcjogI2Q5ZTBlNzsgcGFkZGluZzogNnB4OyBt
YXJnaW46IDRweDsgYm9yZGVyOiAxcHggc29saWQgIzhkYTFiNDsgYm9yZGVyLXJhZGl1czogNXB4
OyBsaW5lLWhlaWdodDogNjAlXCI+PHAgc3R5bGU9XCJtYXJnaW4tYm90dG9tOiAwcHhcIj5SZXNv
dXJjZSBRdWVzdGlvbm5haXJlUmVzcG9uc2UgJnF1b3Q7RWplbXBsb1F1ZXN0aW9ubmFpcmVSZXNw
b25zZSZxdW90OyA8L3A+PHAgc3R5bGU9XCJtYXJnaW4tYm90dG9tOiAwcHhcIj5Qcm9maWxlOiA8
YSBocmVmPVwiU3RydWN0dXJlRGVmaW5pdGlvbi1RdWVzdGlvbm5haXJlUmVzcG9uc2VJbmljaW9M
RS5odG1sXCI+UXVlc3Rpb25uYWlyZVJlc3BvbnNlIEluaWNpbyBMRTwvYT48L3A+PC9kaXY+PHA+
PGI+c3RhdHVzPC9iPjogY29tcGxldGVkPC9wPjxibG9ja3F1b3RlPjxwPjxiPml0ZW08L2I+PC9w
PjxwPjxiPmxpbmtJZDwvYj46IFJlc3VtZW48L3A+PHA+PGI+dGV4dDwvYj46IFJlc3VtZW48L3A+
PGgzPkFuc3dlcnM8L2gzPjx0YWJsZSBjbGFzcz1cImdyaWRcIj48dHI+PHRkPi08L3RkPjx0ZD48
Yj5WYWx1ZVt4XTwvYj48L3RkPjwvdHI+PHRyPjx0ZD4qPC90ZD48dGQ+QW5hbW5lc2lzPC90ZD48
L3RyPjwvdGFibGU+PC9ibG9ja3F1b3RlPjwvZGl2PiIKICAgICAgICAgICAgICAgIH0sCiAgICAg
ICAgICAgICAgICAic3RhdHVzIjogImNvbXBsZXRlZCIsCiAgICAgICAgICAgICAgICAiaXRlbSI6
IFsKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICJsaW5rSWQi
OiAiUmVzdW1lbiIsCiAgICAgICAgICAgICAgICAgICAgICAgICJ0ZXh0IjogInBydWViYSIsCiAg
ICAgICAgICAgICAgICAgICAgICAgICJhbnN3ZXIiOiBbCiAgICAgICAgICAgICAgICAgICAgICAg
ICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInZhbHVlU3RyaW5nIjogIkFu
YW1uZXNpcyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAg
ICAgICAgXQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIF0KICAgICAgICAg
ICAgfQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgICAiZnVsbFVybCI6ICJodHRwOi8v
YWNtZS5jb20vZWhyL2ZoaXIvQ29uZGl0aW9uL2NvbjEiLAogICAgICAgICAgICAicmVzb3VyY2Ui
OiB7CiAgICAgICAgICAgICAgICAicmVzb3VyY2VUeXBlIjogIkNvbmRpdGlvbiIsCiAgICAgICAg
ICAgICAgICAiaWQiOiAiRWplbXBsb0NvbmRpdGlvbiIsCiAgICAgICAgICAgICAgICAibWV0YSI6
IHsKICAgICAgICAgICAgICAgICAgICAicHJvZmlsZSI6IFsKICAgICAgICAgICAgICAgICAgICAg
ICAgImh0dHA6Ly9taW5zYWwuY2wvbGlzdGFlc3BlcmEvU3RydWN0dXJlRGVmaW5pdGlvbi9Db25k
aXRpb25JbmljaW9EaWFnbm9zdGljb1Nvc3BlY2hhTEUiCiAgICAgICAgICAgICAgICAgICAgXQog
ICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICJ0ZXh0IjogewogICAgICAgICAgICAg
ICAgICAgICJzdGF0dXMiOiAiZ2VuZXJhdGVkIiwKICAgICAgICAgICAgICAgICAgICAiZGl2Ijog
IjxkaXYgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCI+PHA+PGI+R2VuZXJh
dGVkIE5hcnJhdGl2ZTogQ29uZGl0aW9uPC9iPjxhIG5hbWU9XCJFamVtcGxvQ29uZGl0aW9uXCI+
IDwvYT48L3A+PGRpdiBzdHlsZT1cImRpc3BsYXk6IGlubGluZS1ibG9jazsgYmFja2dyb3VuZC1j
b2xvcjogI2Q5ZTBlNzsgcGFkZGluZzogNnB4OyBtYXJnaW46IDRweDsgYm9yZGVyOiAxcHggc29s
aWQgIzhkYTFiNDsgYm9yZGVyLXJhZGl1czogNXB4OyBsaW5lLWhlaWdodDogNjAlXCI+PHAgc3R5
bGU9XCJtYXJnaW4tYm90dG9tOiAwcHhcIj5SZXNvdXJjZSBDb25kaXRpb24gJnF1b3Q7RWplbXBs
b0NvbmRpdGlvbiZxdW90OyA8L3A+PHAgc3R5bGU9XCJtYXJnaW4tYm90dG9tOiAwcHhcIj5Qcm9m
aWxlOiA8YSBocmVmPVwiU3RydWN0dXJlRGVmaW5pdGlvbi1Db25kaXRpb25JbmljaW9EaWFnbm9z
dGljb1Nvc3BlY2hhTEUuaHRtbFwiPkNvbmRpdGlvbiBJbmljaW8gRGlhZ25vc3RpY28gU29zcGVj
aGEgTEU8L2E+PC9wPjwvZGl2PjxwPjxiPmNhdGVnb3J5PC9iPjogZGlhZ25vc3RpY28gPHNwYW4g
c3R5bGU9XCJiYWNrZ3JvdW5kOiBMaWdodEdvbGRlblJvZFllbGxvdzsgbWFyZ2luOiA0cHg7IGJv
cmRlcjogMXB4IHNvbGlkIGtoYWtpXCI+ICg8YSBocmVmPVwiaHR0cDovL3Rlcm1pbm9sb2d5Lmhs
Ny5vcmcvMy4xLjAvQ29kZVN5c3RlbS1jb25kaXRpb24tY2F0ZWdvcnkuaHRtbFwiPkNvbmRpdGlv
biBDYXRlZ29yeSBDb2RlczwvYT4jZW5jb3VudGVyLWRpYWdub3Npcyk8L3NwYW4+PC9wPjxwPjxi
PmNvZGU8L2I+OiBEaWFnbm9zdGljb1RleHRvTGlicmVTb3NwZWNoYSA8c3BhbiBzdHlsZT1cImJh
Y2tncm91bmQ6IExpZ2h0R29sZGVuUm9kWWVsbG93OyBtYXJnaW46IDRweDsgYm9yZGVyOiAxcHgg
c29saWQga2hha2lcIj4gKDxhIGhyZWY9XCJDb2RlU3lzdGVtLUNTVGlwb0NvZERpYWdub3N0aWNh
Lmh0bWxcIj5UaXBvIENvZGlmaWNhY2nDs24gRGlhZ25vc3RpY2E8L2E+IzIpPC9zcGFuPjwvcD48
cD48Yj5zdWJqZWN0PC9iPjogPGEgaHJlZj1cIiNQYXRpZW50X0VqZW1wbG9QYXRpZW50XCI+U2Vl
IGFib3ZlIChodHRwOi8vYWNtZS5jb20vZWhyL2ZoaXIvUGF0aWVudC9FamVtcGxvUGF0aWVudCk8
L2E+PC9wPjxwPjxiPm5vdGU8L2I+OiBGdW5kYW1lbnRvRGlhZ25vc3RpY288L3A+PC9kaXY+Igog
ICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICJjYXRlZ29yeSI6IFsKICAgICAgICAg
ICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICJjb2RpbmciOiBbCiAgICAgICAg
ICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInN5
c3RlbSI6ICJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL2NvbmRpdGlvbi1j
YXRlZ29yeSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImNvZGUiOiAiZW5jb3Vu
dGVyLWRpYWdub3NpcyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAg
ICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgICAgICAgInRleHQiOiAiZGlhZ25vc3Rp
Y28iCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAg
ICAgICJjb2RlIjogewogICAgICAgICAgICAgICAgICAgICJjb2RpbmciOiBbCiAgICAgICAgICAg
ICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJzeXN0ZW0iOiAiaHR0
cDovL21pbnNhbC5jbC9saXN0YWVzcGVyYS9Db2RlU3lzdGVtL0NTVGlwb0NvZERpYWdub3N0aWNh
IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJjb2RlIjogIjIiCiAgICAgICAgICAgICAg
ICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICAgICJ0
ZXh0IjogIkRpYWdub3N0aWNvVGV4dG9MaWJyZVNvc3BlY2hhIgogICAgICAgICAgICAgICAgfSwK
ICAgICAgICAgICAgICAgICJzdWJqZWN0IjogewogICAgICAgICAgICAgICAgICAgICJyZWZlcmVu
Y2UiOiAiaHR0cDovL2FjbWUuY29tL2Voci9maGlyL1BhdGllbnQvRWplbXBsb1BhdGllbnQiCiAg
ICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgIm5vdGUiOiBbCiAgICAgICAgICAgICAg
ICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAidGV4dCI6ICJGdW5kYW1lbnRvRGlhZ25v
c3RpY28iCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgXQogICAgICAgICAg
ICB9CiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAgICJmdWxsVXJsIjogImh0dHA6Ly9h
Y21lLmNvbS9laHIvZmhpci9Db25kaXRpb24vY29uMiIsCiAgICAgICAgICAgICJyZXNvdXJjZSI6
IHsKICAgICAgICAgICAgICAgICJyZXNvdXJjZVR5cGUiOiAiQ29uZGl0aW9uIiwKICAgICAgICAg
ICAgICAgICJpZCI6ICJFamVtcGxvQ29uZGl0aW9uMiIsCiAgICAgICAgICAgICAgICAibWV0YSI6
IHsKICAgICAgICAgICAgICAgICAgICAicHJvZmlsZSI6IFsKICAgICAgICAgICAgICAgICAgICAg
ICAgImh0dHA6Ly9taW5zYWwuY2wvbGlzdGFlc3BlcmEvU3RydWN0dXJlRGVmaW5pdGlvbi9Db25k
aXRpb25JbmljaW9JbmRpY2VDb21vcmJpbGlkYWRMRSIKICAgICAgICAgICAgICAgICAgICBdCiAg
ICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgInRleHQiOiB7CiAgICAgICAgICAgICAg
ICAgICAgInN0YXR1cyI6ICJnZW5lcmF0ZWQiLAogICAgICAgICAgICAgICAgICAgICJkaXYiOiAi
PGRpdiB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIj48cD48Yj5HZW5lcmF0
ZWQgTmFycmF0aXZlOiBDb25kaXRpb248L2I+PGEgbmFtZT1cIkVqZW1wbG9Db25kaXRpb24yXCI+
IDwvYT48L3A+PGRpdiBzdHlsZT1cImRpc3BsYXk6IGlubGluZS1ibG9jazsgYmFja2dyb3VuZC1j
b2xvcjogI2Q5ZTBlNzsgcGFkZGluZzogNnB4OyBtYXJnaW46IDRweDsgYm9yZGVyOiAxcHggc29s
aWQgIzhkYTFiNDsgYm9yZGVyLXJhZGl1czogNXB4OyBsaW5lLWhlaWdodDogNjAlXCI+PHAgc3R5
bGU9XCJtYXJnaW4tYm90dG9tOiAwcHhcIj5SZXNvdXJjZSBDb25kaXRpb24gJnF1b3Q7RWplbXBs
b0NvbmRpdGlvbjImcXVvdDsgPC9wPjxwIHN0eWxlPVwibWFyZ2luLWJvdHRvbTogMHB4XCI+UHJv
ZmlsZTogPGEgaHJlZj1cIlN0cnVjdHVyZURlZmluaXRpb24tQ29uZGl0aW9uSW5pY2lvSW5kaWNl
Q29tb3JiaWxpZGFkTEUuaHRtbFwiPkNvbmRpdGlvbiBJbmljaW8gSW5kaWNlIENvbW9yYmlsaWRh
ZCBMRTwvYT48L3A+PC9kaXY+PHA+PGI+Y2F0ZWdvcnk8L2I+OiBJbmRpY2UgQ29tb3JiaWxpZGFk
IDxzcGFuIHN0eWxlPVwiYmFja2dyb3VuZDogTGlnaHRHb2xkZW5Sb2RZZWxsb3c7IG1hcmdpbjog
NHB4OyBib3JkZXI6IDFweCBzb2xpZCBraGFraVwiPiAoPGEgaHJlZj1cImh0dHA6Ly90ZXJtaW5v
bG9neS5obDcub3JnLzMuMS4wL0NvZGVTeXN0ZW0tY29uZGl0aW9uLWNhdGVnb3J5Lmh0bWxcIj5D
b25kaXRpb24gQ2F0ZWdvcnkgQ29kZXM8L2E+I3Byb2JsZW0tbGlzdC1pdGVtKTwvc3Bhbj48L3A+
PHA+PGI+Y29kZTwvYj46IERpYWdub3N0aWNvVGV4dG9MaWJyZVNvc3BlY2hhIDxzcGFuIHN0eWxl
PVwiYmFja2dyb3VuZDogTGlnaHRHb2xkZW5Sb2RZZWxsb3c7IG1hcmdpbjogNHB4OyBib3JkZXI6
IDFweCBzb2xpZCBraGFraVwiPiAoPGEgaHJlZj1cIkNvZGVTeXN0ZW0tQ1NJbmRpY2Vjb21vcmJp
bGlkYWQuaHRtbFwiPkluZGljZSBDb21vcmJpbGlkYWQ8L2E+I0cxKTwvc3Bhbj48L3A+PHA+PGI+
c3ViamVjdDwvYj46IDxhIGhyZWY9XCIjUGF0aWVudF9FamVtcGxvUGF0aWVudFwiPlNlZSBhYm92
ZSAoaHR0cDovL2FjbWUuY29tL2Voci9maGlyL1BhdGllbnQvRWplbXBsb1BhdGllbnQpPC9hPjwv
cD48L2Rpdj4iCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgImNhdGVnb3J5Ijog
WwogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgImNvZGluZyI6
IFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAic3lzdGVtIjogImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0v
Y29uZGl0aW9uLWNhdGVnb3J5IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiY29k
ZSI6ICJwcm9ibGVtLWxpc3QtaXRlbSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAg
ICAgICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgICAgICAgInRleHQiOiAi
SW5kaWNlIENvbW9yYmlsaWRhZCIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAg
ICBdLAogICAgICAgICAgICAgICAgImNvZGUiOiB7CiAgICAgICAgICAgICAgICAgICAgImNvZGlu
ZyI6IFsKICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAg
ICAgInN5c3RlbSI6ICJodHRwOi8vbWluc2FsLmNsL2xpc3RhZXNwZXJhL0NvZGVTeXN0ZW0vQ1NJ
bmRpY2Vjb21vcmJpbGlkYWQiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgImNvZGUiOiAi
RzEiCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBdLAogICAg
ICAgICAgICAgICAgICAgICJ0ZXh0IjogIkRpYWdub3N0aWNvVGV4dG9MaWJyZVNvc3BlY2hhIgog
ICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICJzdWJqZWN0IjogewogICAgICAgICAg
ICAgICAgICAgICJyZWZlcmVuY2UiOiAiaHR0cDovL2FjbWUuY29tL2Voci9maGlyL1BhdGllbnQv
RWplbXBsb1BhdGllbnQiCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9
LAogICAgICAgIHsKICAgICAgICAgICAgImZ1bGxVcmwiOiAiaHR0cDovL2FjbWUuY29tL2Voci9m
aGlyL0NvbmRpdGlvbi9jb24zIiwKICAgICAgICAgICAgInJlc291cmNlIjogewogICAgICAgICAg
ICAgICAgInJlc291cmNlVHlwZSI6ICJDb25kaXRpb24iLAogICAgICAgICAgICAgICAgImlkIjog
IkVqZW1wbG9Db25kaXRpb24zIiwKICAgICAgICAgICAgICAgICJtZXRhIjogewogICAgICAgICAg
ICAgICAgICAgICJwcm9maWxlIjogWwogICAgICAgICAgICAgICAgICAgICAgICAiaHR0cDovL21p
bnNhbC5jbC9saXN0YWVzcGVyYS9TdHJ1Y3R1cmVEZWZpbml0aW9uL0NvbmRpdGlvbkluaWNpb1Nv
c3BlY2hhR2VzTEUiCiAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgfSwKICAg
ICAgICAgICAgICAgICJ0ZXh0IjogewogICAgICAgICAgICAgICAgICAgICJzdGF0dXMiOiAiZ2Vu
ZXJhdGVkIiwKICAgICAgICAgICAgICAgICAgICAiZGl2IjogIjxkaXYgeG1sbnM9XCJodHRwOi8v
d3d3LnczLm9yZy8xOTk5L3hodG1sXCI+PHA+PGI+R2VuZXJhdGVkIE5hcnJhdGl2ZTogQ29uZGl0
aW9uPC9iPjxhIG5hbWU9XCJFamVtcGxvQ29uZGl0aW9uM1wiPiA8L2E+PC9wPjxkaXYgc3R5bGU9
XCJkaXNwbGF5OiBpbmxpbmUtYmxvY2s7IGJhY2tncm91bmQtY29sb3I6ICNkOWUwZTc7IHBhZGRp
bmc6IDZweDsgbWFyZ2luOiA0cHg7IGJvcmRlcjogMXB4IHNvbGlkICM4ZGExYjQ7IGJvcmRlci1y
YWRpdXM6IDVweDsgbGluZS1oZWlnaHQ6IDYwJVwiPjxwIHN0eWxlPVwibWFyZ2luLWJvdHRvbTog
MHB4XCI+UmVzb3VyY2UgQ29uZGl0aW9uICZxdW90O0VqZW1wbG9Db25kaXRpb24zJnF1b3Q7IDwv
cD48cCBzdHlsZT1cIm1hcmdpbi1ib3R0b206IDBweFwiPlByb2ZpbGU6IDxhIGhyZWY9XCJTdHJ1
Y3R1cmVEZWZpbml0aW9uLUNvbmRpdGlvbkluaWNpb1Nvc3BlY2hhR2VzTEUuaHRtbFwiPkNvbmRp
dGlvbiBJbmljaW8gU29zcGVjaGEgR2VzIExFPC9hPjwvcD48L2Rpdj48cD48Yj5jYXRlZ29yeTwv
Yj46IHNvc3BlY2hhR2VzIDxzcGFuIHN0eWxlPVwiYmFja2dyb3VuZDogTGlnaHRHb2xkZW5Sb2RZ
ZWxsb3c7IG1hcmdpbjogNHB4OyBib3JkZXI6IDFweCBzb2xpZCBraGFraVwiPiAoPGEgaHJlZj1c
Imh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnLzMuMS4wL0NvZGVTeXN0ZW0tY29uZGl0aW9uLWNh
dGVnb3J5Lmh0bWxcIj5Db25kaXRpb24gQ2F0ZWdvcnkgQ29kZXM8L2E+I3Byb2JsZW0tbGlzdC1p
dGVtKTwvc3Bhbj48L3A+PHA+PGI+Y29kZTwvYj46IFNvc3BlY2hhUGF0b2xvZ2lhR2VzR2xvc2Eg
PHNwYW4gc3R5bGU9XCJiYWNrZ3JvdW5kOiBMaWdodEdvbGRlblJvZFllbGxvdzsgbWFyZ2luOiA0
cHg7IGJvcmRlcjogMXB4IHNvbGlkIGtoYWtpXCI+ICg8YSBocmVmPVwiQ29kZVN5c3RlbS1DU1Nv
c3BlY2hhUGF0b2xvZ2lhR2VzLmh0bWxcIj5Tb3NwZWNoYSBQYXRvbG9naWEgR2VzPC9hPiNBMDAw
KTwvc3Bhbj48L3A+PHA+PGI+c3ViamVjdDwvYj46IDxhIGhyZWY9XCIjUGF0aWVudF9FamVtcGxv
UGF0aWVudFwiPlNlZSBhYm92ZSAoaHR0cDovL2FjbWUuY29tL2Voci9maGlyL1BhdGllbnQvRWpl
bXBsb1BhdGllbnQpPC9hPjwvcD48L2Rpdj4iCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAg
ICAgICAgImNhdGVnb3J5IjogWwogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAg
ICAgICAgICAgImNvZGluZyI6IFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAic3lzdGVtIjogImh0dHA6Ly90ZXJtaW5vbG9neS5o
bDcub3JnL0NvZGVTeXN0ZW0vY29uZGl0aW9uLWNhdGVnb3J5IiwKICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAiY29kZSI6ICJwcm9ibGVtLWxpc3QtaXRlbSIKICAgICAgICAgICAgICAg
ICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAg
ICAgICAgICAgInRleHQiOiAic29zcGVjaGFHZXMiCiAgICAgICAgICAgICAgICAgICAgfQogICAg
ICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICJjb2RlIjogewogICAgICAgICAgICAgICAg
ICAgICJjb2RpbmciOiBbCiAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICJzeXN0ZW0iOiAiaHR0cDovL21pbnNhbC5jbC9saXN0YWVzcGVyYS9Db2Rl
U3lzdGVtL0NTU29zcGVjaGFQYXRvbG9naWFHZXMiLAogICAgICAgICAgICAgICAgICAgICAgICAg
ICAgImNvZGUiOiAiQTAwMCIKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAg
ICAgICAgIF0sCiAgICAgICAgICAgICAgICAgICAgInRleHQiOiAiU29zcGVjaGFQYXRvbG9naWFH
ZXNHbG9zYSIKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAic3ViamVjdCI6IHsK
ICAgICAgICAgICAgICAgICAgICAicmVmZXJlbmNlIjogImh0dHA6Ly9hY21lLmNvbS9laHIvZmhp
ci9QYXRpZW50L0VqZW1wbG9QYXRpZW50IgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9
CiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAgICJmdWxsVXJsIjogImh0dHA6Ly9hY21l
LmNvbS9laHIvZmhpci9PYnNlcnZhdGlvbi9vYnMxIiwKICAgICAgICAgICAgInJlc291cmNlIjog
ewogICAgICAgICAgICAgICAgInJlc291cmNlVHlwZSI6ICJPYnNlcnZhdGlvbiIsCiAgICAgICAg
ICAgICAgICAiaWQiOiAiRWplbXBsb09ic2VydmF0aW9uIiwKICAgICAgICAgICAgICAgICJtZXRh
IjogewogICAgICAgICAgICAgICAgICAgICJwcm9maWxlIjogWwogICAgICAgICAgICAgICAgICAg
ICAgICAiaHR0cDovL21pbnNhbC5jbC9saXN0YWVzcGVyYS9TdHJ1Y3R1cmVEZWZpbml0aW9uL09i
c2VydmF0aW9uSW5pY2lvTEUiCiAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAg
fSwKICAgICAgICAgICAgICAgICJ0ZXh0IjogewogICAgICAgICAgICAgICAgICAgICJzdGF0dXMi
OiAiZ2VuZXJhdGVkIiwKICAgICAgICAgICAgICAgICAgICAiZGl2IjogIjxkaXYgeG1sbnM9XCJo
dHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCI+PHA+PGI+R2VuZXJhdGVkIE5hcnJhdGl2ZTog
T2JzZXJ2YXRpb248L2I+PGEgbmFtZT1cIkVqZW1wbG9PYnNlcnZhdGlvblwiPiA8L2E+PC9wPjxk
aXYgc3R5bGU9XCJkaXNwbGF5OiBpbmxpbmUtYmxvY2s7IGJhY2tncm91bmQtY29sb3I6ICNkOWUw
ZTc7IHBhZGRpbmc6IDZweDsgbWFyZ2luOiA0cHg7IGJvcmRlcjogMXB4IHNvbGlkICM4ZGExYjQ7
IGJvcmRlci1yYWRpdXM6IDVweDsgbGluZS1oZWlnaHQ6IDYwJVwiPjxwIHN0eWxlPVwibWFyZ2lu
LWJvdHRvbTogMHB4XCI+UmVzb3VyY2UgT2JzZXJ2YXRpb24gJnF1b3Q7RWplbXBsb09ic2VydmF0
aW9uJnF1b3Q7IDwvcD48cCBzdHlsZT1cIm1hcmdpbi1ib3R0b206IDBweFwiPlByb2ZpbGU6IDxh
IGhyZWY9XCJTdHJ1Y3R1cmVEZWZpbml0aW9uLU9ic2VydmF0aW9uSW5pY2lvTEUuaHRtbFwiPk9i
c2VydmF0aW9uIEluaWNpbyBMRTwvYT48L3A+PC9kaXY+PHA+PGI+c3RhdHVzPC9iPjogcmVnaXN0
ZXJlZDwvcD48cD48Yj5jb2RlPC9iPjogZXhhbWVuZXMgPHNwYW4gc3R5bGU9XCJiYWNrZ3JvdW5k
OiBMaWdodEdvbGRlblJvZFllbGxvdzsgbWFyZ2luOiA0cHg7IGJvcmRlcjogMXB4IHNvbGlkIGto
YWtpXCI+ICgpPC9zcGFuPjwvcD48cD48Yj52YWx1ZTwvYj46IGV4YW1lbmVzIHJlYWxpemFkb3M8
L3A+PC9kaXY+IgogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICJzdGF0dXMiOiAi
cmVnaXN0ZXJlZCIsCiAgICAgICAgICAgICAgICAiY29kZSI6IHsKICAgICAgICAgICAgICAgICAg
ICAidGV4dCI6ICJleGFtZW5lcyIKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAi
dmFsdWVTdHJpbmciOiAiZXhhbWVuZXMgcmVhbGl6YWRvcyIKICAgICAgICAgICAgfQogICAgICAg
IH0sCiAgICAgICAgewogICAgICAgICAgICAiZnVsbFVybCI6ICJodHRwOi8vYWNtZS5jb20vZWhy
L2ZoaXIvQWxsZXJneUludG9sZXJhbmNlL2FsbDEiLAogICAgICAgICAgICAicmVzb3VyY2UiOiB7
CiAgICAgICAgICAgICAgICAicmVzb3VyY2VUeXBlIjogIkFsbGVyZ3lJbnRvbGVyYW5jZSIsCiAg
ICAgICAgICAgICAgICAiaWQiOiAiRWplbXBsb0FsbGVyZ3lJbnRvbGVyYW5jZSIsCiAgICAgICAg
ICAgICAgICAibWV0YSI6IHsKICAgICAgICAgICAgICAgICAgICAicHJvZmlsZSI6IFsKICAgICAg
ICAgICAgICAgICAgICAgICAgImh0dHA6Ly9taW5zYWwuY2wvbGlzdGFlc3BlcmEvU3RydWN0dXJl
RGVmaW5pdGlvbi9BbGxlcmd5SW50b2xlcmFuY2VJbmljaW9MRSIKICAgICAgICAgICAgICAgICAg
ICBdCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgInRleHQiOiB7CiAgICAgICAg
ICAgICAgICAgICAgInN0YXR1cyI6ICJnZW5lcmF0ZWQiLAogICAgICAgICAgICAgICAgICAgICJk
aXYiOiAiPGRpdiB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIj48cD48Yj5H
ZW5lcmF0ZWQgTmFycmF0aXZlOiBBbGxlcmd5SW50b2xlcmFuY2U8L2I+PGEgbmFtZT1cIkVqZW1w
bG9BbGxlcmd5SW50b2xlcmFuY2VcIj4gPC9hPjwvcD48ZGl2IHN0eWxlPVwiZGlzcGxheTogaW5s
aW5lLWJsb2NrOyBiYWNrZ3JvdW5kLWNvbG9yOiAjZDllMGU3OyBwYWRkaW5nOiA2cHg7IG1hcmdp
bjogNHB4OyBib3JkZXI6IDFweCBzb2xpZCAjOGRhMWI0OyBib3JkZXItcmFkaXVzOiA1cHg7IGxp
bmUtaGVpZ2h0OiA2MCVcIj48cCBzdHlsZT1cIm1hcmdpbi1ib3R0b206IDBweFwiPlJlc291cmNl
IEFsbGVyZ3lJbnRvbGVyYW5jZSAmcXVvdDtFamVtcGxvQWxsZXJneUludG9sZXJhbmNlJnF1b3Q7
IDwvcD48cCBzdHlsZT1cIm1hcmdpbi1ib3R0b206IDBweFwiPlByb2ZpbGU6IDxhIGhyZWY9XCJT
dHJ1Y3R1cmVEZWZpbml0aW9uLUFsbGVyZ3lJbnRvbGVyYW5jZUluaWNpb0xFLmh0bWxcIj5BbGxl
cmd5SW50b2xlcmFuY2UgSW5pY2lvIExFPC9hPjwvcD48L2Rpdj48cD48Yj5jb2RlPC9iPjogdGlw
byBhbGVyZ2lhIDxzcGFuIHN0eWxlPVwiYmFja2dyb3VuZDogTGlnaHRHb2xkZW5Sb2RZZWxsb3c7
IG1hcmdpbjogNHB4OyBib3JkZXI6IDFweCBzb2xpZCBraGFraVwiPiAoKTwvc3Bhbj48L3A+PHA+
PGI+cGF0aWVudDwvYj46IDxhIGhyZWY9XCIjUGF0aWVudF9FamVtcGxvUGF0aWVudFwiPlNlZSBh
Ym92ZSAoaHR0cDovL2FjbWUuY29tL2Voci9maGlyL1BhdGllbnQvRWplbXBsb1BhdGllbnQpPC9h
PjwvcD48L2Rpdj4iCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgImNvZGUiOiB7
CiAgICAgICAgICAgICAgICAgICAgInRleHQiOiAidGlwbyBhbGVyZ2lhIgogICAgICAgICAgICAg
ICAgfSwKICAgICAgICAgICAgICAgICJwYXRpZW50IjogewogICAgICAgICAgICAgICAgICAgICJy
ZWZlcmVuY2UiOiAiaHR0cDovL2FjbWUuY29tL2Voci9maGlyL1BhdGllbnQvRWplbXBsb1BhdGll
bnQiCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIHsK
ICAgICAgICAgICAgImZ1bGxVcmwiOiAiaHR0cDovL2FjbWUuY29tL2Voci9maGlyL1ByYWN0aXRp
b25lclJvbGUvcHJhUjEiLAogICAgICAgICAgICAicmVzb3VyY2UiOiB7CiAgICAgICAgICAgICAg
ICAicmVzb3VyY2VUeXBlIjogIlByYWN0aXRpb25lclJvbGUiLAogICAgICAgICAgICAgICAgImlk
IjogIkVqZW1wbG9QcmFjdGl0aW9uZXJSb2xlIiwKICAgICAgICAgICAgICAgICJtZXRhIjogewog
ICAgICAgICAgICAgICAgICAgICJwcm9maWxlIjogWwogICAgICAgICAgICAgICAgICAgICAgICAi
aHR0cDovL21pbnNhbC5jbC9saXN0YWVzcGVyYS9TdHJ1Y3R1cmVEZWZpbml0aW9uL1ByYWN0aXRp
b25lclJvbGVMRSIKICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICB9LAogICAg
ICAgICAgICAgICAgInRleHQiOiB7CiAgICAgICAgICAgICAgICAgICAgInN0YXR1cyI6ICJnZW5l
cmF0ZWQiLAogICAgICAgICAgICAgICAgICAgICJkaXYiOiAiPGRpdiB4bWxucz1cImh0dHA6Ly93
d3cudzMub3JnLzE5OTkveGh0bWxcIj48cD48Yj5HZW5lcmF0ZWQgTmFycmF0aXZlOiBQcmFjdGl0
aW9uZXJSb2xlPC9iPjxhIG5hbWU9XCJFamVtcGxvUHJhY3RpdGlvbmVyUm9sZVwiPiA8L2E+PC9w
PjxkaXYgc3R5bGU9XCJkaXNwbGF5OiBpbmxpbmUtYmxvY2s7IGJhY2tncm91bmQtY29sb3I6ICNk
OWUwZTc7IHBhZGRpbmc6IDZweDsgbWFyZ2luOiA0cHg7IGJvcmRlcjogMXB4IHNvbGlkICM4ZGEx
YjQ7IGJvcmRlci1yYWRpdXM6IDVweDsgbGluZS1oZWlnaHQ6IDYwJVwiPjxwIHN0eWxlPVwibWFy
Z2luLWJvdHRvbTogMHB4XCI+UmVzb3VyY2UgUHJhY3RpdGlvbmVyUm9sZSAmcXVvdDtFamVtcGxv
UHJhY3RpdGlvbmVyUm9sZSZxdW90OyA8L3A+PHAgc3R5bGU9XCJtYXJnaW4tYm90dG9tOiAwcHhc
Ij5Qcm9maWxlOiA8YSBocmVmPVwiU3RydWN0dXJlRGVmaW5pdGlvbi1QcmFjdGl0aW9uZXJSb2xl
TEUuaHRtbFwiPlByYWN0aXRpb25lclJvbGUgTEU8L2E+PC9wPjwvZGl2PjxwPjxiPnByYWN0aXRp
b25lcjwvYj46IDxhIGhyZWY9XCIjUHJhY3RpdGlvbmVyX0VqZW1wbG9QcmFjdGl0aW9uZXJcIj5T
ZWUgYWJvdmUgKGh0dHA6Ly9hY21lLmNvbS9laHIvZmhpci9QcmFjdGl0aW9uZXIvcHJhMSk8L2E+
PC9wPjxwPjxiPm9yZ2FuaXphdGlvbjwvYj46IDxhIGhyZWY9XCIjT3JnYW5pemF0aW9uX0VqZW1w
bG9Pcmdhbml6YXRpb25cIj5TZWUgYWJvdmUgKGh0dHA6Ly9hY21lLmNvbS9laHIvZmhpci9Pcmdh
bml6YXRpb24vb3JnMSk8L2E+PC9wPjxwPjxiPmNvZGU8L2I+OiBpbmljaWFkb3IgPHNwYW4gc3R5
bGU9XCJiYWNrZ3JvdW5kOiBMaWdodEdvbGRlblJvZFllbGxvdzsgbWFyZ2luOiA0cHg7IGJvcmRl
cjogMXB4IHNvbGlkIGtoYWtpXCI+IChbbm90IHN0YXRlZF0jaW5pY2lhZG9yKTwvc3Bhbj48L3A+
PC9kaXY+IgogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICJwcmFjdGl0aW9uZXIi
OiB7CiAgICAgICAgICAgICAgICAgICAgInJlZmVyZW5jZSI6ICJodHRwOi8vYWNtZS5jb20vZWhy
L2ZoaXIvUHJhY3RpdGlvbmVyL3ByYTEiCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAg
ICAgIm9yZ2FuaXphdGlvbiI6IHsKICAgICAgICAgICAgICAgICAgICAicmVmZXJlbmNlIjogImh0
dHA6Ly9hY21lLmNvbS9laHIvZmhpci9Pcmdhbml6YXRpb24vb3JnMSIKICAgICAgICAgICAgICAg
IH0sCiAgICAgICAgICAgICAgICAiY29kZSI6IFsKICAgICAgICAgICAgICAgICAgICB7CiAgICAg
ICAgICAgICAgICAgICAgICAgICJjb2RpbmciOiBbCiAgICAgICAgICAgICAgICAgICAgICAgICAg
ICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImNvZGUiOiAiaW5pY2lhZG9yIgog
ICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBdCiAg
ICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgXQogICAgICAgICAgICB9CiAgICAg
ICAgfSwKICAgICAgICB7CiAgICAgICAgICAgICJmdWxsVXJsIjogImh0dHA6Ly9hY21lLmNvbS9l
aHIvZmhpci9QcmFjdGl0aW9uZXIvcHJhMSIsCiAgICAgICAgICAgICJyZXNvdXJjZSI6IHsKICAg
ICAgICAgICAgICAgICJyZXNvdXJjZVR5cGUiOiAiUHJhY3RpdGlvbmVyIiwKICAgICAgICAgICAg
ICAgICJpZCI6ICJFamVtcGxvUHJhY3RpdGlvbmVyIiwKICAgICAgICAgICAgICAgICJtZXRhIjog
ewogICAgICAgICAgICAgICAgICAgICJwcm9maWxlIjogWwogICAgICAgICAgICAgICAgICAgICAg
ICAiaHR0cDovL21pbnNhbC5jbC9saXN0YWVzcGVyYS9TdHJ1Y3R1cmVEZWZpbml0aW9uL1ByYWN0
aXRpb25lckxFIgogICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgIH0sCiAgICAg
ICAgICAgICAgICAidGV4dCI6IHsKICAgICAgICAgICAgICAgICAgICAic3RhdHVzIjogImdlbmVy
YXRlZCIsCiAgICAgICAgICAgICAgICAgICAgImRpdiI6ICI8ZGl2IHhtbG5zPVwiaHR0cDovL3d3
dy53My5vcmcvMTk5OS94aHRtbFwiPjxwPjxiPkdlbmVyYXRlZCBOYXJyYXRpdmU6IFByYWN0aXRp
b25lcjwvYj48YSBuYW1lPVwiRWplbXBsb1ByYWN0aXRpb25lclwiPiA8L2E+PC9wPjxkaXYgc3R5
bGU9XCJkaXNwbGF5OiBpbmxpbmUtYmxvY2s7IGJhY2tncm91bmQtY29sb3I6ICNkOWUwZTc7IHBh
ZGRpbmc6IDZweDsgbWFyZ2luOiA0cHg7IGJvcmRlcjogMXB4IHNvbGlkICM4ZGExYjQ7IGJvcmRl
ci1yYWRpdXM6IDVweDsgbGluZS1oZWlnaHQ6IDYwJVwiPjxwIHN0eWxlPVwibWFyZ2luLWJvdHRv
bTogMHB4XCI+UmVzb3VyY2UgUHJhY3RpdGlvbmVyICZxdW90O0VqZW1wbG9QcmFjdGl0aW9uZXIm
cXVvdDsgPC9wPjxwIHN0eWxlPVwibWFyZ2luLWJvdHRvbTogMHB4XCI+UHJvZmlsZTogPGEgaHJl
Zj1cIlN0cnVjdHVyZURlZmluaXRpb24tUHJhY3RpdGlvbmVyTEUuaHRtbFwiPlByYWN0aXRpb25l
ciBMRTwvYT48L3A+PC9kaXY+PHA+PGI+aWRlbnRpZmllcjwvYj46IFJVTjogMjEzNFx1MDBhMCh1
c2U6XHUwMGEwT0ZGSUNJQUwpLCBWYWxvclJOUEk6IDIxMzRcdTAwYTAodXNlOlx1MDBhMFNFQ09O
REFSWSk8L3A+PGgzPlF1YWxpZmljYXRpb25zPC9oMz48dGFibGUgY2xhc3M9XCJncmlkXCI+PHRy
Pjx0ZD4tPC90ZD48dGQ+PGI+SWRlbnRpZmllcjwvYj48L3RkPjx0ZD48Yj5Db2RlPC9iPjwvdGQ+
PC90cj48dHI+PHRkPio8L3RkPjx0ZD5pZDpcdTAwYTBjZXJ0PC90ZD48dGQ+Q2VydGlmaWNhZG8o
cykgPHNwYW4gc3R5bGU9XCJiYWNrZ3JvdW5kOiBMaWdodEdvbGRlblJvZFllbGxvdzsgbWFyZ2lu
OiA0cHg7IGJvcmRlcjogMXB4IHNvbGlkIGtoYWtpXCI+IChjZXJ0TWVkaWNvcyAmcXVvdDtNZWRp
Y28gQ2lydWphbm8mcXVvdDspPC9zcGFuPjwvdGQ+PC90cj48L3RhYmxlPjwvZGl2PiIKICAgICAg
ICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAiaWRlbnRpZmllciI6IFsKICAgICAgICAgICAg
ICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICJ1c2UiOiAib2ZmaWNpYWwiLAogICAg
ICAgICAgICAgICAgICAgICAgICAidHlwZSI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICJjb2RpbmciOiBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAic3lzdGVtIjogImh0dHA6Ly90ZXJtaW5vbG9neS5j
ZW5zLmNsL0NvZGVTeXN0ZW0vbGlzdGFlc3BlcmEiLAogICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAiY29kZSI6ICJSVU4iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
fQogICAgICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgICAgICB9
LAogICAgICAgICAgICAgICAgICAgICAgICAidmFsdWUiOiAiMjEzNCIKICAgICAgICAgICAgICAg
ICAgICB9LAogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgInVz
ZSI6ICJzZWNvbmRhcnkiLAogICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6IHsKICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICJjb2RpbmciOiBbCiAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAic3lzdGVtIjog
Imh0dHA6Ly90ZXJtaW5vbG9neS5jZW5zLmNsL0NvZGVTeXN0ZW0vbGlzdGFlc3BlcmEiLAogICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiY29kZSI6ICJWYWxvclJOUEkiCiAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAg
XQogICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAidmFs
dWUiOiAiMjEzNCIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBdLAogICAg
ICAgICAgICAgICAgInF1YWxpZmljYXRpb24iOiBbCiAgICAgICAgICAgICAgICAgICAgewogICAg
ICAgICAgICAgICAgICAgICAgICAiaWRlbnRpZmllciI6IFsKICAgICAgICAgICAgICAgICAgICAg
ICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAidmFsdWUiOiAiY2VydCIK
ICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgXSwK
ICAgICAgICAgICAgICAgICAgICAgICAgImNvZGUiOiB7CiAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAiY29kaW5nIjogWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInN5c3RlbSI6ICJodHRwOi8vdGVybWlub2xv
Z3kuY2Vucy5jbC9Db2RlU3lzdGVtL2NlcnRNZWRpY29zIiwKICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgImRpc3BsYXkiOiAiTWVkaWNvIENpcnVqYW5vIgogICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0sCiAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAidGV4dCI6ICJDZXJ0aWZpY2FkbyhzKSIKICAgICAgICAg
ICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIF0K
ICAgICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgICAiZnVsbFVybCI6
ICJodHRwOi8vYWNtZS5jb20vZWhyL2ZoaXIvT3JnYW5pemF0aW9uL29yZzEiLAogICAgICAgICAg
ICAicmVzb3VyY2UiOiB7CiAgICAgICAgICAgICAgICAicmVzb3VyY2VUeXBlIjogIk9yZ2FuaXph
dGlvbiIsCiAgICAgICAgICAgICAgICAiaWQiOiAiRWplbXBsb09yZ2FuaXphdGlvbiIsCiAgICAg
ICAgICAgICAgICAibWV0YSI6IHsKICAgICAgICAgICAgICAgICAgICAicHJvZmlsZSI6IFsKICAg
ICAgICAgICAgICAgICAgICAgICAgImh0dHA6Ly9taW5zYWwuY2wvbGlzdGFlc3BlcmEvU3RydWN0
dXJlRGVmaW5pdGlvbi9Pcmdhbml6YXRpb25MRSIKICAgICAgICAgICAgICAgICAgICBdCiAgICAg
ICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgInRleHQiOiB7CiAgICAgICAgICAgICAgICAg
ICAgInN0YXR1cyI6ICJnZW5lcmF0ZWQiLAogICAgICAgICAgICAgICAgICAgICJkaXYiOiAiPGRp
diB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIj48cD48Yj5HZW5lcmF0ZWQg
TmFycmF0aXZlOiBPcmdhbml6YXRpb248L2I+PGEgbmFtZT1cIkVqZW1wbG9Pcmdhbml6YXRpb25c
Ij4gPC9hPjwvcD48ZGl2IHN0eWxlPVwiZGlzcGxheTogaW5saW5lLWJsb2NrOyBiYWNrZ3JvdW5k
LWNvbG9yOiAjZDllMGU3OyBwYWRkaW5nOiA2cHg7IG1hcmdpbjogNHB4OyBib3JkZXI6IDFweCBz
b2xpZCAjOGRhMWI0OyBib3JkZXItcmFkaXVzOiA1cHg7IGxpbmUtaGVpZ2h0OiA2MCVcIj48cCBz
dHlsZT1cIm1hcmdpbi1ib3R0b206IDBweFwiPlJlc291cmNlIE9yZ2FuaXphdGlvbiAmcXVvdDtF
amVtcGxvT3JnYW5pemF0aW9uJnF1b3Q7IDwvcD48cCBzdHlsZT1cIm1hcmdpbi1ib3R0b206IDBw
eFwiPlByb2ZpbGU6IDxhIGhyZWY9XCJTdHJ1Y3R1cmVEZWZpbml0aW9uLU9yZ2FuaXphdGlvbkxF
Lmh0bWxcIj5Pcmdhbml6YXRpb24gTEU8L2E+PC9wPjwvZGl2PjxwPjxiPmlkZW50aWZpZXI8L2I+
OiBQbGFjZXIgSWRlbnRpZmllcjogMTwvcD48L2Rpdj4iCiAgICAgICAgICAgICAgICB9LAogICAg
ICAgICAgICAgICAgImlkZW50aWZpZXIiOiBbCiAgICAgICAgICAgICAgICAgICAgewogICAgICAg
ICAgICAgICAgICAgICAgICAidHlwZSI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJj
b2RpbmciOiBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAic3lzdGVtIjogImh0dHA6Ly90ZXJtaW5vbG9neS5obDcu
b3JnL0NvZGVTeXN0ZW0vdjItMDIwMyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICJjb2RlIjogIlBMQUMiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAg
ICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgICAgICB9LAogICAg
ICAgICAgICAgICAgICAgICAgICAidmFsdWUiOiAiMSIKICAgICAgICAgICAgICAgICAgICB9CiAg
ICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICBdCn0=</inboundTemplate>
      <outboundTemplate encoding="base64"></outboundTemplate>
      <inboundDataType>JSON</inboundDataType>
      <outboundDataType>RAW</outboundDataType>
      <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.6.0">
        <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.6.0">
          <splitType>JavaScript</splitType>
          <batchScript></batchScript>
        </batchProperties>
      </inboundProperties>
      <outboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="3.6.0">
        <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="3.6.0">
          <splitType>JavaScript</splitType>
          <batchScript></batchScript>
        </batchProperties>
      </outboundProperties>
    </transformer>
    <filter version="3.6.0">
      <elements>
        <com.mirth.connect.plugins.javascriptrule.JavaScriptRule>
          <name>Validacion</name>
          <sequenceNumber>0</sequenceNumber>
          <script>// se obtiene objeto completo 
const entry =  msg[&apos;entry&apos;];
const jsonCompleto = msg;

const patientResult = {
	fullUrl:&apos;&apos;,
	resource:{}	
};

const practitionerRoleResult = {
	fullUrl:&apos;&apos;,
	resource:{}	
};

const practitionerResult = {
	fullUrl:&apos;&apos;,
	resource:{}	
};

for each (var mssgH in entry) 
{
	
	if(mssgH.resource.resourceType == &apos;Patient&apos;){
		patientResult.fullUrl = mssgH.fullUrl;
		patientResult.resource = mssgH.resource;
	}
	
	if(mssgH.resource.resourceType == &apos;PractitionerRole&apos;){
		practitionerRoleResult.fullUrl = mssgH.fullUrl;
		practitionerRoleResult.resource = mssgH.resource;
	}

	if(mssgH.resource.resourceType == &apos;Practitioner&apos;){
		practitionerResult.fullUrl = mssgH.fullUrl;
		practitionerResult.resource = mssgH.resource;
	}
};


/*
validacion de Patient
*/
var patient = patientResult;
var patientIdentifier = patient.resource.identifier;
var patientStatus=&quot;&quot;;
var rutPatientCont = 0;
const urlProfilePtnt = &quot;PatientLE&quot;;


if(patientIdentifier.length &gt; 0 &amp;&amp; patientIdentifier != null){
	
	for(var i = 0; i &lt; patientIdentifier.length; i++){

	if(patientIdentifier[i].type.coding[0].code == &quot;1&quot;){
		
		// Obtener el número del run sin dígito verificador
		var runSinDV = patientIdentifier[i].value;

		// Invertir el orden de los dígitos
		var runInvertido = runSinDV.split(&quot;&quot;).reverse().join(&quot;&quot;);

		// Variables para el cálculo del dígito verificador
		var suma = 0;
		var factor = 2;
	
		// Realizar la suma ponderada
		for (var j = 0; j &lt; runInvertido.length; j++) {
	  	suma += parseInt(runInvertido.charAt(j)) * factor;
	  	factor = factor == 7 ? 2 : factor + 1;
		}
	
	
		// Calcular el dígito verificador
		var resto = suma % 11;
		var dv = resto == 1 ? &apos;K&apos; : resto == 0 ? &apos;0&apos; : 11 - resto;				
	
		if(dv != patientIdentifier[i].extension[0].valueString){
			rutPatientCont++;
		}
	
	}else{
			rutPatientCont++;		
		}
	}//fin for

	if(rutPatientCont == 0){
		patientStatus = &quot;Validado&quot;;
	}else{
		patientStatus = &quot;NoValido&quot;;
}
		
}else{
		patientStatus = &quot;NoValido&quot;;
}




if(patientStatus.toString() == &quot;NoValido&quot;){
	var msgError = &quot;Patient Run invalido &quot;;
	var ErroResult =   JSON.stringify({  resourceType:&quot;OperationOutcome&quot;, issue:[{ severity:&quot;error&quot;,code:&quot;processing&quot;,diagnostics:msgError}] }); 
	channelMap.put(&apos;resultValidations&apos;, ErroResult);
	return false;
}
if(patientStatus.toString() == &quot;Validado&quot;){
	var msgError = &quot;validado&quot;;
	var ErroResult =   JSON.stringify({  resourceType:&quot;OperationOutcome&quot;, issue:[{ severity:&quot;validado&quot;,code:&quot;processing&quot;,diagnostics:msgError}] }); 
	channelMap.put(&apos;resultValidations&apos;, ErroResult);	
	channelMap.put(&apos;ResulPatientValidation&apos;,JSON.stringify(patientResult.resource));
	channelMap.put(&apos;FullJson&apos;,JSON.stringify(jsonCompleto));
	return true;
}</script>
        </com.mirth.connect.plugins.javascriptrule.JavaScriptRule>
      </elements>
    </filter>
    <transportName>HTTP Listener</transportName>
    <mode>SOURCE</mode>
    <enabled>true</enabled>
    <waitForPrevious>true</waitForPrevious>
  </sourceConnector>
  <destinationConnectors>
    <connector version="3.6.0">
      <metaDataId>2</metaDataId>
      <name>Patient Match</name>
      <properties class="com.mirth.connect.connectors.http.HttpDispatcherProperties" version="3.6.0">
        <pluginProperties>
          <com.mirth.connect.plugins.ssl.model.SSLConnectorPluginProperties version="3.6.0">
  <enabled>false</enabled>
            <clientAuthentication>DISABLED</clientAuthentication>
            <hostnameVerificationEnabled>true</hostnameVerificationEnabled>
            <trustAllCertificates>false</trustAllCertificates>
            <trustedCertificates>
    <trustedCertificateAliases/>
              <trustCACerts>true</trustCACerts>
            </trustedCertificates>
            <localCertificateAlias/>
            <ocspEnabled>false</ocspEnabled>
            <ocspURI/>
            <ocspHardFail>false</ocspHardFail>
            <crlEnabled>false</crlEnabled>
            <crlURI/>
            <crlHardFail>false</crlHardFail>
            <subjectDNValidationEnabled>false</subjectDNValidationEnabled>
            <trustedSubjectDNs class="linked-hash-map"/>
            <hideIssuerDNs>false</hideIssuerDNs>
            <allowExpiredCertificates>false</allowExpiredCertificates>
            <implicitFTPS>true</implicitFTPS>
            <useSTARTTLS>false</useSTARTTLS>
          </com.mirth.connect.plugins.ssl.model.SSLConnectorPluginProperties>
        </pluginProperties>
        <destinationConnectorProperties version="3.6.0">
          <queueEnabled>false</queueEnabled>
          <sendFirst>false</sendFirst>
          <retryIntervalMillis>10000</retryIntervalMillis>
          <regenerateTemplate>false</regenerateTemplate>
          <retryCount>0</retryCount>
          <rotate>false</rotate>
          <includeFilterTransformer>false</includeFilterTransformer>
          <threadCount>1</threadCount>
          <threadAssignmentVariable></threadAssignmentVariable>
          <validateResponse>false</validateResponse>
          <resourceIds class="linked-hash-map">
            <entry>
              <string>Default Resource</string>
              <string>[Default Resource]</string>
            </entry>
          </resourceIds>
          <queueBufferSize>1000</queueBufferSize>
          <reattachAttachments>true</reattachAttachments>
        </destinationConnectorProperties>
        <host>${hnpob_fhir_url}/Patient/$match</host>
        <useProxyServer>false</useProxyServer>
        <proxyAddress></proxyAddress>
        <proxyPort></proxyPort>
        <method>post</method>
        <headers class="linked-hash-map">
          <entry>
            <string>Authorization</string>
            <list>
              <string>Bearer ${token}</string>
            </list>
          </entry>
          <entry>
            <string>Content-Type</string>
            <list>
              <string>application/json+fhir</string>
            </list>
          </entry>
        </headers>
        <parameters class="linked-hash-map"/>
        <responseXmlBody>false</responseXmlBody>
        <responseParseMultipart>true</responseParseMultipart>
        <responseIncludeMetadata>false</responseIncludeMetadata>
        <responseBinaryMimeTypes>application/.*(?&lt;!json|xml)$|image/.*|video/.*|audio/.*</responseBinaryMimeTypes>
        <responseBinaryMimeTypesRegex>true</responseBinaryMimeTypesRegex>
        <multipart>false</multipart>
        <useAuthentication>false</useAuthentication>
        <authenticationType>Basic</authenticationType>
        <usePreemptiveAuthentication>false</usePreemptiveAuthentication>
        <username></username>
        <password></password>
        <content>${ResulPatientValidation}</content>
        <contentType>application/json+fhir</contentType>
        <dataTypeBinary>false</dataTypeBinary>
        <charset>UTF-8</charset>
        <socketTimeout>30000</socketTimeout>
      </properties>
      <transformer version="3.6.0">
        <elements>
          <com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
            <name>token</name>
            <sequenceNumber>0</sequenceNumber>
            <script>$c(&apos;token&apos;, getClientCredentialsToken());</script>
          </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
        </elements>
        <inboundTemplate encoding="base64"></inboundTemplate>
        <outboundTemplate encoding="base64"></outboundTemplate>
        <inboundDataType>RAW</inboundDataType>
        <outboundDataType>JSON</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="3.6.0">
          <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="3.6.0">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.6.0">
          <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.6.0">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </transformer>
      <responseTransformer version="3.6.0">
        <elements>
          <com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
            <name>response</name>
            <sequenceNumber>0</sequenceNumber>
            <script>var Base64 = Packages.org.apache.commons.codec.binary.Base64;

// Obtener el contenido de la respuesta
var response_content = response.getMessage();

// Decodificar la cadena base64
var decoded_bytes = Base64.decodeBase64(response_content.getBytes(&quot;UTF-8&quot;));

// Convertir los bytes decodificados en texto
var text_content = new java.lang.String(decoded_bytes, &quot;UTF-8&quot;);

// Imprimir el contenido de texto en el registro de mensajes
logger.info(text_content);

var json_content = JSON.parse(text_content);

channelMap.put(&apos;ResultPatient&apos;, json_content);</script>
          </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
        </elements>
        <inboundTemplate encoding="base64"></inboundTemplate>
        <outboundTemplate encoding="base64"></outboundTemplate>
        <inboundDataType>RAW</inboundDataType>
        <outboundDataType>RAW</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="3.6.0">
          <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="3.6.0">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="3.6.0">
          <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="3.6.0">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </responseTransformer>
      <filter version="3.6.0">
        <elements/>
      </filter>
      <transportName>HTTP Sender</transportName>
      <mode>DESTINATION</mode>
      <enabled>true</enabled>
      <waitForPrevious>true</waitForPrevious>
    </connector>
    <connector version="3.6.0">
      <metaDataId>3</metaDataId>
      <name>Create Patient</name>
      <properties class="com.mirth.connect.connectors.http.HttpDispatcherProperties" version="3.6.0">
        <pluginProperties>
          <com.mirth.connect.plugins.ssl.model.SSLConnectorPluginProperties version="3.6.0">
  <enabled>false</enabled>
            <clientAuthentication>DISABLED</clientAuthentication>
            <hostnameVerificationEnabled>true</hostnameVerificationEnabled>
            <trustAllCertificates>false</trustAllCertificates>
            <trustedCertificates>
    <trustedCertificateAliases/>
              <trustCACerts>true</trustCACerts>
            </trustedCertificates>
            <localCertificateAlias/>
            <ocspEnabled>false</ocspEnabled>
            <ocspURI/>
            <ocspHardFail>false</ocspHardFail>
            <crlEnabled>false</crlEnabled>
            <crlURI/>
            <crlHardFail>false</crlHardFail>
            <subjectDNValidationEnabled>false</subjectDNValidationEnabled>
            <trustedSubjectDNs class="linked-hash-map"/>
            <hideIssuerDNs>false</hideIssuerDNs>
            <allowExpiredCertificates>false</allowExpiredCertificates>
            <implicitFTPS>true</implicitFTPS>
            <useSTARTTLS>false</useSTARTTLS>
          </com.mirth.connect.plugins.ssl.model.SSLConnectorPluginProperties>
        </pluginProperties>
        <destinationConnectorProperties version="3.6.0">
          <queueEnabled>false</queueEnabled>
          <sendFirst>false</sendFirst>
          <retryIntervalMillis>10000</retryIntervalMillis>
          <regenerateTemplate>false</regenerateTemplate>
          <retryCount>0</retryCount>
          <rotate>false</rotate>
          <includeFilterTransformer>false</includeFilterTransformer>
          <threadCount>1</threadCount>
          <threadAssignmentVariable></threadAssignmentVariable>
          <validateResponse>false</validateResponse>
          <resourceIds class="linked-hash-map">
            <entry>
              <string>Default Resource</string>
              <string>[Default Resource]</string>
            </entry>
          </resourceIds>
          <queueBufferSize>1000</queueBufferSize>
          <reattachAttachments>true</reattachAttachments>
        </destinationConnectorProperties>
        <host>${hnpob_fhir_url}/Patient</host>
        <useProxyServer>false</useProxyServer>
        <proxyAddress></proxyAddress>
        <proxyPort></proxyPort>
        <method>post</method>
        <headers class="linked-hash-map">
          <entry>
            <string>Authorization</string>
            <list>
              <string>Bearer ${token}</string>
            </list>
          </entry>
          <entry>
            <string>Content-Type</string>
            <list>
              <string>application/json+fhir</string>
            </list>
          </entry>
        </headers>
        <parameters class="linked-hash-map"/>
        <responseXmlBody>false</responseXmlBody>
        <responseParseMultipart>true</responseParseMultipart>
        <responseIncludeMetadata>false</responseIncludeMetadata>
        <responseBinaryMimeTypes>application/.*(?&lt;!json|xml)$|image/.*|video/.*|audio/.*</responseBinaryMimeTypes>
        <responseBinaryMimeTypesRegex>true</responseBinaryMimeTypesRegex>
        <multipart>false</multipart>
        <useAuthentication>false</useAuthentication>
        <authenticationType>Basic</authenticationType>
        <usePreemptiveAuthentication>false</usePreemptiveAuthentication>
        <username></username>
        <password></password>
        <content>${ResulPatientValidation}</content>
        <contentType>application/json+fhir</contentType>
        <dataTypeBinary>false</dataTypeBinary>
        <charset>UTF-8</charset>
        <socketTimeout>30000</socketTimeout>
      </properties>
      <transformer version="3.6.0">
        <elements/>
        <inboundTemplate encoding="base64"></inboundTemplate>
        <inboundDataType>RAW</inboundDataType>
        <outboundDataType>RAW</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="3.6.0">
          <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="3.6.0">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="3.6.0">
          <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="3.6.0">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </transformer>
      <responseTransformer version="3.6.0">
        <elements>
          <com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
            <name>Insert</name>
            <sequenceNumber>0</sequenceNumber>
            <script>var Base64 = Packages.org.apache.commons.codec.binary.Base64;

// Obtener el contenido de la respuesta
var insertPatient = response.getMessage();

// Decodificar la cadena base64
var insertPatientBytes = Base64.decodeBase64(insertPatient.getBytes(&quot;UTF-8&quot;));

// Convertir los bytes decodificados en texto
var text_content = new java.lang.String(insertPatientBytes, &quot;UTF-8&quot;);

// Imprimir el contenido de texto en el registro de mensajes
logger.info(text_content);

var json_content = JSON.parse(text_content);

channelMap.put(&apos;pacienteCreado&apos;, json_content);</script>
          </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
        </elements>
        <inboundTemplate encoding="base64"></inboundTemplate>
        <outboundTemplate encoding="base64"></outboundTemplate>
        <inboundDataType>RAW</inboundDataType>
        <outboundDataType>JSON</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="3.6.0">
          <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="3.6.0">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.6.0">
          <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.6.0">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </responseTransformer>
      <filter version="3.6.0">
        <elements>
          <com.mirth.connect.plugins.rulebuilder.RuleBuilderRule>
            <name>Accept message if &quot;$(&apos;ResultPatient&apos;).total&quot; equals &apos;0&apos;</name>
            <sequenceNumber>0</sequenceNumber>
            <field>$(&apos;ResultPatient&apos;).total</field>
            <condition>EQUALS</condition>
            <values>
              <string>&apos;0&apos;</string>
            </values>
          </com.mirth.connect.plugins.rulebuilder.RuleBuilderRule>
        </elements>
      </filter>
      <transportName>HTTP Sender</transportName>
      <mode>DESTINATION</mode>
      <enabled>true</enabled>
      <waitForPrevious>true</waitForPrevious>
    </connector>
    <connector version="3.6.0">
      <metaDataId>1</metaDataId>
      <name>Bundle Inicio</name>
      <properties class="com.mirth.connect.connectors.http.HttpDispatcherProperties" version="3.6.0">
        <pluginProperties>
          <com.mirth.connect.plugins.ssl.model.SSLConnectorPluginProperties version="3.6.0">
  <enabled>false</enabled>
            <clientAuthentication>DISABLED</clientAuthentication>
            <hostnameVerificationEnabled>true</hostnameVerificationEnabled>
            <trustAllCertificates>false</trustAllCertificates>
            <trustedCertificates>
    <trustedCertificateAliases/>
              <trustCACerts>true</trustCACerts>
            </trustedCertificates>
            <localCertificateAlias/>
            <ocspEnabled>false</ocspEnabled>
            <ocspURI/>
            <ocspHardFail>false</ocspHardFail>
            <crlEnabled>false</crlEnabled>
            <crlURI/>
            <crlHardFail>false</crlHardFail>
            <subjectDNValidationEnabled>false</subjectDNValidationEnabled>
            <trustedSubjectDNs class="linked-hash-map"/>
            <hideIssuerDNs>false</hideIssuerDNs>
            <allowExpiredCertificates>false</allowExpiredCertificates>
            <implicitFTPS>true</implicitFTPS>
            <useSTARTTLS>false</useSTARTTLS>
          </com.mirth.connect.plugins.ssl.model.SSLConnectorPluginProperties>
        </pluginProperties>
        <destinationConnectorProperties version="3.6.0">
          <queueEnabled>false</queueEnabled>
          <sendFirst>false</sendFirst>
          <retryIntervalMillis>10000</retryIntervalMillis>
          <regenerateTemplate>false</regenerateTemplate>
          <retryCount>0</retryCount>
          <rotate>false</rotate>
          <includeFilterTransformer>false</includeFilterTransformer>
          <threadCount>1</threadCount>
          <threadAssignmentVariable></threadAssignmentVariable>
          <validateResponse>false</validateResponse>
          <resourceIds class="linked-hash-map">
            <entry>
              <string>Default Resource</string>
              <string>[Default Resource]</string>
            </entry>
          </resourceIds>
          <queueBufferSize>1000</queueBufferSize>
          <reattachAttachments>true</reattachAttachments>
        </destinationConnectorProperties>
        <host>http://homologacion.hcc.cl/ehrserver/fhir/$process-message?async=false</host>
        <useProxyServer>false</useProxyServer>
        <proxyAddress></proxyAddress>
        <proxyPort></proxyPort>
        <method>post</method>
        <headers class="linked-hash-map">
          <entry>
            <string>Authorization</string>
            <list>
              <string>Bearer ${token}</string>
            </list>
          </entry>
          <entry>
            <string>Content-Type</string>
            <list>
              <string>application/json+fhir</string>
            </list>
          </entry>
        </headers>
        <parameters class="linked-hash-map"/>
        <responseXmlBody>false</responseXmlBody>
        <responseParseMultipart>true</responseParseMultipart>
        <responseIncludeMetadata>false</responseIncludeMetadata>
        <responseBinaryMimeTypes>application/.*(?&lt;!json|xml)$|image/.*|video/.*|audio/.*</responseBinaryMimeTypes>
        <responseBinaryMimeTypesRegex>true</responseBinaryMimeTypesRegex>
        <multipart>false</multipart>
        <useAuthentication>false</useAuthentication>
        <authenticationType>Basic</authenticationType>
        <usePreemptiveAuthentication>false</usePreemptiveAuthentication>
        <username></username>
        <password></password>
        <content>${BundleInicio}</content>
        <contentType>application/json+fhir</contentType>
        <dataTypeBinary>false</dataTypeBinary>
        <charset>UTF-8</charset>
        <socketTimeout>30000</socketTimeout>
      </properties>
      <transformer version="3.6.0">
        <elements>
          <com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
            <name>ordenamiento</name>
            <sequenceNumber>0</sequenceNumber>
            <script>const fullJson = JSON.parse($(&apos;FullJson&apos;));

var resourceType =  fullJson.resourceType;
var id =  fullJson.id;
var meta =  fullJson.meta;
var type = fullJson.type;
var timestamp = fullJson.timestamp;

// se obtiene objeto completo 
const entry =  fullJson.entry;


//declaracion de constantes para asignar
const messageHeaderResult = {
	fullUrl:&apos;&apos;,
	resource:{}	
};

const serviceRequestResult = {
	fullUrl:&apos;&apos;,
	resource:{}	
};

const encounterResult = {
	fullUrl:&apos;&apos;,
	resource:{}	
};

const appointmentResult = {
	fullUrl:&apos;&apos;,
	resource:{}	
};

const patientResult = {
	fullUrl:&apos;&apos;,
	resource:{}	
};

const questionnaireResponseResult = {
	fullUrl:&apos;&apos;,
	resource:{}	
};

// son n condicion o pueden ser solo 3? validar
const conditionResult = []

const observationResult = {
	fullUrl:&apos;&apos;,
	resource:{}	
};
const allergyIntoleranceResult = {
	fullUrl:&apos;&apos;,
	resource:{}	
};


const practitionerRoleResult = {
	fullUrl:&apos;&apos;,
	resource:{}	
};

const practitionerResult = {
	fullUrl:&apos;&apos;,
	resource:{}	
};

const organizationResult  = {
	fullUrl:&apos;&apos;,
	resource:{}	
};

// asignacion de json a objetos correspondientes 
for each (var mssgH in entry) 
{
	if(mssgH.resource.resourceType == &apos;MessageHeader&apos;){
		messageHeaderResult.fullUrl = mssgH.fullUrl;
		messageHeaderResult.resource = mssgH.resource;
	}
	
	if(mssgH.resource.resourceType == &apos;ServiceRequest&apos;){
		serviceRequestResult.fullUrl = mssgH.fullUrl;
		serviceRequestResult.resource = mssgH.resource;
	}

	if(mssgH.resource.resourceType == &apos;Encounter&apos;){
		encounterResult.fullUrl = mssgH.fullUrl;
		encounterResult.resource = mssgH.resource;
	}

	if(mssgH.resource.resourceType == &apos;Appointment&apos;){
		appointmentResult.fullUrl = mssgH.fullUrl;
		appointmentResult.resource = mssgH.resource;	
	}

	if(mssgH.resource.resourceType == &apos;Patient&apos;){
		patientResult.fullUrl = mssgH.fullUrl;
		patientResult.resource = mssgH.resource;
	}

	if(mssgH.resource.resourceType == &apos;QuestionnaireResponse&apos;){
		questionnaireResponseResult.fullUrl = mssgH.fullUrl;
		questionnaireResponseResult.resource = mssgH.resource;
	}

	if(mssgH.resource.resourceType == &apos;Condition&apos;){
	
		 var	condition ={
				fullUrl:&apos;&apos;,
				resource:{}	
		};

		condition.fullUrl = mssgH.fullUrl;
		condition.resource = mssgH.resource;
		
		conditionResult.push(condition);	
	}
	
	if(mssgH.resource.resourceType == &apos;Observation&apos;){
		observationResult.fullUrl = mssgH.fullUrl;
		observationResult.resource = mssgH.resource;
	}
		/*    AllergyIntolerance  */
	if(mssgH.resource.resourceType == &apos;AllergyIntolerance&apos;){
		allergyIntoleranceResult.fullUrl = mssgH.fullUrl;
		allergyIntoleranceResult.resource = mssgH.resource;
	}
	
	if(mssgH.resource.resourceType == &apos;PractitionerRole&apos;){
		practitionerRoleResult.fullUrl = mssgH.fullUrl;
		practitionerRoleResult.resource = mssgH.resource;
	}

	if(mssgH.resource.resourceType == &apos;Practitioner&apos;){
		practitionerResult.fullUrl = mssgH.fullUrl;
		practitionerResult.resource = mssgH.resource;
	}

	if(mssgH.resource.resourceType == &apos;Organization&apos;){
		organizationResult.fullUrl = mssgH.fullUrl;
		organizationResult.resource = mssgH.resource;
	}

};


channelMap.put(&apos;EntryCompleto&apos;, fullJson);
channelMap.put(&apos;EntryResourceType&apos;,resourceType);
channelMap.put(&apos;EntryId&apos;, id);
channelMap.put(&apos;EntryMeta&apos;, meta);
channelMap.put(&apos;EntryType&apos;, type);
channelMap.put(&apos;EntryTimestamp&apos;, timestamp);
channelMap.put(&apos;EntryAppointment&apos;,appointmentResult);
channelMap.put(&apos;EntryMessageHeader&apos;,messageHeaderResult);
channelMap.put(&apos;EntryServiceRequest&apos;,serviceRequestResult);
channelMap.put(&apos;EntryEncounter&apos;,encounterResult);
channelMap.put(&apos;EntryPatient&apos;,patientResult);
channelMap.put(&apos;EntryQuestionnaireResponse&apos;,questionnaireResponseResult);
channelMap.put(&apos;EntryCondition&apos;,conditionResult);
channelMap.put(&apos;EntryObservation&apos;, observationResult);
channelMap.put(&apos;EntryAllergyIntolerance&apos;, allergyIntoleranceResult);
channelMap.put(&apos;EntryPractitionerRole&apos;, practitionerRoleResult);
channelMap.put(&apos;EntryPractitioner&apos;, practitionerResult);
channelMap.put(&apos;EntryOrganization&apos;, organizationResult);</script>
          </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
          <com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
            <name>ModificacionJson</name>
            <sequenceNumber>1</sequenceNumber>
            <script>//declaracion de variables
var messageHeader =  $(&apos;EntryMessageHeader&apos;);
var serviceRequest  = $(&apos;EntryServiceRequest&apos;);
var encounter  = $(&apos;EntryEncounter&apos;);
var appointment = $(&apos;EntryAppointment&apos;);
var patient  = $(&apos;EntryPatient&apos;);
var questionnaireResponse = $(&apos;EntryQuestionnaireResponse&apos;);
var allergyIntolerance  = $(&apos;EntryAllergyIntolerance&apos;);
var observation = $(&apos;EntryObservation&apos;);
var practitionerRole = $(&apos;EntryPractitionerRole&apos;);
var practitioner = $(&apos;EntryPractitioner&apos;);
var organization = $(&apos;EntryOrganization&apos;);
var conditions = $(&apos;EntryCondition&apos;);
var practitioner = $(&apos;EntryPractitioner&apos;);
var urleReplace  = &quot;http://homologacion.hcc.cl/ispob/fhir/Patient/&quot;;
var urlReplaceId = &quot;http://homologacion.hcc.cl/ehrserver/fhir/&quot;;
var json_content;

//obtencion de destinations
var pacienteExiste = $(&apos;ResultPatient&apos;);
var pacienteCreado = $(&apos;pacienteCreado&apos;);
var bundleId =  java.util.UUID.randomUUID().toString();
var messageHeaderId = java.util.UUID.randomUUID().toString();
var serviceRequestId  = java.util.UUID.randomUUID().toString();
var encounterId  = java.util.UUID.randomUUID().toString();
var appointmentId = java.util.UUID.randomUUID().toString();
var questionnaireResponseId = java.util.UUID.randomUUID().toString();
var allergyIntoleranceId  = java.util.UUID.randomUUID().toString();
var observationId = java.util.UUID.randomUUID().toString();
var practitionerRoleId = java.util.UUID.randomUUID().toString();
var practitionerId = java.util.UUID.randomUUID().toString();
var organizationId = java.util.UUID.randomUUID().toString();
var conditionsId = java.util.UUID.randomUUID().toString();
var conditionsMorbId = java.util.UUID.randomUUID().toString();
var conditionsGesId = java.util.UUID.randomUUID().toString();



//si existe el paciente
if(pacienteExiste.total == 1){		
	//obtencion del id del paciente
	var idPatient;
	for each(var patArray in pacienteExiste.entry){
		idPatient = patArray.resource.id;
	}

	//FIXME:
	//validacion de MessageHeader
	delete messageHeader.fullUrl;
	messageHeader.resource.id = messageHeaderId;
	messageHeader.resource.author.reference = urlReplaceId+&quot;PractitionerRole/&quot;+practitionerRoleId;
	messageHeader.resource.focus[0].reference = urlReplaceId+&quot;ServiceRequest/&quot;+serviceRequestId;

	//TODO: 
	//EntryServiceRequest
	 delete serviceRequest.fullUrl;
	 serviceRequest.resource.id = serviceRequestId;
	 serviceRequest.resource.subject.reference = urleReplace+idPatient;
	 
	 serviceRequest.resource.encounter.reference = urlReplaceId+&quot;Encounter/&quot;+encounterId;
	 serviceRequest.resource.reasonReference[0].reference = urlReplaceId+&quot;Observation/&quot;+observationId;

	 serviceRequest.resource.supportingInfo[0].reference = urlReplaceId+&quot;Appointment/&quot;+appointmentId
	 serviceRequest.resource.supportingInfo[1].reference = urlReplaceId+&quot;QuestionnaireResponse/&quot;+questionnaireResponseId
	 serviceRequest.resource.supportingInfo[2].reference = urlReplaceId+&quot;Condition/&quot;+conditionsId

	 serviceRequest.request = {
				 method: &quot;POST&quot;, 
				 url : serviceRequest.resource.resourceType,
				 //solicitar validacion de que solo viene un valor en el arreglo 
				 ifNoneExist : &quot;identifier=&quot;+ serviceRequest.resource.identifier[0].value };
				
					 	
	//FIXME:
	//EntryEncounter
	delete encounter.fullUrl;
	encounter.resource.id = encounterId;
	encounter.resource.subject.reference = urleReplace+idPatient;
	encounter.resource.appointment[0].reference = urlReplaceId+&quot;Appointment/&quot;+appointmentId;
	encounter.request = {
				method: &quot;POST&quot;, 
				url : encounter.resource.resourceType,
				//solicitar validacion de que solo viene un valor en el arreglo 
				ifNoneExist : &quot;identifier=&quot;+ encounter.resource.identifier[0].value };
 
	//FIXME:
	//EntryAppointment
	delete appointment.fullUrl;
	appointment.resource.id = appointmentId;
	appointment.resource.basedOn[0].reference = urlReplaceId+&quot;ServiceRequest/&quot;+serviceRequestId;
	appointment.resource.participant[0].actor.reference = urlReplaceId+&quot;Practitioner/&quot;+practitionerId;
	appointment.request = {
				method: &quot;POST&quot;, 
				url : appointment.resource.resourceType,
				//solicitar validacion de que solo viene un valor en el arreglo 
				// ifNoneExist : &quot;identifier=&quot;+ appointment.resource.identifier[0].value };
				ifNoneExist : &quot;identifier=&quot;+ appointment.resource.id};
				
	//EntryPatient	
	patient.fullUrl = urleReplace+idPatient;
	patient.resource.id = idPatient;
	patient.request = {
		method:&quot;PUT&quot;,	
		url: &quot;Patient/&quot;+idPatient,
		ifNoneExist:&quot;identifier=http://homologacion.hcc.cl/ehrserver/fhir/Patient/&quot;+idPatient
		}
	
	
	//EntryQuestionnaireResponse		
	delete questionnaireResponse.fullUrl;
	questionnaireResponse.resource.id = questionnaireResponseId;
	questionnaireResponse.request = {
		method:&quot;POST&quot;,	
		url: questionnaireResponse.resource.resourceType,
		//ifNoneExist:&quot;id=&quot;+resource.id		
	}

	//EntryObservation
	delete observation.fullUrl;
	observation.resource.id = observationId;
	observation.request = {
		method:&quot;POST&quot;,	
		url: observation.resource.resourceType,
		ifNoneExist:&quot;_id=&quot;+observation.resource.id		
	}

	//FIXME:
	//EntryPractitionerRole	
	delete practitionerRole.fullUrl;
	practitionerRole.resource.id = practitionerRoleId;
	practitionerRole.resource.practitioner.reference = urlReplaceId+&quot;Practitioner/&quot;+practitionerId;
	practitionerRole.resource.organization.reference = urlReplaceId+&quot;Organization/&quot;+organizationId;
	practitionerRole.request = {
		method:&quot;POST&quot;,	
		url: practitionerRole.resource.resourceType,
		ifNoneExist:&quot;_id=&quot;+practitionerRole.resource.id		
	}


	
	//EntryPractitioner	
	delete practitioner.fullUrl;
	practitioner.resource.id = practitionerId;
	var colectionPractitioner = practitioner.resource.identifier;
	practitioner.request = {
					method:&quot;POST&quot;,	
					url: practitioner.resource.resourceType,
					ifNoneExist:&quot;identifier=&quot;+colectionPractitioner[0].value
					}
		


	//EntryOrganization	
	delete organization.fullUrl;
	organization.resource.id = organizationId;
	organization.request = {
		method:&quot;POST&quot;,	
		url: organization.resource.resourceType,
		ifNoneExist:&quot;_id=&quot;+organization.resource.id		
	}

	//TODO:
	//conditions
	for each(var ArrayCondition in conditions){
		
		var cadena = ArrayCondition.resource.meta.profile;
		var conditionInicioDiagnosticoSospechaLE = &quot;ConditionInicioDiagnosticoSospechaLE&quot;;
		var conditionInicioIndiceComorbilidadLE = &quot;ConditionInicioIndiceComorbilidadLE&quot;;
		var conditionInicioSospechaGesLE = &quot;ConditionInicioSospechaGesLE&quot;;

		for each(var array in cadena){		
		var index1 = array.search(conditionInicioDiagnosticoSospechaLE);
			if(index1 &gt;= 0){				
				delete ArrayCondition.fullUrl;		
				ArrayCondition.resource.id = conditionsId;		
				ArrayCondition.resource.subject.reference = urleReplace+idPatient;
				ArrayCondition.request = {
					method:&quot;POST&quot;,	
					url: ArrayCondition.resource.resourceType,
					ifNoneExist:&quot;_id=&quot;+ArrayCondition.resource.id		
					}
		}	
		var index2 = array.search(conditionInicioIndiceComorbilidadLE);
		if(index2 &gt;= 0){				
				serviceRequest.resource.supportingInfo[3].reference = urlReplaceId+&quot;Condition/&quot;+conditionsMorbId;
				
				delete ArrayCondition.fullUrl;	
				ArrayCondition.resource.id = conditionsMorbId;
				ArrayCondition.resource.subject.reference = urleReplace+idPatient;
				ArrayCondition.request = {
					method:&quot;POST&quot;,	
					url: ArrayCondition.resource.resourceType,
					ifNoneExist:&quot;_id=&quot;+ArrayCondition.resource.id		
					}
		}		
		var index3 = array.search(conditionInicioSospechaGesLE);
		if(index3 &gt;= 0){	
				serviceRequest.resource.supportingInfo[4].reference = urlReplaceId+&quot;Condition/&quot;+conditionsGesId;

				delete ArrayCondition.fullUrl;	
				ArrayCondition.resource.id = conditionsGesId;
				ArrayCondition.resource.subject.reference = urleReplace+idPatient;
				ArrayCondition.request = {
					method:&quot;POST&quot;,	
					url: ArrayCondition.resource.resourceType,
					ifNoneExist:&quot;_id=&quot;+ArrayCondition.resource.id		
					}
			}		
		}		
	}


	//TODO:
	//EntryAllergyIntolerance	
	if(allergyIntolerance.fullUrl != null &amp;&amp; allergyIntolerance.fullUrl != &quot;&quot;){		
		serviceRequest.resource.supportingInfo[5].reference = urlReplaceId+&quot;AllergyIntolerance/&quot;+allergyIntoleranceId;

		delete allergyIntolerance.fullUrl;	
		allergyIntolerance.resource.id = allergyIntoleranceId;
		allergyIntolerance.resource.patient.reference = urleReplace+idPatient;
		allergyIntolerance.request = {
		method:&quot;POST&quot;,	
		url: allergyIntolerance.resource.resourceType,
		ifNoneExist:&quot;_id=&quot;+allergyIntolerance.resource.id		
		}
	}	

		
}

//si NO existe el paciente y fue creado
if(pacienteExiste.total == 0){	
	
	//validacion de MessageHeader
	delete messageHeader.fullUrl;
	messageHeader.resource.id = messageHeaderId;
	messageHeader.resource.author.reference = urlReplaceId+&quot;PractitionerRole/&quot;+practitionerRoleId;
	messageHeader.resource.focus[0].reference = urlReplaceId+&quot;ServiceRequest/&quot;+serviceRequestId;

	
	//TODO:  
	//EntryServiceRequest
	delete serviceRequest.fullUrl;
	serviceRequest.resource.id = serviceRequestId;
	serviceRequest.resource.subject.reference = urleReplace+pacienteCreado.id;	


	serviceRequest.request = {
				method: &quot;POST&quot;, 
				url : serviceRequest.resource.resourceType,
				//solicitar validacion de que solo viene un valor en el arreglo 
				ifNoneExist : &quot;identifier=&quot;+ serviceRequest.resource.identifier[0].value };

	//EntryEncounter
	delete encounter.fullUrl;
	encounter.resource.id = encounterId;
	encounter.resource.subject.reference = urleReplace+pacienteCreado.id;
	encounter.resource.appointment[0].reference = urlReplaceId+&quot;Appointment/&quot;+encounterId;	
	encounter.request = {
				method: &quot;POST&quot;, 
				url : encounter.resource.resourceType,
				//solicitar validacion de que solo viene un valor en el arreglo 
				ifNoneExist : &quot;identifier=&quot;+ encounter.resource.identifier[0].value };
	
	//FIXME:
	//EntryAppointment
	delete appointment.fullUrl;
	appointment.resource.id = appointmentId;
	appointment.resource.basedOn[0].reference = urlReplaceId+&quot;ServiceRequest/&quot;+serviceRequestId;
	appointment.resource.participant[0].actor.reference = urlReplaceId+&quot;Practitioner/&quot;+practitionerId;
	appointment.request = {
				method: &quot;POST&quot;, 
				url : appointment.resource.resourceType,
				//solicitar validacion de que solo viene un valor en el arreglo 
				ifNoneExist : &quot;identifier=&quot;+ appointment.resource.identifier[0].value };					
	

	//EntryPatient
		patient.fullUrl = urleReplace+pacienteCreado.id;	
		patient.resource.id = pacienteCreado.id;
		patient.request = {
		method:&quot;PUT&quot;,
		url: &quot;Patient/&quot;+idPatient,
		ifNoneExist:&quot;identifier=http://homologacion.hcc.cl/ehrserver/fhir/Patient/&quot;+pacienteCreado.id
		//url: &quot;Patient/&quot;+pacienteCreado.id
		}

	//EntryQuestionnaireResponse
	delete questionnaireResponse.fullUrl;
	questionnaireResponse.resource.id = questionnaireResponseId;	
	questionnaireResponse.request = {
		method:&quot;POST&quot;,	
		url: questionnaireResponse.resource.resourceType,
		//ifNoneExist:&quot;_id=&quot;+resource.id
		}			

	//EntryObservation
	delete observation.fullUrl;
	observation.resource.id = observationId;
	observation.request = {
		method:&quot;POST&quot;,	
		url: observation.resource.resourceType,
		ifNoneExist:&quot;_id=&quot;+observation.resource.id		
		}

	//EntryPractitionerRole	
	delete practitionerRole.fullUrl;
	practitionerRole.resource.id = practitionerRoleId;	
	practitionerRole.resource.practitioner.reference = urlReplaceId+&quot;Practitioner/&quot;+practitionerId;
	practitionerRole.resource.organization.reference = urlReplaceId+&quot;Organization/&quot;+organizationId;
	practitionerRole.request = {
		method:&quot;POST&quot;,	
		url: practitionerRole.resource.resourceType,
		ifNoneExist:&quot;_id=&quot;+practitionerRole.resource.id		
		}				


	//EntryOrganization
	delete organization.fullUrl;
	organization.resource.id = organizationId;
	organization.request = {
		method:&quot;POST&quot;,	
		url: organization.resource.resourceType,
		ifNoneExist:&quot;_id=&quot;+organization.resource.id		
		}

	//EntryPractitioner
	var colectionPractitioner = practitioner.resource.identifier;
	for each(var arrayPartitioner in colectionPractitioner){
			var type = arrayPartitioner.type.coding[0].code;
			if(arrayPartitioner.use == &apos;official&apos;&amp;&amp; type == &apos;RUN&apos;){
				delete practitioner.fullUrl;
				practitioner.resource.id = practitionerId;
				practitioner.request = {
					method:&quot;POST&quot;,	
					url: practitioner.resource.resourceType,
					ifNoneExist:&quot;identifier=&quot;+arrayPartitioner.value
					}
			}
	}
	
 	//conditions
	for each(var ArrayCondition in conditions){
		var cadena = ArrayCondition.resource.meta.profile;
		var conditionInicioDiagnosticoSospechaLE = &quot;ConditionInicioDiagnosticoSospechaLE&quot;;
		var conditionInicioIndiceComorbilidadLE = &quot;ConditionInicioIndiceComorbilidadLE&quot;;
		var conditionInicioSospechaGesLE = &quot;ConditionInicioSospechaGesLE&quot;;

		for each(var array in cadena){
		
			var index1 = array.search(conditionInicioDiagnosticoSospechaLE);
				if(index1 &gt;= 0){
					ArrayCondition.resource.subject.reference = urleReplace+pacienteCreado.id;
					delete ArrayCondition.fullUrl;		
					ArrayCondition.resource.id = conditionsId;	
					ArrayCondition.request = {
						method:&quot;POST&quot;,	
						url: ArrayCondition.resource.resourceType,
						ifNoneExist:&quot;_id=&quot;+ArrayCondition.resource.id		
						}
			}	
			
			var index2 = array.search(conditionInicioIndiceComorbilidadLE);
			if(index2 &gt;= 0){
				
				serviceRequest.resource.supportingInfo[3].reference = urlReplaceId+&quot;Condition/&quot;+conditionsMorbId;
					
				ArrayCondition.resource.subject.reference = urleReplace+pacienteCreado.id;
				delete ArrayCondition.fullUrl;	
				ArrayCondition.resource.id = conditionsMorbId;				
					
				ArrayCondition.request = {
						method:&quot;POST&quot;,	
						url: ArrayCondition.resource.resourceType,
						ifNoneExist:&quot;_id=&quot;+ArrayCondition.resource.id		
					}
			}

			
			var index3 = array.search(conditionInicioSospechaGesLE);
			if(index3 &gt;= 0){

				serviceRequest.resource.supportingInfo[4].reference = urlReplaceId+&quot;Condition/&quot;+conditionsGesId;

				ArrayCondition.resource.subject.reference = urleReplace+pacienteCreado.id;
				delete ArrayCondition.fullUrl;	
				ArrayCondition.resource.id = conditionsGesId;
					
				ArrayCondition.request = {
						method:&quot;POST&quot;,	
						url: ArrayCondition.resource.resourceType,
						ifNoneExist:&quot;_id=&quot;+ArrayCondition.resource.id		
						}
				}		
		}		
	}

	//TODO:
	//EntryAllergyIntolerance
	if(allergyIntolerance.fullUrl != null &amp;&amp; allergyIntolerance.fullUrl != &quot;&quot;){
	
		serviceRequest.resource.supportingInfo[5].reference = urlReplaceId+&quot;AllergyIntolerance/&quot;+allergyIntoleranceId;	
		
		allergyIntolerance.resource.patient.reference = urleReplace+pacienteCreado.id;
		delete allergyIntolerance.fullUrl;	
		allergyIntolerance.resource.id = allergyIntoleranceId;
		
		allergyIntolerance.request = {
			method:&quot;POST&quot;,	
			url: allergyIntolerance.resource.resourceType,
			ifNoneExist:&quot;_id=&quot;+allergyIntolerance.resource.id		
		}
	}
	
}

var resultFinal;

if(conditions.length == 3 &amp;&amp; allergyIntolerance.fullUrl != null &amp;&amp; allergyIntolerance.fullUrl != &quot;&quot;){
	resultFinal = {
	resourceType:$(&apos;EntryResourceType&apos;),
	id:bundleId,
	meta:$(&apos;EntryMeta&apos;),
	type:$(&apos;EntryType&apos;),
	timestamp:$(&apos;EntryTimestamp&apos;),
	entry:[
	messageHeader,
	serviceRequest,
	encounter,
	appointment,
	patient,
	questionnaireResponse,
	conditions[0],
	conditions[1],
	conditions[2],
	observation,
	allergyIntolerance,
	practitionerRole,
	practitioner,
	organization
	]
	};	
}else if(conditions.length == 3 &amp;&amp; allergyIntolerance.fullUrl == null | allergyIntolerance.fullUrl == &quot;&quot;){
	resultFinal = {
	resourceType:$(&apos;EntryResourceType&apos;),
	id:bundleId,
	meta:$(&apos;EntryMeta&apos;),
	type:$(&apos;EntryType&apos;),
	timestamp:$(&apos;EntryTimestamp&apos;),
	entry:[
	messageHeader,
	serviceRequest,
	encounter,
	appointment,
	patient,
	questionnaireResponse,
	conditions[0],
	conditions[1],
	conditions[2],
	observation,	
	practitionerRole,
	practitioner,
	organization
	]
	};	
}

if(conditions.length == 2 &amp;&amp; allergyIntolerance.fullUrl != null &amp;&amp; allergyIntolerance.fullUrl != &quot;&quot;){
	resultFinal = {
	resourceType:$(&apos;EntryResourceType&apos;),
	id:bundleId,
	meta:$(&apos;EntryMeta&apos;),
	type:$(&apos;EntryType&apos;),
	timestamp:$(&apos;EntryTimestamp&apos;),
	entry:[
	messageHeader,
	serviceRequest,
	encounter,
	appointment,
	patient,
	questionnaireResponse,
	conditions[0],
	conditions[1],
	observation,
	allergyIntolerance,
	practitionerRole,
	practitioner,
	organization
	]
	};	
}else if(conditions.length == 2 &amp;&amp; allergyIntolerance.fullUrl == null | allergyIntolerance.fullUrl == &quot;&quot;){
	resultFinal = {
	resourceType:$(&apos;EntryResourceType&apos;),
	id:bundleId,
	meta:$(&apos;EntryMeta&apos;),
	type:$(&apos;EntryType&apos;),
	timestamp:$(&apos;EntryTimestamp&apos;),
	entry:[
	messageHeader,
	serviceRequest,
	encounter,
	appointment,
	patient,
	questionnaireResponse,
	conditions[0],
	conditions[1],
	observation,	
	practitionerRole,
	practitioner,
	organization
	]
	};	
}

if(conditions.length == 1 &amp;&amp; allergyIntolerance.fullUrl != null &amp;&amp; allergyIntolerance.fullUrl != &quot;&quot;){
	resultFinal = {
	resourceType:$(&apos;EntryResourceType&apos;),	
	id:bundleId,
	meta:$(&apos;EntryMeta&apos;),
	type:$(&apos;EntryType&apos;),
	timestamp:$(&apos;EntryTimestamp&apos;),
	entry:[
	messageHeader,
	serviceRequest,
	encounter,
	appointment,
	patient,
	questionnaireResponse,
	conditions[0],
	observation,
	allergyIntolerance,
	practitionerRole,
	practitioner,
	organization
	]
	};	
}else if(conditions.length == 1 &amp;&amp; allergyIntolerance.fullUrl == null | allergyIntolerance.fullUrl == &quot;&quot;){
	resultFinal = {
	resourceType:$(&apos;EntryResourceType&apos;),
	id:bundleId,
	meta:$(&apos;EntryMeta&apos;),
	type:$(&apos;EntryType&apos;),
	timestamp:$(&apos;EntryTimestamp&apos;),
	entry:[
	messageHeader,
	serviceRequest,
	encounter,
	appointment,
	patient,
	questionnaireResponse,
	conditions[0],
	observation,	
	practitionerRole,
	practitioner,
	organization
	]
	};	
}





channelMap.put(&apos;BundleInicio&apos;, JSON.stringify(resultFinal));</script>
          </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
        </elements>
        <inboundTemplate encoding="base64"></inboundTemplate>
        <outboundTemplate encoding="base64"></outboundTemplate>
        <inboundDataType>RAW</inboundDataType>
        <outboundDataType>JSON</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="3.6.0">
          <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="3.6.0">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.6.0">
          <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.6.0">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </transformer>
      <responseTransformer version="3.6.0">
        <elements>
          <com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
            <name>Responce</name>
            <sequenceNumber>0</sequenceNumber>
            <script>var Base64 = Packages.org.apache.commons.codec.binary.Base64;

// Obtener el contenido de la respuesta
var ResultServer = response.getMessage();

// Decodificar la cadena base64
var insertPatientBytes = Base64.decodeBase64(ResultServer.getBytes(&quot;UTF-8&quot;));

// Convertir los bytes decodificados en texto
var text_content = new java.lang.String(insertPatientBytes, &quot;UTF-8&quot;);

// Imprimir el contenido de texto en el registro de mensajes
logger.info(text_content);

var json_content = JSON.parse(text_content);

channelMap.put(&apos;ResultServer&apos;, json_content);</script>
          </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
        </elements>
        <inboundTemplate encoding="base64"></inboundTemplate>
        <outboundTemplate encoding="base64"></outboundTemplate>
        <inboundDataType>RAW</inboundDataType>
        <outboundDataType>RAW</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="3.6.0">
          <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="3.6.0">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="3.6.0">
          <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="3.6.0">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </responseTransformer>
      <filter version="3.6.0">
        <elements/>
      </filter>
      <transportName>HTTP Sender</transportName>
      <mode>DESTINATION</mode>
      <enabled>true</enabled>
      <waitForPrevious>true</waitForPrevious>
    </connector>
  </destinationConnectors>
  <preprocessingScript>// Modify the message variable below to pre process data
return message;</preprocessingScript>
  <postprocessingScript>// This script executes once after a message has been processed
// Responses returned from here will be stored as &quot;Postprocessor&quot; in the response map

//jsonResult = JSON.stringify({  resourceType:&quot;OperationOutcome&quot;, issue:[{ severity:&quot;error&quot;,code:&quot;processing&quot;,diagnostics:errorMessage}] });
/*creo variable que contendra valores para result final  */
var jsonResult;
	
	/* asigno valores a variables con datos trabajados 	*/ 
	
	var resultValidations = $(&apos;resultValidations&apos;);
	var resultValidationsJson = JSON.parse(resultValidations);

				
	
	
	if(resultValidationsJson.issue[0].severity == &apos;error&apos;){
		jsonResult = resultValidations;
	}
	
	if(resultValidationsJson.issue[0].severity ==  &apos;validado&apos;){
		var result = $(&apos;ResultServer&apos;);
		var resultServer = JSON.stringify(result);	
		jsonResult = resultServer;
	}
	

responseMap.put(&apos;response&apos;, jsonResult);
return;


</postprocessingScript>
  <deployScript>// This script executes once when the channel is deployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</deployScript>
  <undeployScript>// This script executes once when the channel is undeployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</undeployScript>
  <properties version="3.6.0">
    <clearGlobalChannelMap>true</clearGlobalChannelMap>
    <messageStorageMode>DEVELOPMENT</messageStorageMode>
    <encryptData>false</encryptData>
    <removeContentOnCompletion>false</removeContentOnCompletion>
    <removeOnlyFilteredOnCompletion>false</removeOnlyFilteredOnCompletion>
    <removeAttachmentsOnCompletion>false</removeAttachmentsOnCompletion>
    <initialState>STARTED</initialState>
    <storeAttachments>true</storeAttachments>
    <metaDataColumns>
      <metaDataColumn>
        <name>SOURCE</name>
        <type>STRING</type>
        <mappingName>mirth_source</mappingName>
      </metaDataColumn>
      <metaDataColumn>
        <name>TYPE</name>
        <type>STRING</type>
        <mappingName>mirth_type</mappingName>
      </metaDataColumn>
    </metaDataColumns>
    <attachmentProperties version="3.6.0">
      <type>None</type>
      <properties/>
    </attachmentProperties>
    <resourceIds class="linked-hash-map">
      <entry>
        <string>Default Resource</string>
        <string>[Default Resource]</string>
      </entry>
    </resourceIds>
  </properties>
  <exportData>
    <metadata>
      <enabled>true</enabled>
      <lastModified>
        <time>1683058421659</time>
        <timezone>America/Santiago</timezone>
      </lastModified>
      <pruningSettings>
        <archiveEnabled>true</archiveEnabled>
      </pruningSettings>
    </metadata>
    <codeTemplateLibraries>
      <codeTemplateLibrary version="3.6.0">
        <id>5e65f5bd-e2ee-4ac0-a5f2-70d9d23a892a</id>
        <name>MYMED</name>
        <revision>16</revision>
        <lastModified>
          <time>1680639535013</time>
          <timezone>America/Santiago</timezone>
        </lastModified>
        <description>This library was added upon migration to version 3.3.0. It includes all pre-existing
code templates, and is set to be included on all pre-existing and new channels.

You should create your own new libraries and assign code templates to them as you
see fit. You should also link libraries to specific channels, so that you&apos;re not
necessarily including all code templates on all channels all the time.</description>
        <includeNewChannels>true</includeNewChannels>
        <enabledChannelIds>
          <string>9d3b05fc-cfa1-40b5-91f1-2c1ff7f9b35d</string>
          <string>7e80013f-2970-420e-80b7-22d3a3fa2fdf</string>
          <string>cb8eaa05-117c-48e6-81b4-fc08f22cd419</string>
          <string>db838edf-f925-451d-8c0c-dce4d5b72a33</string>
          <string>9252cf4a-8c0a-4ec0-8af5-a44ca1588513</string>
          <string>f38664a3-d837-40dc-a40a-74caa65fd637</string>
          <string>e405f62b-65ec-4b88-b2cc-f01819d5080a</string>
          <string>be21e29c-d272-47d6-958d-a906d279c5c1</string>
          <string>9536c8e3-6744-4fa9-ad0e-c1e30d6554af</string>
          <string>4df3c033-b2a0-4e83-9ae7-84da6f947c0a</string>
          <string>56e4f4ac-339f-4240-b273-bdfd22454a09</string>
          <string>75c50102-63f3-438b-931f-44a709a125d9</string>
          <string>b88a0ea6-4105-4852-a23b-8244eb178514</string>
          <string>7a19aa61-4dcc-44bf-9147-cdf39546e12b</string>
          <string>e901bd6f-5cb1-472e-a430-590b4278b23e</string>
          <string>18ff10f4-82da-4ea9-873d-6b7018f53722</string>
          <string>201b6945-d50e-46dc-bb68-bc7e188ecb23</string>
          <string>ca06b94c-3d82-4ae2-81eb-48589f7f1e16</string>
          <string>3ff7541b-19d4-4981-bb83-feeb674d777d</string>
          <string>ff195484-0351-4512-b13b-a3582de987a4</string>
          <string>49c60800-90c9-4efd-ba85-6d5157b57999</string>
          <string>600445b4-9502-4e48-9c8e-4f6343d94bc7</string>
          <string>fb656f02-e826-4cac-923f-3000e3deb0c6</string>
          <string>b6d154c0-f653-4422-a506-7d256c52a611</string>
          <string>a0ed5ef5-e51e-4bc0-bff4-704d7941c016</string>
          <string>b155df6b-9a92-43f3-95c7-1c9cb9ebde47</string>
          <string>ba1fd343-96d2-4e2d-b868-852d95f85d39</string>
          <string>c9791370-65b8-463b-8e48-bb1b6e29d07d</string>
          <string>90b52ab3-02a6-4120-b24a-d436b53dd6e7</string>
          <string>94af177c-018d-4b48-a501-5d269159787f</string>
          <string>01c42c18-6ac2-4444-b957-e3dd7e72a8bf</string>
          <string>49c60800-90c9-4efd-ba85-6d5157b56893</string>
          <string>8e6dc766-c9dd-4a2f-a155-36d43c11f7b7</string>
          <string>e9b4f0dd-34ca-464f-b95f-ef762e4c1e4d</string>
          <string>172ebb12-b227-4411-9f60-b13365e451d7</string>
          <string>0b7b8f15-316a-42b4-b092-6eb592e972a7</string>
          <string>db8c713c-30d5-4f68-82b5-bca46c6f48c4</string>
          <string>bd5c94db-4684-4033-a852-d07a56c55eb5</string>
          <string>ca06b94c-3d82-4ae2-81eb-48589f7f1e7</string>
          <string>254e1747-702d-4a75-be03-f86561544914</string>
          <string>73bc7363-4a82-4518-a707-a46f54762b39</string>
          <string>1ecd8d3e-28b9-41af-b207-5305220d4acd</string>
          <string>a4c7d7d0-09ad-426c-8454-ed1b3ddd0e9d</string>
          <string>69bc41bb-2df4-4cd0-b17f-31e8bd6322b7</string>
          <string>ff639cac-829c-4d49-b217-273722b0d723</string>
          <string>3410e3c0-1735-4467-ae08-3b3068556768</string>
          <string>40169970-31c9-4dac-8409-364479ae88d8</string>
          <string>896086ba-0066-4f24-8898-7357e9f4d8d5</string>
          <string>7113fe9b-b24d-4346-86f6-7834c537e413</string>
          <string>36d9bf63-a1ad-4cb8-8c76-2c41bdea19e9</string>
          <string>11f13c29-7678-457a-90c2-d26fa8634c89</string>
          <string>4848645f-ea56-4cff-9db5-cd8136b64cc0</string>
          <string>f724f0aa-9fd5-441d-b41f-08da8ddf013b</string>
          <string>aad7cf63-11e8-41eb-9d6b-42b57267e129</string>
          <string>9f6d49a3-8f77-427a-b453-c9c692179183</string>
          <string>05dadd4a-1073-4465-bfde-4042f3ffd408</string>
          <string>762c2dfb-59e6-4fc4-b904-35bac41b96cb</string>
          <string>0772b47b-1fa3-441e-944d-25aa7c0d1c00</string>
          <string>f131a34c-789e-4dd7-89da-45f059831b3e</string>
          <string>02e69156-6c68-4cfb-a1b5-cc4149b2deb3</string>
          <string>c8ffc014-42f6-4a79-a6b8-a220799d534c</string>
          <string>9385d43b-ec01-4b07-8ec8-7229b87f6e1d</string>
          <string>f8af8552-7c81-4c6e-b472-1c18dca9f435</string>
          <string>4264e2c9-d791-4427-9945-e8f550c251a6</string>
          <string>e6588e8d-6e22-4fa3-9052-239bd0f04716</string>
          <string>70699c67-15e7-4753-b17b-f295bcce1586</string>
          <string>4bfa33c3-8ed4-4707-a80f-20f469136bac</string>
          <string>d2af51d1-9505-4036-bee3-dfed8f04111d</string>
          <string>ac32c9d0-a372-4fd4-b358-464323cf4939</string>
          <string>502cf68a-7305-40ce-943e-f205892ea0d6</string>
          <string>7e9f2209-5388-4ae7-8d66-d5356166fee0</string>
          <string>25e129a0-038a-442b-be3e-22a6345d64d3</string>
          <string>0b47927c-4b71-4eb9-9b70-8fa84ee0b03f</string>
          <string>ecb95b48-8609-4722-95b2-a80b7903f208</string>
          <string>7c0999cb-eec0-4afb-ac6a-a3c59691d868</string>
          <string>42159b90-1060-4ce8-aeb5-3e81fbc0ca5a</string>
          <string>619c9465-386c-4849-ab28-2556bd3c9ca8</string>
          <string>3b05099d-7e2a-4626-843d-0cff2249e1a5</string>
          <string>56b723d4-8bf5-4267-b577-f337032186bd</string>
          <string>90ab9d70-a67b-42c2-bf25-1bf2de22585a</string>
          <string>bf737c66-cc6f-4d75-a7a1-06d8ef6dcf1a</string>
          <string>9faea8ca-5b8e-4544-98bc-adc2aae08fae</string>
          <string>e6cb478b-175b-4cb7-a37d-74d7846311da</string>
          <string>b89820a8-16fa-49eb-ac65-caf3d32c18fe</string>
          <string>351236e0-0a55-4b47-810f-004a512f521b</string>
          <string>02b6ae44-121d-4576-9bbd-8773fb1af6ce</string>
          <string>1924c391-1431-406e-83b0-52488b08e33d</string>
          <string>071795a7-c995-44d2-9f58-dae7e6150840</string>
          <string>74dea752-0cf7-4c2a-b194-7acc17f38cdc</string>
          <string>079c66f8-fac3-4516-9edf-01fb9311b956</string>
          <string>77b7eb50-8bdc-4b87-9f38-9c123f4cc1a8</string>
          <string>c27a0fc5-4bfa-4b59-a838-6b73a4607a0e</string>
          <string>a545fb52-bb6c-4208-9ad4-9ffebb44b10e</string>
          <string>663ad19b-0e43-47fd-b929-4c2dbc9919f5</string>
          <string>c8aeace4-5c45-401d-8326-6157661fb724</string>
          <string>12369ab2-08c4-40d8-aa4c-a658edddd20d</string>
          <string>4f25998a-46f6-4211-86cc-9055e4ea660b</string>
          <string>4d53f2b0-dd68-4766-9a2e-e2774eb8ad92</string>
          <string>df8b1072-1bb8-451c-bc83-c1d52b70a45b</string>
          <string>8d268067-8585-48ba-8c9b-f009b94175ac</string>
          <string>53a1cc5b-efde-42bf-ae00-27372b189904</string>
          <string>25e6089e-bf67-4bf6-9720-9c01bf767ff3</string>
          <string>9efed39d-d299-4a89-b8c2-3761495d83dd</string>
        </enabledChannelIds>
        <disabledChannelIds/>
        <codeTemplates>
          <codeTemplate version="3.6.0">
            <id>65cec76b-5d33-47b4-bab1-cf81483e410a</id>
            <name>[HCC] JSON/XML2PID</name>
            <revision>2</revision>
            <lastModified>
              <time>1568301688633</time>
              <timezone>America/Santiago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>CHANNEL_DEPLOY</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>GLOBAL_DEPLOY</contextType>
                <contextType>GLOBAL_UNDEPLOY</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>GLOBAL_POSTPROCESSOR</contextType>
                <contextType>CHANNEL_POSTPROCESSOR</contextType>
                <contextType>CHANNEL_BATCH</contextType>
                <contextType>CHANNEL_PREPROCESSOR</contextType>
                <contextType>CHANNEL_ATTACHMENT</contextType>
                <contextType>GLOBAL_PREPROCESSOR</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>CHANNEL_UNDEPLOY</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	[HCC] Personalized functions to map JSON/XML Patient resource to PID
*/
// Constants
// for treatment idenfifiers and domains
var gaExcludedIdTypes = [&apos;787300&apos;]; // array including identifiers not to be replaced in case the patient already have it
var gaIdTypesforCountry = [&apos;787300&apos;,&apos;808078&apos;, &apos;688000&apos;,&apos;827884&apos;]; // array of identifier types to which we need to apply country extraction
var gaIdTypesforGuardian = [&apos;827884&apos;]; // array of identifier types which are marked as guardian
var gaSystemsExcludedforReplaceCountry = [&apos;2.16.840.1.113883.2.22.1.152.787300&apos;, &apos;2.16.840.1.113883.2.22.1.152.827884&apos;]; // array of systems not to replace country with default
var gcDefaultContryforSystem = &apos;0&apos;; // default contry replacer for systems with country treatment 
// for extension url&apos;s
var gsExtUrlIdentifierCountry = &apos;http://hn.indra.es/fhir/StructureDefinition/identifier-country&apos;; // extension url for indentify issuing country 
var gsExtUrlFatherFamilyName = &apos;http://hl7.org/fhir/StructureDefinition/humanname-fathers-family&apos;; // extension url for father family name
var gsExtUrlMotherFamilyName = &apos;http://hl7.org/fhir/StructureDefinition/humanname-mothers-family&apos;; // extension url for mothers family name
var gsExtUrlAddrCityCode = &apos;http://hn.indra.es/fhir/StructureDefinition/address-city-code&apos;; // extension url for address city code
var gsExtUrlAddrStateCode = &apos;http://hn.indra.es/fhir/StructureDefinition/address-state-code&apos;; // extension url for address state code
var gsExtUrlBiologicalGender = &apos;uri:hn:additional-data:identidad_genero&apos;; // extension url for biological gender
var gsExtUrlStudyLevel = &apos;uri:hn:additional-data:nivel_instruccion&apos;; // extension url for study level
var gsExtUrlTheoricDeathDate = &apos;uri:hn:additional-data:fecha_presunta_defuncion&apos;; // extension url for theoric death date
var gsExtUrlPuebloIndigena = &apos;uri:hn:additional-data:pueblos&apos;; // extension url for pueblos indigenas
var gsExtUrlBirthCountry = &apos;http://hn.indra.es/fhir/StructureDefinition/patient-birthcountry&apos;; // extension url for patient birth country
var gsExtUrlNationality = &apos;http://hl7.org/fhir/StructureDefinition/patient-nationality&apos;; // extension url for patient nationality

/**
	[HCC] Personalized mapping from JSON to PID for HCC
	@param patient JSON Patient resource
	@return pid HL7 PID segment
*/
function parsePatientJsonToPidHCC(patient) {
	var pid = new XML(&lt;PID/&gt;);

	// Identifiers
	parseIdentifiersJsonHCC(pid, patient);

	// Names
	var nameIdx=0;
	var pid9 = null;
	for each (name in patient[&apos;name&apos;]){	
		if ( nameIdx == 0 ) { // Nombre y apellidos
			var pid5 = new XML(&lt;PID.5/&gt;);
	
			// apellido 1
			var ext0 = name[&apos;extension&apos;][0];
			if ( ext0 &amp;&amp; ext0[&apos;valueString&apos;] &amp;&amp; ext0[&apos;url&apos;] &amp;&amp; ext0[&apos;url&apos;].toString() == gsExtUrlFatherFamilyName ) {
				pid5[&apos;PID.5.1&apos;] = ext0[&apos;valueString&apos;].toString();
			}
			
			// nombre
			var nombres = name[&apos;given&apos;][0].toString();
			var aNombres = nombres.split(&apos; &apos;);
			if ( aNombres.length == 2 ) {
				pid5[&apos;PID.5.2&apos;] = aNombres[0];
				pid5[&apos;PID.5.3&apos;] = aNombres[1];
			} else {
				pid5[&apos;PID.5.2&apos;] = nombres;
			}
		
			pid5[&apos;PID.5.7&apos;] = &apos;L&apos;;
		     
			pid.appendChild(pid5);
	
			// apellido 2
			var ext1 = name[&apos;extension&apos;][1];
			if ( ext1 &amp;&amp; ext1[&apos;valueString&apos;] &amp;&amp; ext1[&apos;url&apos;] &amp;&amp; ext1[&apos;url&apos;].toString() == gsExtUrlMotherFamilyName ) {
				var pid61 = ext1[&apos;valueString&apos;].toString();		 
				if ( pid61.length &gt; 0 ) {
					var pid6 = new XML(&lt;PID.6/&gt;);
					pid6[&apos;PID.6.1&apos;]=pid61;
					pid6[&apos;PID.6.7&apos;] = &apos;L&apos;;
					pid.appendChild(pid6);
				}
			}
		} if ( nameIdx == 1 ) { // Nombre Social
			pid9 = new XML(&lt;PID.9/&gt;);
			var alias = name[&apos;text&apos;];
			var aAlias = alias.split(&apos; &apos;);
			if ( aAlias.length == 2 ) {
				pid9[&apos;PID.9.1&apos;] = aAlias[0];
				pid9[&apos;PID.9.2&apos;] = aAlias[1];
			} else {
				pid9[&apos;PID.9.1&apos;] = alias;
			}
		}
		nameIdx++;
	}

	// birth date
	try{
		var date = DateUtil.getDate(&apos;yyyy-MM-dd&apos;, patient[&apos;birthDate&apos;]);
		pid[&apos;PID.7&apos;] = formatBirthDateToHl7(date);
	} catch (err){}
	
	// gender
	try{	
		pid[&apos;PID.8&apos;] = map(&apos;administrativeGender&apos;,&apos;FHIR&apos;,&apos;HL7&apos;,patient[&apos;gender&apos;]);
	} catch (err){}	

	if ( pid9 ) {
		pid.appendChild(pid9);
	}

	// address
	try{
		for each ( address in patient[&apos;address&apos;] ) {
			field = new XML(&lt;PID.11/&gt;);
			var line = &apos;&apos;;
			if ( address[&apos;line&apos;].length == 2 ) { // si hay dos líneas cada una a su sitio
				field[&apos;PID.11.1&apos;] = address[&apos;line&apos;][0].toString();
				field[&apos;PID.11.2&apos;] = address[&apos;line&apos;][1].toString();
			} else { // si hay un número distinto de líneas todas concatenadas
				line = address[&apos;line&apos;].join(&apos; &apos;);
				if (line &amp;&amp; line.length &gt; 0 ) {
					field[&apos;PID.11.1&apos;] = line;				
				}
			}
			// extract code and name from extensions
			var cityCode = null;
			var stateCode = null;
			for each ( addrext in address.extension ) {
				if ( addrext.url == gsExtUrlAddrCityCode ) {
					cityCode = addrext.valueString;
				} else if ( addrext.url == gsExtUrlAddrStateCode ) {
					stateCode = addrext.valueString;
				}
			}
			if ( address[&apos;city&apos;] != undefined ) {
				if ( cityCode ) {
					field[&apos;PID.11.3&apos;][&apos;PID.11.3.1&apos;] = cityCode;
					field[&apos;PID.11.3&apos;][&apos;PID.11.3.2&apos;] = address[&apos;city&apos;];
				} else {
					field[&apos;PID.11.3&apos;] = address[&apos;city&apos;];
				}
			}
			if ( address[&apos;state&apos;] != undefined ) {
				if ( stateCode ) {
					field[&apos;PID.11.4&apos;][&apos;PID.11.4.1&apos;] = stateCode;
					field[&apos;PID.11.4&apos;][&apos;PID.11.4.2&apos;] = address[&apos;state&apos;];
				} else {
					field[&apos;PID.11.4&apos;] = address[&apos;state&apos;];
				}
			}
			if (address[&apos;postalCode&apos;] != undefined){
				field[&apos;PID.11.5&apos;] = address[&apos;postalCode&apos;];
			}
			if (address[&apos;country&apos;] != undefined){
				field[&apos;PID.11.6&apos;] =  address[&apos;country&apos;];		
			}
			field[&apos;PID.11.7&apos;] = map(&apos;addressUse&apos;, &apos;FHIR&apos;, &apos;HL7&apos;, address[&apos;use&apos;]);
			pid.appendChild(field);
		}
	} catch (err) {}

	// telecoms
	var aPid13 = [];
	var aPid14 = [];
	for each ( telecom in patient[&apos;telecom&apos;] ) {
		var tUse = telecom.use;
		var tElement = map(&apos;contactPointSystem&apos;, &apos;FHIR&apos;, &apos;HL7&apos;, telecom.system);
		if ( tUse == &apos;work&apos; ) { 
			var pid14 = new XML(&lt;PID.14/&gt;);
			pid14[&apos;PID.14.3&apos;] = tElement;
			if ( tElement == &apos;Internet&apos; ) {
				pid14[&apos;PID.14.4&apos;] = telecom.value;
			} else {
				pid14[&apos;PID.14.7&apos;] = telecom.value;
			}
			aPid14.push(pid14);
		} else { // by default we put as home
			var pid13 = new XML(&lt;PID.13/&gt;);
			pid13[&apos;PID.13.3&apos;] = tElement;
			if ( tElement == &apos;Internet&apos; ) {
				pid13[&apos;PID.13.4&apos;] = telecom.value;
			} else {
				pid13[&apos;PID.13.7&apos;] = telecom.value;
			}
			aPid13.push(pid13);
		}
	}

	// language
	for each ( comm in patient.communication ) {
		if ( comm.language &amp;&amp; comm.language.coding &amp;&amp; comm.language.coding.length &gt; 0 ) {
			var pid15 = new XML(&lt;PID.15/&gt;);
			pid15[&apos;PID.15.1&apos;] = comm.language.coding[0].code;
			pid.appendChild(pid15);
			
		}
	}

	// maritalStatus
	if ( patient.maritalStatus &amp;&amp; patient.maritalStatus.coding &amp;&amp; patient.maritalStatus.coding.length &gt; 0 ) {
		var pid16 = new XML(&lt;PID.16/&gt;);
		pid16[&apos;PID.16.1&apos;] = patient.maritalStatus.coding[0].code;
		pid16[&apos;PID.16.2&apos;] = patient.maritalStatus.text;
		pid.appendChild(pid16);
	}

	// deceasedDateTime
	var pid29 = null;
	var pid30 = null;
	if ( patient.deceasedDateTime ) {
		pid29 = new XML(&lt;PID.29/&gt;);
		pid30 = new XML(&lt;PID.30/&gt;);
		var patDeathDate = DateUtil.getDate(&apos;yyyy-MM-dd&apos;, patient.deceasedDateTime);
		pid29[&apos;PID.29.1&apos;] = formatBirthDateToHl7(patDeathDate);
		pid30[&apos;PID.30.1&apos;] = &apos;Y&apos;;
	}

	// others ( biological gender, level of studies, theorical death date, pais nacimiento, nacionalidad, ...)
	var primeraNacionalidad = true;
	var pid22 = null;
	var pid23 = null;
	var pid261 = null;
	var pid262 = null;
	var pid28 = null;
	for each ( patext in patient.extension ) {
		var extURL = patext.url;
		if ( extURL == gsExtUrlBiologicalGender ) { // biological gender
			if ( extURL.valueCodeableConcept &amp;&amp; extURL.valueCodeableConcept.coding &amp;&amp; extURL.valueCodeableConcept.coding.length &gt; 0 ) {
				pid261 = new XML(&lt;PID.26/&gt;);
				pid261[&apos;PID.26.1&apos;] = extURL.valueCodeableConcept.coding[0].code;
				pid261[&apos;PID.26.2&apos;] = extURL.valueCodeableConcept.text;
			}
		} else if ( extURL == gsExtUrlStudyLevel ) { // level of studies
			if ( extURL.valueCodeableConcept &amp;&amp; extURL.valueCodeableConcept.coding &amp;&amp; extURL.valueCodeableConcept.coding.length &gt; 0 ) {
				pid262 = new XML(&lt;PID.26/&gt;);
				pid262[&apos;PID.26.1&apos;] = extURL.valueCodeableConcept.coding[0].code;
				pid262[&apos;PID.26.2&apos;] = extURL.valueCodeableConcept.text;
			}			
		} else if ( extURL == gsExtUrlTheoricDeathDate &amp;&amp; !pid29) { // theorical death date when not having real deathdate
			if ( extURL.valueDateTime ) {
				pid29 = new XML(&lt;PID.29/&gt;);
				pid30 = new XML(&lt;PID.30/&gt;);
				var patDeathDate = DateUtil.getDate(&apos;yyyy-MM-dd&apos;, extURL.valueDateTime);
				pid29[&apos;PID.29.1&apos;] = formatBirthDateToHl7(patDeathDate);
				pid30[&apos;PID.30.1&apos;] = &apos;N&apos;;
			}
		} else if ( extURL == gsExtUrlPuebloIndigena ) { // pueblos indigenas
			if ( extURL.valueCodeableConcept &amp;&amp; extURL.valueCodeableConcept.coding &amp;&amp; extURL.valueCodeableConcept.coding.length &gt; 0 ) {
				pid22 = new XML(&lt;PID.22/&gt;);
				pid22[&apos;PID.22.1&apos;] = extURL.valueCodeableConcept.coding[0].code;
				pid22[&apos;PID.22.2&apos;] = extURL.valueCodeableConcept.text;
			}
		} else if ( extURL == gsExtUrlBirthCountry ) { // pais de nacimiento
			if ( extURL.valueCodeableConcept &amp;&amp; extURL.valueCodeableConcept.coding &amp;&amp; extURL.valueCodeableConcept.coding.length &gt; 0 ) {
				pid23 = new XML(&lt;PID.23/&gt;);
				pid23[&apos;PID.23.1&apos;] = extURL.valueCodeableConcept.coding[0].code;
			}			
		} else if ( primeraNacionalidad &amp;&amp; extURL == gsExtUrlNationality ) { // nacionalidad solo la primera
			primeraNacionalidad = false;
			if ( extURL.extension &amp;&amp; extURL.extension.length &gt; 0 &amp;&amp; extURL.extension[0].valueCodeableConcept &amp;&amp; extURL.extension[0].valueCodeableConcept.coding &amp;&amp; extURL.extension[0].valueCodeableConcept.coding.length &gt; 0 ) {
				pid28 = new XML(&lt;PID.28/&gt;);
				pid28[&apos;PID.28.1&apos;] = extURL.extension[0].valueCodeableConcept.coding[0].code;
			}
		}
	}
	if ( pid22 ) {
		pid.appendChild(pid22);
	}
	if ( pid23 ) {
		pid.appendChild(pid23);
	}
	if ( pid261 ) {
		pid.appendChild(pid261);
	} else if ( pid262 ) {
		pid.appendChild(new XML(&lt;PID.26/&gt;)); //Create first item if not exists
	}
	if ( pid262 ) {
		pid.appendChild(pid262);
	}
	if ( pid28 ) {
		pid.appendChild(pid28);
	}
	if ( pid29 ) {
		pid.appendChild(pid29);
	}
	if ( pid30 ) {
		pid.appendChild(pid30);
	}

	return pid;
}

/**
	[HCC] Personalized mapping from JSON to PID for HCC (only Identifiers + masked patient name)
	@param patient JSON Patient resource
	@param domains Domain Application name
	@return pid HL7 PID segment
*/
function parsePatientIdentifierJsonToPidHCC(patient, domains) {	
	var pid = new XML(&lt;PID/&gt;);

	// Identifiers
	parseIdentifiersJsonHCC(pid, patient);

	// anonymous Name
	var field = new XML(&lt;PID.5/&gt;);				
	field[&apos;PID.5.7&apos;] = &apos;S&apos;;
	pid.appendChild(field);
	
	return pid;
}

/**
	[HCC] Personalization for identifiers treatment for Json Patient resource
	@param pid The current pid segment to map
	@param patient JSON Node for patient to map
*/
function parseIdentifiersJsonHCC(pid, patient) {
	for each ( identifier in patient.identifier ) {
		var pid3 = new XML(&lt;PID.3/&gt;);
		var oid = identifier[&apos;system&apos;];
		var pid341 = map(&apos;identifiers&apos;, &apos;OID&apos;, &apos;NAME&apos;, oid);
		var pid343 = map(&apos;identifiers&apos;, &apos;OID&apos;, &apos;TYPE&apos;, oid);
		// Country treatment
		if ( gaSystemsExcludedforReplaceCountry.indexOf(oid) == -1 ) {
			var aSystem = oid.split(&apos;.&apos;);
			var iNumSystemElem = aSystem.length;
			var sIdType = null;
			if ( iNumSystemElem &gt; 0 ) {
				sIdType = aSystem[iNumSystemElem - 1];
			}
			if ( gaIdTypesforCountry.indexOf(sIdType) &gt; -1  &amp;&amp; iNumSystemElem &gt; 1 ) {
				var countryCode = null;
				for each ( extension in identifier[&apos;extension&apos;] ) {
					if ( extension.url == gsExtUrlIdentifierCountry ) {
						countryCode = extension.valueCodeableConcept.coding.code;
						break;
					}
				}
				if ( countryCode ) {
					aSystem.splice(iNumSystemElem - 2, 1, countrCode);
					oid = aSystem.join(&apos;.&apos;);
				}
			}
		}
		var pid342 = oid;
		pid3[&apos;PID.3.1&apos;] = identifier[&apos;value&apos;];
		pid3[&apos;PID.3.4&apos;][&apos;PID.3.4.1&apos;] = pid341;
		pid3[&apos;PID.3.4&apos;][&apos;PID.3.4.2&apos;] = pid342;
		pid3[&apos;PID.3.4&apos;][&apos;PID.3.4.3&apos;] = pid343;
		pid.appendChild(pid3);		
	}
}

/**
	[HCC] Personalized mapping from XML to PID for HCC (requires XML without namespaces Channel/Set Data Types/[choose destination]/Strip Namespaces checked)
	@param i The sequence of patient for PID segment
	@param patient XML Node for patient to map
	@return The pid serialized segment
*/
function parsePatientXmlToPidHCC( i, patient) {
	var pid = createSegment(&apos;PID&apos;);

	// sequence number
	pid[&apos;PID.1&apos;][&apos;PID.1.1&apos;] = i;
	// patient MPI ID
	pid[&apos;PID.2&apos;][&apos;PID.2.1&apos;] = patient.id.@value;
	
	// Documentos
	try {
		parseDocumentsHCC(pid, patient, patient.identifier);
	} catch (error) {
		logger.error(&quot;Error mapeando documentos: &quot; + error)
	}
	
	// Nombre
	try {              
		var pid9 = parseNamesHCC(pid, patient.name);	
	} catch (error) {
		logger.error(&quot;Error mapeando nombre: &quot; + error);
	}
	
	// Fecha nacimiento
	try {
		var date = DateUtil.getDate(&quot;yyyy-MM-dd&quot;, patient.birthDate.@value.toString());
		pid[&apos;PID.7&apos;][&apos;PID.7.1&apos;] = formatBirthDateToHl7(date);
	} catch (error) {
		logger.error(&quot;Error mapeando fecha nacimiento: &quot; + error);
	}	

	// Genero
	try {
		pid[&apos;PID.8&apos;][&apos;PID.8.1&apos;] = map(&apos;administrativeGender&apos;,&apos;FHIR&apos;, &apos;HL7&apos;, patient.gender.@value.toString());
	} catch (error) {
		logger.error(&quot;Error mapeando genero: &quot; + error);
	}	

	// append now pid9 if any 
	if ( pid9 ) {
		pid.appendChild(pid9);
	}
	
	// Direccion
	try {
		parseAdressHCC(pid, patient.address);
	} catch (error) {
		logger.error(&quot;Error mapeando dirección: &quot; + error);
	}

	// telecoms
	var aPid13 = [];
	var aPid14 = [];
	for each ( telecom in patient[&apos;telecom&apos;] ) {
		var tUse = telecom.use.@value.toString();
		var tElement = map(&apos;contactPointSystem&apos;, &apos;FHIR&apos;, &apos;HL7&apos;, telecom.system.@value.toString());
		if ( tUse == &apos;work&apos; ) { 
			var pid14 = new XML(&lt;PID.14/&gt;);
			pid14[&apos;PID.14.3&apos;] = tElement;
			if ( tElement == &apos;Internet&apos; ) {
				pid14[&apos;PID.14.4&apos;] = telecom.value.@value.toString();
			} else {
				pid14[&apos;PID.14.7&apos;] = telecom.value.@value.toString();
			}
			aPid14.push(pid14);
		} else { // by default we put as home
			var pid13 = new XML(&lt;PID.13/&gt;);
			pid13[&apos;PID.13.3&apos;] = tElement;
			if ( tElement == &apos;Internet&apos; ) {
				pid13[&apos;PID.13.4&apos;] = telecom.value.@value.toString();
			} else {
				pid13[&apos;PID.13.7&apos;] = telecom.value.@value.toString();
			}
			aPid13.push(pid13);
		}
	}
	for each (var node in aPid13) {
		pid.appendChild(node);
	}
	for each (var node in aPid14) {
		pid.appendChild(node);
	}
	
	// language
	var language = patient.communication.language.coding.code.@value.toString();
	if ( language.length &gt; 0 ) {
		var pid15 = new XML(&lt;PID.15/&gt;);
		pid15[&apos;PID.15.1&apos;] = language;
		pid.appendChild(pid15);
	}

	// maritalStatus
	var maritalStatus = patient.maritalStatus.coding.code.@value.toString();
	if ( maritalStatus.length &gt; 0 ) {
		var pid16 = new XML(&lt;PID.16/&gt;);
		pid16[&apos;PID.16.1&apos;] = maritalStatus;
		pid16[&apos;PID.16.2&apos;] = patient.maritalStatus.text.@value.toString();
		pid.appendChild(pid16);
	}

	// others
	// pueblos indigenas
	var puebloIndigena = patient.extension.(@url==gsExtUrlPuebloIndigena).valueCodeableConcept.coding.code.@value.toString();
	if ( puebloIndigena.length &gt; 0 ) {
		var pid22 = new XML(&lt;PID.22/&gt;);
		pid22[&apos;PID.22.1&apos;] = puebloIndigena;
		pid22[&apos;PID.22.2&apos;] = patient.extension.(@url==gsExtUrlPuebloIndigena).valueCodeableConcept.text.@value.toString();
		pid.appendChild(pid22);
	}

	// pais de nacimiento
	var paisNacimiento = patient.extension.(@url==gsExtUrlBirthCountry).valueCodeableConcept.coding.code.@value.toString();
	if ( paisNacimiento.length &gt; 0 ) {
		var pid23 = new XML(&lt;PID.23/&gt;);
		pid23[&apos;PID.23.1&apos;] = paisNacimiento;
		pid.appendChild(pid23);
	}

	// biological gender
	var biologicalGender = patient.extension.(@url==gsExtUrlBiologicalGender).valueCodeableConcept.coding.code.@value.toString();
	var pid26 = new XML(&lt;PID.26/&gt;);
	if ( biologicalGender.length &gt; 0 ) {
		pid26[&apos;PID.26.1&apos;] = biologicalGender;
		pid26[&apos;PID.26.2&apos;] = patient.extension.(@url==gsExtUrlBiologicalGender).valueCodeableConcept.text.@value.toString();
	}
	pid.appendChild(pid26);

	// level of studies
	var instructionLevel = patient.extension.(@url==gsExtUrlStudyLevel).valueCodeableConcept.coding.code.@value.toString();
	pid26 = new XML(&lt;PID.26/&gt;);
	if ( instructionLevel.length &gt; 0 ) {
		pid26[&apos;PID.26.1&apos;] = instructionLevel;
		pid26[&apos;PID.26.2&apos;] = patient.extension.(@url==gsExtUrlStudyLevel).valueCodeableConcept.text.@value.toString();
	}
	pid.appendChild(pid26);

	// Nacionalidad
	var nacionalidad = patient.extension.(@url==gsExtUrlNationality).extension.valueCodeableConcept.coding.code.@value.toString();
	if ( nacionalidad.length &gt; 0 ) {
		if ( nacionalidad.length &gt; 3 ) { // hay más de una tomar sólo la primera
			nacionalidad = patient.extension.(@url==gsExtUrlNationality)[0].extension.valueCodeableConcept.coding.code.@value.toString()
		}
		var pid28 = new XML(&lt;PID.28/&gt;);
		pid28[&apos;PID.28.1&apos;] = nacionalidad;
		pid.appendChild(pid28);
	}

	// deceasedDateTime
	var pid29 = null;
	var pid30 = null;
	var patDeathDate = patient.deceasedDateTime.@value.toString();
	if ( patDeathDate.length &gt; 0 ) {
		pid29 = new XML(&lt;PID.29/&gt;);
		pid30 = new XML(&lt;PID.30/&gt;);
		patDeathDate = DateUtil.getDate(&apos;yyyy-MM-dd&apos;, patDeathDate);
		pid29[&apos;PID.29.1&apos;] = formatBirthDateToHl7(patDeathDate);
		pid30[&apos;PID.30.1&apos;] = &apos;Y&apos;;
	}
	// theorical death date whenever not real death date exists
	if ( !pid29 ) {
		var patTheoricalDeathDate = patient.extension.(@url==gsExtUrlTheoricDeathDate).valueDateTime.@value.toString();
		if ( patTheoricalDeathDate.length &gt; 0 ) {
			pid29 = new XML(&lt;PID.29/&gt;);
			pid30 = new XML(&lt;PID.30/&gt;);
			patTheoricalDeathDate = DateUtil.getDate(&apos;yyyy-MM-dd&apos;, patTheoricalDeathDate);
			pid29[&apos;PID.29.1&apos;] = formatBirthDateToHl7(patTheoricalDeathDate);
			pid30[&apos;PID.30.1&apos;] = &apos;N&apos;;
		}
	}
	if ( pid29 &amp;&amp; pid30 ) {
		pid.appendChild(pid29);
		pid.appendChild(pid30);
	}

	return pid;
}

/**
	[HCC] Personalization for identifiers treatment
	@param pid The current pid segment to map
	@param patient XML Node for patient to map
	@param documents XML Nodes for documents to map
*/
function parseDocumentsHCC(pid, patient, documents) {
	for each( document in documents ) {
		var pid3 = new XML(&lt;PID.3/&gt;);		
		var oid = document.system.@value.toString();			
		var pid341 = map(&apos;identifiers&apos;, &apos;OID&apos;, &apos;NAME&apos;, oid);
		var pid343 = map(&apos;identifiers&apos;, &apos;OID&apos;, &apos;TYPE&apos;, oid);
		// Country treatment for oid
		if ( gaSystemsExcludedforReplaceCountry.indexOf(oid) == -1 ) {
			var aSystem = oid.split(&apos;.&apos;);
			var iNumSystemElem = aSystem.length;
			var sIdType = null;
			if ( iNumSystemElem &gt; 0 ) {
				sIdType = aSystem[iNumSystemElem - 1];
			}
			if ( gaIdTypesforCountry.indexOf(sIdType) &gt; -1  &amp;&amp; iNumSystemElem &gt; 1 ) {
				var countryCode = document.extension.(@url==gsExtUrlIdentifierCountry).valueCodeableConcept.coding.code.@value.toString();
				if ( countryCode.length() &gt; 0 ) {
					aSystem.splice(iNumSystemElem - 2, 1, countrCode);
					oid = aSystem.join(&apos;.&apos;);
				}
			}
		}
		var pid342 = oid;
		pid3[&apos;PID.3.1&apos;] = document.value.@value;
		pid3[&apos;PID.3.4&apos;][&apos;PID.3.4.1&apos;] = pid341;
		pid3[&apos;PID.3.4&apos;][&apos;PID.3.4.2&apos;] = pid342;
		pid3[&apos;PID.3.4&apos;][&apos;PID.3.4.3&apos;] = pid343;
		pid.appendChild(pid3);
	}
}

/**
	[HCC] Personalization for names treatment
	@param pid The current pid segment to map
	@param names XML Nodes for names to map
	@return PID9 if created must be appened after prior
*/
function parseNamesHCC(pid, names){
	var nameIdx = 0;
	var pid9 = null;
	for each( name in names ) {
		if ( nameIdx == 0 ) { // Surnames and Names
			var pid5 = new XML(&lt;PID.5/&gt;);
			// Primer Apellido
			pid5[&apos;PID.5.1&apos;] = name.extension.(@url==gsExtUrlFatherFamilyName).valueString.@value.toString();

			// Nombres
			var nombres = name.given[0].@value.toString();
			var aNombres = nombres.split(&apos; &apos;);
			if ( aNombres.length == 2 ) {
				pid5[&apos;PID.5.2&apos;] = aNombres[0];
				pid5[&apos;PID.5.3&apos;] = aNombres[1];
			} else {
				pid5[&apos;PID.5.2&apos;] = nombres;
			}
			pid5[&apos;PID.5.7&apos;] = map(&apos;nameUse&apos;, &apos;FHIR&apos;, &apos;HL7&apos;, name.use.@value);	
			pid.appendChild(pid5);

			// Segundo Apellido
			var pid61 = name.extension.(@url==gsExtUrlMotherFamilyName).valueString.@value.toString();		 
			if ( pid61.length &gt; 0 ) {
				var pid6 = new XML(&lt;PID.6/&gt;);
				pid6[&apos;PID.6.1&apos;]=pid61;
				pid6[&apos;PID.6.7&apos;] = &apos;L&apos;;
				pid.appendChild(pid6);
			}
		} else if ( nameIdx == 1 ) { // Social Name
			pid9 = new XML(&lt;PID.9/&gt;);
			var alias = name.text.@value.toString();
			var aAlias = alias.split(&apos; &apos;);
			if ( aAlias.length == 2 ) {
				pid9[&apos;PID.9.1&apos;] = aAlias[0];
				pid9[&apos;PID.9.2&apos;] = aAlias[1];
			} else {
				pid9[&apos;PID.9.1&apos;] = alias;
			}
		}
		nameIdx++;
	} 
	return pid9;
}

/**
	[HCC] Personalization for address treatment
	@param pid The current pid segment to map
	@param addresses XML Nodes for address to map
*/
function parseAdressHCC(pid, addresses){
	var field;
	for each ( address in addresses ) {
		field = new XML(&lt;PID.11/&gt;);
		var line = &apos;&apos;;
		if ( address.line.length() == 2 ) { // si hay dos líneas cada una a su sitio
			field[&apos;PID.11.1&apos;] = address.line[0].@value.toString();
			field[&apos;PID.11.2&apos;] = address.line[1].@value.toString();
		} else { // si hay un número distinto de líneas todas concatenadas
			var aLines = [];
			for each ( line in address.line ) {
				aLines.push(line.@value.toString());
			}
			line = aLines.join(&apos; &apos;);
			if ( line &amp;&amp; line.length &gt; 0 ) {
				field[&apos;PID.11.1&apos;] = line;				
			}
		}
		
		// extract code and name from extensions
		var cityCode = address.extension.(@url==gsExtUrlAddrCityCode).valueString.@value.toString();
		var stateCode = address.extension.(@url==gsExtUrlAddrStateCode).valueString.@value.toString();
		if ( cityCode &amp;&amp; cityCode.length &gt; 0 ) {
			field[&apos;PID.11.3&apos;][&apos;PID.11.3.1&apos;] = cityCode;
			field[&apos;PID.11.3&apos;][&apos;PID.11.3.2&apos;] = address.city.@value.toString();
		} else {
			field[&apos;PID.11.3&apos;] = address.city.@value.toString();
		}
		if ( stateCode &amp;&amp; stateCode.length &gt; 0 ) {
			field[&apos;PID.11.4&apos;][&apos;PID.11.4.1&apos;] = stateCode;
			field[&apos;PID.11.4&apos;][&apos;PID.11.4.2&apos;] = address.state.@value.toString();
		} else {
			field[&apos;PID.11.4&apos;] = address.state.@value.toString();
		}
		field[&apos;PID.11.5&apos;] = address.postalCode.@value.toString();
		field[&apos;PID.11.6&apos;] = address.country.@value.toString();
		
		field[&apos;PID.11.7&apos;] = map(&apos;addressUse&apos;, &apos;FHIR&apos;, &apos;HL7&apos;, address.use.@value.toString());
		pid.appendChild(field);
	}
}
</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.6.0">
            <id>e089e33f-d7ac-4893-8129-c742f8af77cc</id>
            <name>[HCC] Mapping Extensions</name>
            <revision>1</revision>
            <lastModified>
              <time>1568300315557</time>
              <timezone>America/Santiago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>CHANNEL_DEPLOY</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>GLOBAL_DEPLOY</contextType>
                <contextType>GLOBAL_UNDEPLOY</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>GLOBAL_POSTPROCESSOR</contextType>
                <contextType>CHANNEL_POSTPROCESSOR</contextType>
                <contextType>CHANNEL_BATCH</contextType>
                <contextType>CHANNEL_PREPROCESSOR</contextType>
                <contextType>CHANNEL_ATTACHMENT</contextType>
                <contextType>GLOBAL_PREPROCESSOR</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>CHANNEL_UNDEPLOY</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
[HCC] Mapping extensions for countries, ...
*/

var countries = new Packages.java.util.HashMap();
var nations = new Packages.java.util.HashMap();

function loadCountries() {
	countries.clear();
	var result = sendHttpGet($g(&apos;hncat.fhir.url&apos;) + &apos;/ValueSet/pais?_format=xml&apos;);	
	var respString = EntityUtils.toString(result.getEntity());		
	var respXml = new XML(respString);
	var total = respXml.*::compose.*::include.*::concept.length();;
	for each (var pais in respXml.*::compose.*::include.*::concept) {
		countries.put(pais.*::code.@value.toString(), pais.*::display.@value.toString());
	}
	globalMap.put(&apos;countries&apos;, countries);	
}

function loadNations() {
	nations.clear();
	var result = sendHttpGet($g(&apos;hncat.fhir.url&apos;) + &apos;/ValueSet/nacionalidad?_format=xml&apos;);	
	var respString = EntityUtils.toString(result.getEntity());		
	var respXml = new XML(respString);
	var total = respXml.*::compose.*::include.*::concept.length();;
	for each (var pais in respXml.*::compose.*::include.*::concept) {
		nations.put(pais.*::code.@value.toString(), pais.*::display.@value.toString());
	}
	globalMap.put(&apos;nations&apos;, nations);	
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.6.0">
            <id>4a23c8ef-9e75-4be6-bf44-739ea2af9580</id>
            <name>[HCC] Project Properties</name>
            <revision>1</revision>
            <lastModified>
              <time>1569263862943</time>
              <timezone>America/Santiago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>CHANNEL_DEPLOY</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>GLOBAL_DEPLOY</contextType>
                <contextType>GLOBAL_UNDEPLOY</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>GLOBAL_POSTPROCESSOR</contextType>
                <contextType>CHANNEL_POSTPROCESSOR</contextType>
                <contextType>CHANNEL_BATCH</contextType>
                <contextType>CHANNEL_PREPROCESSOR</contextType>
                <contextType>CHANNEL_ATTACHMENT</contextType>
                <contextType>GLOBAL_PREPROCESSOR</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>CHANNEL_UNDEPLOY</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	[HCC] Load Properties

	@param {Any} base_path - 
	@return {Any} 
*/
// Carga ficheros HCC
var mirth = &apos;mirth/&apos;;
var filesHCC = [mirth+&apos;ihe-hcc.properties&apos;];

function loadPropsHCCFromPath(base_path){
	
	logger.info(&quot;base_path HCC:&quot;+base_path);
	var config = new Packages.org.apache.commons.configuration.CompositeConfiguration(); 

	// Configuracion de entorno. Lee las variables del sistema. Tienen prioridad sobre las definidas en properties
	config.addConfiguration(new Packages.org.apache.commons.configuration.EnvironmentConfiguration());

	// Configuration. Valores por defecto
	for each (entry in configurationMap.entrySet().toArray()){
		$g(entry.getKey(), entry.getValue());
		// Se inyectan sin punto tambien, Mirth no permite . en las claves de los destinos
		$g(entry.getKey().replace(&apos;.&apos;, &apos;_&apos;), entry.getValue());
	}
	
	// Ficheros de configuracion
	for each (file in filesHCC){
		try{			
			config.addConfiguration(new Packages.org.apache.commons.configuration.PropertiesConfiguration(base_path + &apos;/&apos; + file));
		}catch (e){
			//logger.warn(e);
		}
	}
	
	loadPropertiesHCC(config);
}

function loadPropertiesHCC(config){
	//Mapeo de propiedades
	var keys = config.getKeys();
	while (keys.hasNext()){
		var key = keys.next();
		var value = config.getString(key);
		key = key.toLowerCase();
		$g(key,value);
		// Se inyectan sin punto tambien, Mirth no permite . en las claves de los destinos
		$g(key.replace(&apos;.&apos;, &apos;_&apos;),value);
	}
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.6.0">
            <id>598435f6-831e-4e04-a9bf-7710b92daff3</id>
            <name>[HN] ATNA</name>
            <revision>1</revision>
            <lastModified>
              <time>1558089215891</time>
              <timezone>America/Santiago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>CHANNEL_DEPLOY</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>GLOBAL_DEPLOY</contextType>
                <contextType>GLOBAL_UNDEPLOY</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>GLOBAL_POSTPROCESSOR</contextType>
                <contextType>CHANNEL_POSTPROCESSOR</contextType>
                <contextType>CHANNEL_BATCH</contextType>
                <contextType>CHANNEL_PREPROCESSOR</contextType>
                <contextType>CHANNEL_ATTACHMENT</contextType>
                <contextType>GLOBAL_PREPROCESSOR</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>CHANNEL_UNDEPLOY</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/

// Genera los campos a partir del mensaje HL7 v2.x
function generateFieldsAtnaHl7 (msg) {
	// Campos necesarios para ATNA messageAudit

	var sourceUserID = msg[&apos;MSH&apos;][&apos;MSH.4&apos;][&apos;MSH.4.1&apos;].toString() + &apos;|&apos; + msg[&apos;MSH&apos;][&apos;MSH.3&apos;][&apos;MSH.3.1&apos;].toString();
	$g(&apos;sourceUserID&apos;,sourceUserID);

	var sourceHost = &quot;mirth&quot;;
	$g(&apos;sourceHost&apos;, sourceHost);
	
	var destinationUserID = msg[&apos;MSH&apos;][&apos;MSH.6&apos;][&apos;MSH.6.1&apos;].toString() + &apos;|&apos; + msg[&apos;MSH&apos;][&apos;MSH.5&apos;][&apos;MSH.5.1&apos;].toString();
	$g(&apos;destinationUserID&apos;,destinationUserID);

	var participantObjectDetail = msg[&apos;MSH&apos;][&apos;MSH.10&apos;][&apos;MSH.10.1&apos;].toString();
	$g(&apos;participantObjectDetail&apos;,participantObjectDetail);

	var query = SerializerFactory.getSerializer(&apos;HL7V2&apos;).fromXML(msg);
	$g(&apos;consulta&apos;,query);
}

// Genera los campos a partir de los datos de otro canal o del fichero de propiedades
function generateFieldsAtnaFhir () {		
	
	var sourceUserID = $(&apos;msh4.sending.facility&apos;).toString() + &apos;|&apos; +  $(&apos;msh3.sending.application&apos;).toString();
	$g(&apos;sourceUserID&apos;,sourceUserID);

	var sourceHost = &quot;mirth&quot;;
	$g(&apos;sourceHost&apos;, sourceHost);
	
	var destinationUserID = $(&apos;msh6.receiving.facility&apos;).toString() + &apos;|&apos; +  $(&apos;msh5.receiving.application&apos;).toString();
	$g(&apos;destinationUserID&apos;,destinationUserID);
	
}


function sendMessageAtna(type, id){
		
	var port = Packages.java.lang.Integer.parseInt($(&apos;atna.port&apos;));
	var ssl = Packages.java.lang.Boolean.parseBoolean($(&apos;atna.ssl&apos;));
	var sar = Packages.es.indra.hn.hnatna.notificator.SyslogAuditRepositoryFactory.create($(&apos;atna.app&apos;),null,null,
	null,port,$(&apos;atna.protocol&apos;),null,ssl,$(&apos;atna.host&apos;));

	var sourceUserID = $(&apos;sourceUserID&apos;);
	var sourceHost = $(&apos;sourceHost&apos;);
	var destinationUserID = $(&apos;destinationUserID&apos;);
	var participantObjectDetail = $(&apos;participantObjectDetail&apos;);
	var consulta = $(&apos;consulta&apos;);
	var participantObjectID = $(&apos;participantObjectID&apos;);
	var destinationHost = $(&apos;hnpob_fhir_url&apos;);
	var patientIds = [];
	try{
		var patientId = id;
		patientId = patientId.replace(&apos;&amp;&apos;, &apos;&amp;amp;&apos;);
		patientIds[0] = patientId;
	} catch (err) {}
	
	var notif = new Packages.es.indra.hn.hnatna.notificator.AtnaNotificatorImpl(sar);

	//logger.debug(&quot;sourceUserID: &quot; + sourceUserID + &quot; destinationUserID: &quot; + destinationUserID + &quot; destinationHost: &quot; + destinationHost + &quot; destinationUserID: &quot; + destinationUserID + &quot; consulta: &quot; + consulta + &quot; participantObjectDetail: &quot; + participantObjectDetail + &quot; patientIds&quot; + patientIds[0]);  
	if (type == &apos;ITI9-Manager&apos;){
		notif.sendPIXQuery_ITI9_Manager(sourceUserID, sourceHost, destinationUserID, &quot;destinationAltUserId&quot;, destinationHost, destinationUserID, &quot;323&quot;, &quot;D&quot;, consulta, participantObjectDetail, patientIds);
	}
	if (type == &apos;ITI21-Manager&apos;){
		notif.sendPDQ_ITI21_Supplier(sourceUserID, sourceHost, destinationUserID, &quot;destinationAltUserId&quot;, destinationHost, destinationUserID, &quot;323&quot;, &quot;D&quot;, consulta, participantObjectDetail, patientIds);
	}
	if (type == &apos;ITI83-Manager&apos;){
		notif.sendPIXmQuery_ITI83_Manager(sourceUserID, sourceHost, destinationUserID, &quot;destinationAltUserId&quot;, destinationHost, destinationUserID, &quot;323&quot;, &quot;D&quot;, consulta, participantObjectDetail, patientIds);
	}
	if (type == &apos;ITI83-Consumer&apos;){
		notif.sendPIXmQuery_ITI83_Consumer(sourceUserID, sourceHost, destinationUserID, &quot;destinationAltUserId&quot;, destinationHost, destinationUserID, &quot;323&quot;, &quot;D&quot;, consulta, participantObjectDetail, patientIds, &apos;humanUserId&apos;);
	}	
	if (type == &apos;ITI78-Supplier&apos;){
		notif.sendPDQm_ITI78_Supplier(sourceUserID, sourceHost, destinationUserID, &quot;destinationAltUserId&quot;, destinationHost, destinationUserID, &quot;323&quot;, &quot;D&quot;, consulta, participantObjectDetail, patientIds);
	}
	if (type == &apos;ITI78-Consumer&apos;){
		notif.sendPDQm_ITI78_Consumer(sourceUserID, sourceHost, destinationUserID, &quot;destinationAltUserId&quot;, destinationHost, destinationUserID, &quot;323&quot;, &quot;D&quot;, consulta, participantObjectDetail, patientIds, &apos;humanUserId&apos;);
	}	
	logger.info(&quot;mensaje enviado (or something)&quot;);
}


function sendMessageAtna2(type, ids){
		
	var port = Packages.java.lang.Integer.parseInt($(&apos;atna.port&apos;));
	var ssl = Packages.java.lang.Boolean.parseBoolean($(&apos;atna.ssl&apos;));
	var sar = Packages.es.indra.hn.hnatna.notificator.SyslogAuditRepositoryFactory.create($(&apos;atna.app&apos;),null,null,
	null,port,$(&apos;atna.protocol&apos;),null,ssl,$(&apos;atna.host&apos;));

	var sourceUserID = $(&apos;sourceUserID&apos;);
	var sourceHost = $(&apos;sourceHost&apos;);
	var destinationUserID = $(&apos;destinationUserID&apos;);
	var participantObjectDetail = $(&apos;participantObjectDetail&apos;);
	var consulta = $(&apos;consulta&apos;);
	var participantObjectID = $(&apos;participantObjectID&apos;);
	var destinationHost = $(&apos;hnpob_fhir_url&apos;);		
	var notif = new Packages.es.indra.hn.hnatna.notificator.AtnaNotificatorImpl(sar);

	//logger.debug(&quot;sourceUserID: &quot; + sourceUserID + &quot; destinationUserID: &quot; + destinationUserID + &quot; destinationHost: &quot; + destinationHost + &quot; destinationUserID: &quot; + destinationUserID + &quot; consulta: &quot; + consulta + &quot; participantObjectDetail: &quot; + participantObjectDetail + &quot; patientIds&quot; + patientIds[0]);  
	if (type == &apos;ITI9-Manager&apos;){
		notif.sendPIXQuery_ITI9_Manager(sourceUserID, sourceHost, destinationUserID, &quot;destinationAltUserId&quot;, destinationHost, destinationUserID, &quot;323&quot;, &quot;D&quot;, consulta, participantObjectDetail, ids);
	}
	if (type == &apos;ITI21-Manager&apos;){
		notif.sendPDQ_ITI21_Supplier(sourceUserID, sourceHost, destinationUserID, &quot;destinationAltUserId&quot;, destinationHost, destinationUserID, &quot;323&quot;, &quot;D&quot;, consulta, participantObjectDetail, ids);
	}
	if (type == &apos;ITI83-Manager&apos;){
		notif.sendPIXmQuery_ITI83_Manager(sourceUserID, sourceHost, destinationUserID, &quot;destinationAltUserId&quot;, destinationHost, destinationUserID, &quot;323&quot;, &quot;D&quot;, consulta, participantObjectDetail, ids);
	}
	if (type == &apos;ITI83-Consumer&apos;){
		notif.sendPIXmQuery_ITI83_Consumer(sourceUserID, sourceHost, destinationUserID, &quot;destinationAltUserId&quot;, destinationHost, destinationUserID, &quot;323&quot;, &quot;D&quot;, consulta, participantObjectDetail, ids, &apos;humanUserId&apos;);
	}	
	if (type == &apos;ITI78-Supplier&apos;){
		notif.sendPDQm_ITI78_Supplier(sourceUserID, sourceHost, destinationUserID, &quot;destinationAltUserId&quot;, destinationHost, destinationUserID, &quot;323&quot;, &quot;D&quot;, consulta, participantObjectDetail, ids);
	}
	if (type == &apos;ITI78-Consumer&apos;){
		notif.sendPDQm_ITI78_Consumer(sourceUserID, sourceHost, destinationUserID, &quot;destinationAltUserId&quot;, destinationHost, destinationUserID, &quot;323&quot;, &quot;D&quot;, consulta, participantObjectDetail, ids, &apos;humanUserId&apos;);
	}	
	logger.info(&quot;mensaje enviado (or something)&quot;);
}


</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.6.0">
            <id>4ae3d5ba-7b48-4123-ba91-e181235d1d20</id>
            <name>[HN] dates</name>
            <revision>1</revision>
            <lastModified>
              <time>1558089215950</time>
              <timezone>America/Santiago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>CHANNEL_DEPLOY</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>GLOBAL_DEPLOY</contextType>
                <contextType>GLOBAL_UNDEPLOY</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>GLOBAL_POSTPROCESSOR</contextType>
                <contextType>CHANNEL_POSTPROCESSOR</contextType>
                <contextType>CHANNEL_BATCH</contextType>
                <contextType>CHANNEL_PREPROCESSOR</contextType>
                <contextType>CHANNEL_ATTACHMENT</contextType>
                <contextType>GLOBAL_PREPROCESSOR</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>CHANNEL_UNDEPLOY</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	[HN] utilidades para trabajar con fechas
*/
var fhirPattern = &quot;yyyy-MM-dd&apos;T&apos;HH:mm:ssXXX&quot;;
var cxfPattern = &quot;yyyy-MM-dd&apos;T&apos;HH:mm:ss&quot;;
//var hl72xPattern = &quot;yyyyMMddHHmmssZ&quot;;
var hl72xPattern = &quot;yyyyMMddHHmmss&quot;;
var hl72xDatePattern = &quot;yyyyMMdd&quot;;
var hl72xReducePattern = &quot;yyyyMMdd&quot;;
var fhirReducePattern = &quot;yyyy-MM-dd&quot;;
var hl7Pattern = [&quot;MM&quot;, &quot;dd&quot;, &quot;HH&quot;, &quot;mm&quot;, &quot;ss&quot;, &quot;.S&quot;,&quot;S&quot;,&quot;S&quot;,&quot;0&quot;,&quot;1&quot;,&quot;2&quot;,&quot;3&quot;,&quot;4&quot;,&quot;5&quot;,&quot;6&quot;,&quot;7&quot;,&quot;8&quot;,&quot;9&quot;,&quot;Z&quot;];

/**
	retorna un date a partir de un string en hl7
*/
function parseDateFromHL7(hl7Date){
	var builder = new Packages.org.joda.time.format.DateTimeFormatterBuilder().appendYear(4, 4);

	for (var i=0; i&lt;hl7Pattern.length;i++){
		var dateTimeFormatter = Packages.org.joda.time.format.DateTimeFormat.forPattern(hl7Pattern[i]);
		var dateTimeParser = new Packages.org.joda.time.format.DateTimeFormatterBuilder().append(dateTimeFormatter).toParser();
		builder.appendOptional(dateTimeParser);
	}				 
	var formatter  = builder.toFormatter(); 
     return formatter.parseDateTime(hl7Date).toDate();
}

function formatDateToCXF(date){
	return DateUtil.formatDate(cxfPattern, date);	
}

function formatDateToFHIR(date){
	return DateUtil.formatDate(fhirPattern, date);
}

function formatDateToHl7(date){
	var isoFormat = new Packages.java.text.SimpleDateFormat(hl72xPattern);
	isoFormat.setTimeZone(Packages.java.util.TimeZone.getDefault());
	//logger.error(&apos;date &apos; + date);
	return isoFormat.format(date);
	//return DateUtil.formatDate(hl72xPattern, date);
}

function formatBirthDateToHl7(date){
	var isoFormat = new Packages.java.text.SimpleDateFormat(hl72xDatePattern);
	isoFormat.setTimeZone(Packages.java.util.TimeZone.getDefault());
	//logger.error(&apos;date &apos; + date);
	return isoFormat.format(date);
	//return DateUtil.formatDate(hl72xPattern, date);
}

function convertDateToFhir(hl7Date){
	return DateUtil.convertDate(hl72xReducePattern, fhirReducePattern, hl7Date);	
}


function getCurrentDate(){
	return new Packages.java.util.Date();
}

// Calcula la edad a partir de la fecha de nacimiento
function getAge(fecha)
{
        var values=fecha.split(&quot;-&quot;);
        var dia = values[2];
        var mes = values[1];
        var ano = values[0];
 
        // cogemos los valores actuales
        var fecha_hoy = new Date();
        var ahora_ano = fecha_hoy.getYear();
        var ahora_mes = fecha_hoy.getMonth();
        var ahora_dia = fecha_hoy.getDate();
 
        // realizamos el calculo
        var edad = (ahora_ano + 1900) - ano;
        if ( ahora_mes &lt; (mes - 1))
        {
            edad--;
        }
        if (((mes - 1) == ahora_mes) &amp;&amp; (ahora_dia &lt; dia))
        {
            edad--;
        }
        if (edad &gt; 1900)
        {
            edad -= 1900;
        }
	   return edad;
}
</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.6.0">
            <id>2166fb63-efde-459d-bd2e-9cfc8b127cae</id>
            <name>[HN] Error templates</name>
            <revision>1</revision>
            <lastModified>
              <time>1558089215994</time>
              <timezone>America/Santiago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>CHANNEL_POSTPROCESSOR</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>function createFormatNotSupportedErrorResponse(){
	return createOperationOutcome(&apos;error&apos;, &apos;processing&apos;,&apos;not-supported&apos;, 400, null, true); 
}

function createDomainNotSupportedErrorResponse(){
	return createOperationOutcome(&apos;error&apos;, &apos;value&apos;, channelMap.get(&apos;exception&apos;), 400); 
}

function createGenericErrorResponse(httpCode){
	if (httpCode != null){
		return createOperationOutcome(&apos;error&apos;, &apos;processing&apos;, &apos;unknow error&apos;, httpCode);
	}else {
		return createOperationOutcome(&apos;error&apos;, &apos;processing&apos;, &apos;unknow error&apos;, 500);
	}
}

function createSuccessCreateResponse(patientCode){	
	return createOperationOutcome(&apos;information&apos;, &apos;informational&apos;, patientCode, 200);	
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.6.0">
            <id>2164844a-aafc-4515-a61d-f8b38ee1f865</id>
            <name>[HN] FHIR</name>
            <revision>1</revision>
            <lastModified>
              <time>1558089216032</time>
              <timezone>America/Santiago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
 [HN] Dada una url, se desglosa la query de la url en un array de clave valor. Se parsea cada clave y para aquellos valores (mappings) que coincida con los campos, se intenta mapear 
 desde from hasta to.
*/
importPackage(java.lang);

var encoding = &apos;UTF-8&apos;;
var paramSeparatorCode = &apos;%26&apos;;
var paramAsignCode = &apos;%3D&apos;;
var tokenSeparatorCode = &apos;%7C&apos;;

function mapQuery(query, mappings, from, to){
	var queryEncoded = Packages.java.net.URLEncoder.encode(query, encoding);
	var path = &apos;http://x/?&apos; + queryEncoded;
	var url = new Packages.java.net.URL(path);
	return mapUrl(url, mappings, from, to);
}
function mapUrl(url, mappings, from, to){
	var whatDomains = new Packages.java.util.HashMap();
	var query = url.getQuery();
	for each(param in query.split(paramSeparatorCode)){
		var paramArray = param.split(paramAsignCode);
		var name = paramArray[0];
		var value = paramArray[1];
		var decodedValue = Packages.java.net.URLDecoder.decode(value, encoding);
		

		// whath domains
		if (name == &apos;identifier&apos;){
			// Si viene el filtro de whath domains, se elimina y se agregan a una variable
			if (isDomainsRestricted(decodedValue)){
				logger.debug(&apos;isDomainsRestricted replace &apos; + name+paramAsignCode+value);
				query = query.replace(name+paramAsignCode+value, &apos;&apos;);
				var system = decodedValue.replace(tokenSeparatorCode,&apos;&apos;);
				var hnCode = map(&apos;PID.3.4.2&apos;, &apos;FHIR&apos;, &apos;HN&apos;, system);
				whatDomains.put(hnCode+&apos;&apos;, &apos;true&apos;);
			}
		}
		
		for each (field in mappings){
			// mapeo del valor
			if (name == field){
				
				var newValue = map(field, from, to, decodedValue);
				query = query.replace(value, newValue);
			}

		}

		
	}
	//bug fhir, el | no lo interpreta codificado. Revisar en ispob
	query = Packages.java.net.URLDecoder.decode(query, encoding);
	query = query.replace(&apos;|&apos;, tokenSeparatorCode);

	channelMap.put(&apos;whatDomains&apos;, whatDomains);
	
	return query;
	
}

function transformUrl(message, oldUrl, base, removeDefaultPort){
		// Al usar apache como frontend, la url a reemplazar va en la cabecera proxyurl
		var headers = $s(&apos;headers&apos;);
		if (headers.contains(&apos;proxyurl&apos;)){
			base = headers.getHeader(&apos;proxyurl&apos;)+&apos;/fhir&apos;;
		}
		
		base = new java.lang.String(base);
		var stringMessage = new Packages.java.lang.String(message.toString() + &apos;&apos;);
		if (removeDefaultPort){
			stringMessage = stringMessage.replaceAll(&apos;:80&apos;, &apos;&apos;);
		}
		
		// se reemplazan todas las url
		logger.debug(&apos;url: reemplazo de &apos;+ oldUrl + &apos; por &apos; + base);
		stringMessage = stringMessage.replaceAll(oldUrl, base);
		
		// los search-system hay que acoplarlos al modulo destino al que pertenecen
		var pagination = /(^.*fhir)(\?_getpages.*)/;
		if (pagination.test(stringMessage)){
			var result = pagination.exec(stringMessage);
			logger.debug(&apos;url: se reemplazan los search-type&apos;);
			stringMessage = RegExp.$1 +&apos;/&apos;+ $s(&apos;fhirType&apos;) + RegExp.$2;
		
		}
		
		return new XML(stringMessage);
	
}

function getUrlParams(query, paramName){
	var encoded = Packages.java.net.URLEncoder.encode(query, encoding);
	var params = new Array();
	for each (param in encoded.split(paramSeparatorCode)){
		var paramArray = param.split(paramAsignCode);
		var name = paramArray[0];
		var value = paramArray[1];
		if (name == paramName){
			params.push(value.toString());
		}
	}

	return params;	
}



function isDomainsRestricted(value){
	if (isTokenParam(value)){
		if (value.split(tokenSeparatorCode).length == 1){
			return true;
		} else {
			return false;
		}
	}
	return false;
}

//TOKEN
function isTokenParam(value){
	logger.debug(value + &apos; is token? &apos;);
	if (value.contains(tokenSeparatorCode)){
		return true;
	} else {
		return false;
	}
}

function getTokenSystem(token){
	if (isTokenParam(token)){
		return token.split(tokenSeparatorCode)[0];
	}
}

function getTokenCode(token){
	if (isTokenParam(token)){
		return token.split(tokenSeparatorCode)[1];
	}
}
</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.6.0">
            <id>6c4356e1-3a65-47c8-88e7-6bc9cdaccffe</id>
            <name>[HN] FHIR OperationOutcome</name>
            <revision>1</revision>
            <lastModified>
              <time>1558089216070</time>
              <timezone>America/Santiago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>CHANNEL_POSTPROCESSOR</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Creates a FHIR OperationOutcome resource and adds it to the response map with the key &quot;response&quot;.

	@param {String} severity - Indicates whether the issue indicates a variation from successful
		processing. Values: fatal | error | warning | information
	@param {String} code - Describes the type of the issue. The system that creates an
		OperationOutcome SHALL choose the most applicable code from the IssueType value set, and may
		additional provide its own code for the error in the details element. Values: invalid | security |
		processing | transient | informational
	@param {String} details - Additional details about the error. This may be a text description of
		the error, or a system code that identifies the error.
	@param {int} httpStatusCode - The HTTP status code to send back with the response. Defaults to 400
		if not specified.
	@param {Error} e - If included, this will be used to build up the response status message and
		error.
	@param {Boolean} isFormatXML - If true, the resource will be formatted in XML. Otherwise, it will
		be formatted in JSON. If not specified, it will attempt to find the _format parameter in the source
		map, or return XML.
	@return {Response} The created Response object.
*/
function createOperationOutcome(severity, code, diagnostics, httpStatusCode, e, isFormatXML) {	
	if (!httpStatusCode) {
		httpStatusCode = 400;
	}

	if (!isFormatXML) {
		if ($s(&apos;parameters&apos;) &amp;&amp; $s(&apos;parameters&apos;).contains(&apos;_format&apos;)) {
			isFormatXML = !FhirUtil.isJSON($s(&apos;parameters&apos;).getParameter(&apos;_format&apos;));
		} else {
			isFormatXML = true;
		}
	}

	//var outcome = FhirUtil.createOperationOutcome(severity, code, &apos;&apos;);
	var outCome = &lt;OperationOutcome/&gt;
	outCome.issue.severity.@value = severity;
	outCome.issue.code.@value = code;
	outCome.issue.diagnostics.@value = diagnostics;
	//outcome.getIssueFirstRep().setDiagnostics(&apos;aaa&apos;);
	//outcome.getIssueFirstRep().setCode(code);
	//outcome.getIssueFirstRep().setDetails(&apos;&apos;);
	var ctx = new Packages.ca.uhn.fhir.context.FhirContext.forDstu3();
	var xmlparser = ctx.newXmlParser();
	var resource= xmlparser.parseResource(outCome);
	
	var message = isFormatXML ? FhirUtil.toXML(resource) : FhirUtil.toJSON(resource);
	responseMap.put(&apos;response&apos;, FhirResponseFactory.getResponse(message, httpStatusCode, isFormatXML ? FhirUtil.getMIMETypeXML() : FhirUtil.getMIMETypeJSON()));
	var response = new Response(message);
	response.setStatusMessage(severity.toUpperCase() + &apos; OperationOutcome created with status &apos; + httpStatusCode + &apos;.&apos;);
	if (httpStatusCode &gt;= 400) {
		response.setStatus(Status.ERROR);

		if (e) {
			var customMessage = &apos;Channel &apos; + channelName + &apos;: &apos;;
			if (e.rhinoException) {
				customMessage += &apos;Error on line &apos; + e.rhinoException.lineNumber() + &apos;: &apos;;
			}
			customMessage += e.toString();
	
			var errorContent = com.mirth.connect.util.ErrorMessageBuilder.buildErrorMessage(&apos;FHIR Listener&apos;, customMessage, e.javaException || null);
			if (e.javaException) {
				logger.error(errorContent, e.javaException);	
			} else {
				logger.error(errorContent);
			}
			response.setError(errorContent);
		}
	}
	return response;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.6.0">
            <id>6bee5d96-fcb9-4a99-ae76-46c64f5c4b39</id>
            <name>[HN] format</name>
            <revision>2</revision>
            <lastModified>
              <time>1559252319562</time>
              <timezone>America/Santiago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>CHANNEL_POSTPROCESSOR</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>CHANNEL_PREPROCESSOR</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
Simplifica el uso de la clase String.format para hacer mas legible el codigo
*/
function $f() {
	var format = arguments[0];
	var args = [];
	for (var i=1; i&lt;arguments.length; i++){
		args.push(arguments[i])
	}
	return Packages.java.lang.String.format(format, args);
}

function isEmptyStr(str) {
    return (!str || 0 === str.length || str == &apos;&apos;);
}
</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.6.0">
            <id>402284ed-5d61-4edc-800a-40fd61b7a5f1</id>
            <name>[HN] HL7 V2.x Utils</name>
            <revision>2</revision>
            <lastModified>
              <time>1559252319764</time>
              <timezone>America/Santiago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>function parsePatientJsonToPid(patient) {
	
	var pid = new XML(&lt;PID&gt;&lt;/PID&gt;);
			
	for each (identifier in patient[&apos;identifier&apos;]){
		var pid3 = new XML(&lt;PID.3&gt;&lt;/PID.3&gt;);		
		var oid = identifier[&apos;system&apos;];						
		var pid341 = map(&apos;identifiers&apos;, &apos;OID&apos;, &apos;NAME&apos;, oid);
		var pid342 = oid;
		var pid343 = map(&apos;identifiers&apos;, &apos;OID&apos;, &apos;TYPE&apos;, oid);
		pid3[&apos;PID.3.1&apos;] = identifier[&apos;value&apos;];
		pid3[&apos;PID.3.4&apos;][&apos;PID.3.4.1&apos;] = pid341;
		pid3[&apos;PID.3.4&apos;][&apos;PID.3.4.2&apos;] = pid342;
		pid3[&apos;PID.3.4&apos;][&apos;PID.3.4.3&apos;] = pid343;
		pid.appendChild(pid3);			
	}	


	for each (name in patient[&apos;name&apos;]){	
	
		var pid5 = new XML(&lt;PID.5&gt;&lt;/PID.5&gt;);

		// apellido 1
		try{
			pid5[&apos;PID.5.1&apos;] = name[&apos;extension&apos;][0][&apos;valueString&apos;].toString();
		} catch (error){}
		
		// nombre				
		pid5[&apos;PID.5.2&apos;] = name[&apos;given&apos;][0].toString();
	
		pid5[&apos;PID.5.7&apos;] = &apos;L&apos;;
	     
		pid.appendChild(pid5);

		// apellido 2
		try{		
			var pid61 = name[&apos;extension&apos;][1][&apos;valueString&apos;].toString();		 
			if (pid61.length &gt; 0){
				var pid6 = new XML(&lt;PID.6&gt;&lt;/PID.6&gt;);
				pid6[&apos;PID.6.1&apos;]=pid61;
				pid6[&apos;PID.6.7&apos;] = &apos;L&apos;;
				pid.appendChild(pid6);
			}
		} catch (error) {}	
	}

	try{
		var date = DateUtil.getDate(&apos;yyyy-MM-dd&apos;, patient[&apos;birthDate&apos;]);
		pid[&apos;PID.7&apos;] = formatBirthDateToHl7(date);
	} catch (err){}
	
	try{	
		pid[&apos;PID.8&apos;] = map(&apos;administrativeGender&apos;,&apos;FHIR&apos;,&apos;HL7&apos;,patient[&apos;gender&apos;]);
	} catch (err){}	
	
	try{
		for each(address in patient[&apos;address&apos;]){
			field = new XML(&lt;PID.11&gt;&lt;/PID.11&gt;);
			var line = &apos;&apos;;
			for each (addressLine in address[&apos;line&apos;]){
				if (line == &apos;&apos;){
					line = addressLine;
				}else {
					line = line + &apos; &apos; + addressLine;
				}
			}
					if (line != undefined){
				field[&apos;PID.11.1&apos;] = line;				
			}		
			
			if (address[&apos;city&apos;] != undefined){
				field[&apos;PID.11.3&apos;] = address[&apos;city&apos;];
			}
			if (address[&apos;state&apos;] != undefined){
				field[&apos;PID.11.4&apos;] = address[&apos;state&apos;];
			}
			if (address[&apos;postalCode&apos;] != undefined){
				field[&apos;PID.11.5&apos;] = address[&apos;postalCode&apos;];
			}
			if (address[&apos;country&apos;] != undefined){
				field[&apos;PID.11.6&apos;] =  address[&apos;country&apos;];		
			}
			field[&apos;PID.11.7&apos;] = map(&apos;addressUse&apos;, &apos;FHIR&apos;, &apos;HL7&apos;, address[&apos;use&apos;]);
			pid.appendChild(field);
		}
	} catch (err) {}	
	return pid;
	
}

function parsePatientXmlToPid(i,patient){	
	var pid = createSegment(&apos;PID&apos;);
			
	pid[&apos;PID.1&apos;][&apos;PID.1.1&apos;] = i;
	pid[&apos;PID.2&apos;][&apos;PID.2.1&apos;] = patient.id.@value;

	// Documentos
	var an = &apos;&apos;;
	try{
		an = parseDocuments(pid, patient, patient[&apos;identifier&apos;]);		
	} catch (error) {
		logger.error(&quot;Error mapeando documentos: &quot; + error)
	}
	
	// Nombre  
	try {              
		parseNames(pid, patient[&apos;name&apos;]);	
	} catch (error) {
		logger.error(&quot;Error mapeando nombre: &quot; + error);
	}
	
	// Fecha nacimiento
	try{
		var date = DateUtil.getDate(&quot;yyyy-MM-dd&quot;, patient[&apos;birthDate&apos;][&apos;@value&apos;]);
		pid[&apos;PID.7&apos;][&apos;PID.7.1&apos;] = formatBirthDateToHl7(date);
	} catch (error) {}	

	// Sexo
	try{
		pid[&apos;PID.8&apos;][&apos;PID.8.1&apos;] = map(&apos;administrativeGender&apos;,&apos;FHIR&apos;, &apos;HL7&apos;, patient[&apos;gender&apos;][&apos;@value&apos;]);
	} catch (error) {}	

	// Direccion
	try{
		parseAdress(pid, patient[&apos;address&apos;]);
	} catch (error) {}

	// Account number
	try{	
		if (an.length() &gt; 0){				
			pid[&apos;PID.18&apos;][&apos;PID.18.1&apos;] = an;
		}
	} catch (error) {}
	
	return pid;
}


function parseDocuments(pid, patient, documents){
	// ACxxxx. PN
	//var field = parseDocument(&lt;PID.3&gt;&lt;/PID.3&gt;, patient[&apos;id&apos;][&apos;@value&apos;], patientInternalCode);
	//pid.appendChild(field);
	for each(document in documents){
		var pid3 = new XML(&lt;PID.3&gt;&lt;/PID.3&gt;);		
		var hnCode = document.system.@value;			
		if (hnCode == &apos;urn:oid:an&apos;){
			// PID.18 account number
			var an = document.value.@value;
		} else {									
			var pid341 = map(&apos;identifiers&apos;, &apos;OID&apos;, &apos;NAME&apos;, hnCode.toString());
			var pid342 = hnCode;
			var pid343 = map(&apos;identifiers&apos;, &apos;OID&apos;, &apos;TYPE&apos;, hnCode.toString());
			pid3[&apos;PID.3.1&apos;] = document.value.@value;
			pid3[&apos;PID.3.4&apos;][&apos;PID.3.4.1&apos;] = pid341;
			pid3[&apos;PID.3.4&apos;][&apos;PID.3.4.2&apos;] = pid342;
			pid3[&apos;PID.3.4&apos;][&apos;PID.3.4.3&apos;] = pid343;
			pid.appendChild(pid3);
		}	
	}
	return an;	
}

function parseDocument(node, value, type, system){
	var field = new XML(node);
	field[&apos;PID.3.1&apos;] = value;

	var pid341 = map(&apos;PID.3.4.1&apos;, &apos;HN&apos;, &apos;HL7&apos;, type);
	if (pid341 != null &amp;&amp; pid341 != &apos;&apos;){
		field[&apos;PID.3.4&apos;][&apos;PID.3.4.1&apos;] = map(&apos;PID.3.4.1&apos;, &apos;HN&apos;, &apos;HL7&apos;, type) ;
	}
	
	//var pid342 = map(&apos;PID.3.4.2&apos;, &apos;HN&apos;, &apos;HL7&apos;, type);
	var pid342 = system;
	// si el system me viene vacio (search), ponemos el type
	if (pid342 == null || pid342.length == 0){
		pid342=type;
	}
	if (pid342 != null &amp;&amp; pid342 != &apos;&apos;){
		//field[&apos;PID.3.4&apos;][&apos;PID.3.4.2&apos;] =pid342;
		field[&apos;PID.3.4&apos;][&apos;PID.3.4.2&apos;] =pid342;
	}
	
	var pid343 = map(&apos;PID.3.4.3&apos;, &apos;HN&apos;, &apos;HL7&apos;, type);
	if (pid343 != null &amp;&amp; pid343 != &apos;&apos;){
		field[&apos;PID.3.4&apos;][&apos;PID.3.4.3&apos;] = pid343;
	}

	var pid35 =  map(&apos;PID.3.5&apos;,&apos;HN&apos;, &apos;HL7&apos;, type);
	if (pid35 != null &amp;&amp; pid35 != &apos;&apos;){
		//field[&apos;PID.3.5&apos;] = pid35;
		// No hacemos mapeo, ponemos lo que nos viene.
		field[&apos;PID.3.5&apos;] = type;
	}
	return field;
}

function parseNames(pid, names){
	var field;

	for each(name in names){
		field = new XML(&lt;PID.5&gt;&lt;/PID.5&gt;);
		try{
			field[&apos;PID.5.1&apos;] = name[&apos;extension&apos;][0][&apos;valueString&apos;][&apos;@value&apos;];
		} catch (error){}
		try{	
			var i = &apos;0&apos;;
			var nombre = &apos;&apos;;
			for each(given in name[&apos;given&apos;]){								
			     nombre = new String(given[&apos;@value&apos;].toString());
				if (i == &apos;0&apos;){					
					field[&apos;PID.5.2&apos;] = nombre;
					i = &apos;1&apos;;
				} else {
					field[&apos;PID.5.3&apos;] = nombre;
				}
			}
			/*
			var nombre = name[&apos;given&apos;][&apos;@value&apos;].toString();
			if (nombre.length == 0){
				nombre = name[&apos;text&apos;][&apos;@value&apos;].toString();	
			}
			*/
			//field[&apos;PID.5.2&apos;] = nombre;
		} catch (error){}	
		field[&apos;PID.5.7&apos;] = map(&apos;nameUse&apos;, &apos;FHIR&apos;, &apos;HL7&apos;, name[&apos;use&apos;][&apos;@value&apos;]);	
		pid.appendChild(field);
		// apellido 2
		try{		
			var pid61 = name[&apos;extension&apos;][1][&apos;valueString&apos;][&apos;@value&apos;].toString();		 
			if (pid61.length &gt; 0){
				var pid6 = new XML(&lt;PID.6&gt;&lt;/PID.6&gt;);
				pid6[&apos;PID.6.1&apos;]=pid61;
				pid6[&apos;PID.6.7&apos;] = &apos;L&apos;;
				pid.appendChild(pid6);
			}
		} catch (error) {}	
	}
}

function parseAdress(pid, address){
	var field;
		
	for each(addres in address){
		field = new XML(&lt;PID.11&gt;&lt;/PID.11&gt;);
		var line = &apos;&apos;;
		for each (addresLine in addres[&apos;line&apos;]){
			if (line == &apos;&apos;){
				line = addresLine[&apos;@value&apos;];
			}else {
				line = line + &apos; &apos; + addresLine[&apos;@value&apos;];
			}
		}
		field[&apos;PID.11.1&apos;] = line;
		field[&apos;PID.11.3&apos;] = addres[&apos;city&apos;][&apos;@value&apos;];
		field[&apos;PID.11.4&apos;] = addres[&apos;state&apos;][&apos;@value&apos;];
		field[&apos;PID.11.5&apos;] = addres[&apos;postalCode&apos;][&apos;@value&apos;];
		field[&apos;PID.11.6&apos;] =  addres[&apos;country&apos;][&apos;@value&apos;];
		field[&apos;PID.11.7&apos;] = map(&apos;addressUse&apos;, &apos;FHIR&apos;, &apos;HL7&apos;, addres[&apos;use&apos;][&apos;@value&apos;]);
		pid.appendChild(field);
	}
}


function parsePatientIdentifierJsonToPid(patient, domains) {	
	var pid = new XML(&lt;PID&gt;&lt;/PID&gt;);	
	for each (identifier in patient[&apos;identifier&apos;]){							
		var oid = identifier[&apos;system&apos;];					
		//var posicion = domains.indexOf(hl7Code);
		//if (posicion &gt;= 0){
			var pid3 = new XML(&lt;PID.3&gt;&lt;/PID.3&gt;);				
			/*
			var pid341 = map(&apos;PID.3.4.1&apos;, &apos;HN&apos;, &apos;HL7&apos;, hnCode);
			var pid342 = map(&apos;PID.3.4.2&apos;, &apos;HN&apos;, &apos;HL7&apos;, hnCode);
			var pid343 = map(&apos;PID.3.4.3&apos;, &apos;HN&apos;, &apos;HL7&apos;, hnCode);
			*/
			var pid341 = map(&apos;identifiers&apos;, &apos;OID&apos;, &apos;NAME&apos;, oid);			
			var pid342 = oid;
			var pid343 = map(&apos;identifiers&apos;, &apos;OID&apos;, &apos;TYPE&apos;, oid);
			pid3[&apos;PID.3.1&apos;] = identifier[&apos;value&apos;];
			pid3[&apos;PID.3.4&apos;][&apos;PID.3.4.1&apos;] = pid341;
			pid3[&apos;PID.3.4&apos;][&apos;PID.3.4.2&apos;] = pid342;
			pid3[&apos;PID.3.4&apos;][&apos;PID.3.4.3&apos;] = pid343;
			pid.appendChild(pid3);			
		//}
	}	

	field = new XML(&lt;PID.5&gt;&lt;/PID.5&gt;);				
	field[&apos;PID.5.7&apos;] = &apos;S&apos;;
	pid.appendChild(field);
	
	return pid;
}
</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.6.0">
            <id>3ae5052c-4f33-4931-acfc-deb9231aebe5</id>
            <name>[HN] HTTP Sender</name>
            <revision>4</revision>
            <lastModified>
              <time>1561050064710</time>
              <timezone>America/Santiago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>CHANNEL_DEPLOY</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>GLOBAL_DEPLOY</contextType>
                <contextType>GLOBAL_UNDEPLOY</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>GLOBAL_POSTPROCESSOR</contextType>
                <contextType>CHANNEL_POSTPROCESSOR</contextType>
                <contextType>CHANNEL_BATCH</contextType>
                <contextType>CHANNEL_PREPROCESSOR</contextType>
                <contextType>CHANNEL_ATTACHMENT</contextType>
                <contextType>GLOBAL_PREPROCESSOR</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>CHANNEL_UNDEPLOY</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>importPackage(org.apache.http.impl.client);
importPackage(org.apache.http.client.methods);
importPackage(org.apache.http.entity);
importPackage(java.lang);
importPackage(java.net);

function sendHttpGet(targetUrl) {
	var get = new HttpGet(new String(targetUrl));
	return sendHttpMethod(targetUrl, null, get);
}

function sendHttpPost(targetUrl, attachment) {
	var post = new HttpPost(new String(targetUrl));
	return sendHttpMethod(targetUrl, attachment, post, true);
}

function sendHttpPut(targetUrl, attachment) {
	var put = new HttpPut(new String(targetUrl));
	return sendHttpMethod(targetUrl, attachment, put, true);
}

function sendHttpMethod(targetUrl, attachment, method, refresh) {
	var client = getHttpClient();
	//var token = getToken(moduleUrl);
	var token = getClientCredentialsToken();	
	method.addHeader(&apos;Authorization&apos;, &apos;Bearer &apos;+token);
	method.setHeader(&quot;Accept&quot;, &quot;application/xml&quot;);
	method.setHeader(&quot;Content-Type&quot;, &quot;application/xml&quot;);
	if (attachment != null){
		method.setEntity(new StringEntity(attachment, &quot;UTF-8&quot;));
	}
	logger.debug(&apos;HTTP: &apos;+targetUrl+&apos;; authorization: &apos;+ token+&apos;; attachment: &apos;+ attachment);
	
	var response = client.execute(method);
	switch (response.getStatusLine().getStatusCode()) {
		case 200:
			return response;
		case 401:
			logger.debug(&apos;invalid token&apos;);
			if (refresh == false){
				throw &quot;Error. No se ha podido usar el token&quot;	
			} else {
				// El token es invalido, se vuelve a generar
				logger.debug(&apos;refresh token&apos;);
				removeToken();	
				return sendHttpMethod(moduleUrl, targetUrl, attachment, put, false);
			}
			break;
		default:
			return response;	
	}
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.6.0">
            <id>225ffeb9-b1ff-400b-adc3-4bd61292e4f6</id>
            <name>[HN] properties</name>
            <revision>2</revision>
            <lastModified>
              <time>1559252319941</time>
              <timezone>America/Santiago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>CHANNEL_DEPLOY</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>GLOBAL_DEPLOY</contextType>
                <contextType>GLOBAL_UNDEPLOY</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>GLOBAL_POSTPROCESSOR</contextType>
                <contextType>CHANNEL_POSTPROCESSOR</contextType>
                <contextType>CHANNEL_BATCH</contextType>
                <contextType>CHANNEL_PREPROCESSOR</contextType>
                <contextType>CHANNEL_ATTACHMENT</contextType>
                <contextType>GLOBAL_PREPROCESSOR</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>CHANNEL_UNDEPLOY</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	[HN] Load Properties

	@param {Any} base_path - 
	@return {Any} 
*/
// Carga ficheros HN
var connectathon = &apos;connectathon/&apos;;
var iscore = &apos;iscore/conf/&apos;;
var mirth = &apos;mirth/&apos;;
var files = [&apos;host.properties&apos;, &apos;password.properties&apos;, &apos;integration.properties&apos;, iscore+&apos;sso.properties&apos;, iscore+&apos;jms.properties&apos;, mirth+&apos;mirth.properties&apos;, mirth+&apos;ihe-xds.properties&apos;];

function loadPropertiesFromPath(base_path){
	
	logger.info(&quot;base_path:&quot;+base_path);
	var config = new Packages.org.apache.commons.configuration.CompositeConfiguration(); 

	// Configuracion de entorno. Lee las variables del sistema. Tienen prioridad sobre las definidas en properties
	config.addConfiguration(new Packages.org.apache.commons.configuration.EnvironmentConfiguration());

	// Configuration. Valores por defecto
	for each (entry in configurationMap.entrySet().toArray()){
		$g(entry.getKey(), entry.getValue());
		// Se inyectan sin punto tambien, Mirth no permite . en las claves de los destinos
		$g(entry.getKey().replace(&apos;.&apos;, &apos;_&apos;), entry.getValue());
	}
	
	// Ficheros de configuracion
	for each (file in files){
		try{
			config.addConfiguration(new Packages.org.apache.commons.configuration.PropertiesConfiguration(base_path + &apos;/&apos; + file));
		}catch (e){
			//logger.warn(e);
		}
	}
	
	loadProperties(config);
}

function loadProperties(config){
	//Mapeo de propiedades
	var keys = config.getKeys();
	while (keys.hasNext()){
		var key = keys.next();
		var value = config.getString(key);
		key = key.toLowerCase();
		$g(key,value);
		// Se inyectan sin punto tambien, Mirth no permite . en las claves de los destinos
		$g(key.replace(&apos;.&apos;, &apos;_&apos;),value);
	}
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.6.0">
            <id>e17d0b29-30c5-4d8b-b14a-d9c215d7f453</id>
            <name>[HN] security</name>
            <revision>8</revision>
            <lastModified>
              <time>1561132909386</time>
              <timezone>America/Santiago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>CHANNEL_DEPLOY</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>GLOBAL_DEPLOY</contextType>
                <contextType>GLOBAL_UNDEPLOY</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>GLOBAL_POSTPROCESSOR</contextType>
                <contextType>CHANNEL_POSTPROCESSOR</contextType>
                <contextType>CHANNEL_BATCH</contextType>
                <contextType>CHANNEL_PREPROCESSOR</contextType>
                <contextType>CHANNEL_ATTACHMENT</contextType>
                <contextType>GLOBAL_PREPROCESSOR</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>CHANNEL_UNDEPLOY</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	[HN] security
*/

importPackage(org.apache.http.impl.client);
importPackage(org.apache.http.client.methods);
importPackage(org.apache.http.client.entity);
importPackage(org.apache.http.entity);
importPackage(org.apache.http.util);
importPackage(java.util);
importPackage(org.apache.http.message);
importPackage(java.lang);
importPackage(javax.json);
importPackage(java.io);

var key = &apos;mirth.security.token&apos;;

function removeToken(){
	globalMap.remove(key);
}

function validToken(token){	
	try{		
		token = token + &quot;&quot;;
		var payload = token.split(&apos;.&apos;)[1];	
		var decode = FileUtil.decode(payload);	
		var payloadDecode = new java.lang.String(decode, &quot;UTF-8&quot;);	
		var reader = Json.createReader(new StringReader(payloadDecode));
		var json = reader.readObject();		
		// Se obtiene la fecha de expiracion del campo exp del token
		var segundosExp = json.getInt(&quot;exp&quot;);	
		logger.debug(&quot;segundosExp: &quot; + segundosExp);		
		// Se resta 3 minutos para asegurar que el token sigue siendo valido para los diferentes destination del canal
		segundosExp = segundosExp - 180;		
		var expDate = new Date(0);	
		expDate.setUTCSeconds(segundosExp);
		logger.debug(&quot;Fecha expiracion token: &quot; + expDate);
		if (expDate &lt;= new Date()){
			return false;	
		} else {
			return true;
		}	
	} catch (err){
		return false;	
	}
}

// deprecated. Esta funcion no deberia de usarse. 
// Tenemos que usar getClientCredentialsToken();
function getToken(moduleUrl){
	var token = $g(key);	
	logger.debug(&apos;key: &apos; + key);
	logger.debug(&apos;token obtenido: &apos; + token);
	if (token == null || token.length == 0){
		logger.debug(&apos;get token&apos;);
		token = getClientCredentialsToken();
		$g(key, token);
	}
	return token;
}


function getClientCredentialsToken(){	
	var token = globalMap.get(key);	
	//logger.debug(&quot;TOKEN: &quot; + token);
	if (token != null &amp;&amp; validToken(token)){
		return token;
	}
	
	logger.debug(&quot;token caducado. Obteniendo token nuevo.&quot;)
	var client = getHttpClient();
	var method = new HttpPost($g(&apos;keycloak.url.initial&apos;));
	var params = new ArrayList();
	params.add(new BasicNameValuePair(&quot;grant_type&quot;, &quot;password&quot;));
	params.add(new BasicNameValuePair(&quot;client_id&quot;, $g(&apos;keycloak.client&apos;)));
	params.add(new BasicNameValuePair(&quot;username&quot;, $g(&apos;keycloak.user&apos;)));
	var pass = Packages.java.lang.String(FileUtil.decode($g(&apos;keycloak.pass&apos;).toString()));
	params.add(new BasicNameValuePair(&quot;password&quot;, pass));
	method.setEntity(new UrlEncodedFormEntity(params));
	var response = client.execute(method);
	switch (response.getStatusLine().getStatusCode()) {
		case 200:
			var entity = response.getEntity();
			var content = EntityUtils.toString(entity);
			var reader = Json.createReader(new StringReader(content));
			var json = reader.readObject();
			var token = json.getString(&quot;access_token&quot;);
			//validToken(token);
			globalMap.put(key, token);
			return token;
			//return json.getString(&quot;access_token&quot;);
		default:
			logger.error(response);
			throw &quot;Error. No se ha podido obtener el token&quot;;
		}
}

function getClientCredentialsTokenByToken(requestJWT){
	
	var client = getHttpClient();
	
	var method = new HttpPost(&apos;http://homologacionhcc.indra.es/auth/realms/hnrole/protocol/openid-connect/token-from-external-jwt&apos;);
	logger.debug(&apos;method: &apos; + method);
	method.addHeader(&quot;Content-Type&quot;, &quot;application/x-www-form-urlencoded&quot;);

	//create entity
	var entity = new StringEntity(&quot;client_id=hnrole&amp;subject_token=&quot; + requestJWT); 

	//add entity to BODY
	method.setEntity(entity);	
	var response = client.execute(method);
	logger.debug(&apos;response: &apos; + response);
	switch (response.getStatusLine().getStatusCode()) {
		case 200:
			var entity = response.getEntity();
			var content = EntityUtils.toString(entity);
			var reader = Json.createReader(new StringReader(content));
			var json = reader.readObject();
			return json.getString(&quot;access_token&quot;);
		default:
			logger.error(response);
			throw &quot;Error. No se ha podido obtener el token&quot;;
		}
}
</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.6.0">
            <id>f9548b83-c6cf-4cdd-a983-7fea03ec2832</id>
            <name>[HN] Validate Permits</name>
            <revision>1</revision>
            <lastModified>
              <time>1559252320032</time>
              <timezone>America/Santiago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>CHANNEL_POSTPROCESSOR</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>CHANNEL_PREPROCESSOR</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**

	[HN] Validate Permits
	
*/
function validatePerm(token,perm) {
	logger.debug(&quot;Code Templates - validatePerm - token : &quot; + token);
	logger.debug(&quot;Code Templates - validatePerm - perm : &quot; + perm);
	var jwt = new String(token);

	//Obtenemos el payload 
	var payload =jwt.split(&apos;.&apos;)[1];
	logger.debug(&quot;Code Templates - validatePerm - payload : &quot; + payload); 
	var payloadDecoded = new Packages.java.lang.String(Packages.java.util.Base64.getDecoder().decode(payload),&quot;UTF-8&quot;);

	//Obtenemos los permisos
	var payLoadJson = JSON.parse(payloadDecoded);
	logger.debug(&quot;Code Templates - validatePerm - payLoadJson - permisos: &quot; + payLoadJson[&quot;realm_access.roles&quot;]);
	
	//Comprobamos que no venga vacío.
	if(isEmptyStr(payLoadJson[&quot;realm_access.roles&quot;])) {
		return false;
	}
	var realm_access = new String(payLoadJson[&quot;realm_access.roles&quot;].toString());
	var permArray = realm_access.split(&apos;,&apos;);
	
	for (var i = 0; i &lt; permArray.length; i++) {
		if (permArray[i].toString() == perm.toString()) {
			return true;
		}
	}
	return false;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.6.0">
            <id>9aae54d4-8d3d-4d9a-9cbb-011c36e86eda</id>
            <name>[HN] XDS</name>
            <revision>9</revision>
            <lastModified>
              <time>1562705222655</time>
              <timezone>America/Santiago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**

	[HN] XDS
	
*/

const textRepository = &apos;repository.xds.services.endpoint&apos;; 

function getEndpointRepoRUT(rut) {
	// repository endpoint by default
	var endpoint = $(&apos;repository.xds.services.endpoint&apos;);
	if(!isEmptyStr(rut)){
		var cad = new String(rut);
		var rutInteger = cad.replace(new RegExp(&apos;[^0-9]&apos;, &apos;g&apos;), &apos;&apos;);
		var rutEndpoint = textRepository + (rutInteger % $(&apos;repository.xds.instances&apos;));
		if(!isEmptyStr($(rutEndpoint))){
			endpoint = $(rutEndpoint);
		}
	}
	return endpoint;
}

function getValueRUTPatient(xmlPatient){
	var value = &quot;&quot;;
	try{
		var identifiers = xmlPatient.*::[&apos;identifier&apos;];
		var iden;
		var rutBySystem;

		for each (identifier in identifiers){
			iden = new XML(identifier);
			rutBySystem = iden.*::[&apos;system&apos;].@value.toString();
			if (!isEmptyStr(rutBySystem) &amp;&amp; rutBySystem == $(&apos;system.id.control.rep&apos;)) {
				value = iden.*::[&apos;value&apos;].@value.toString();
			} else{
				var rutByCoding = iden.*::[&apos;type&apos;].*::[&apos;coding&apos;].*::[&apos;code&apos;].@value.toString();
				if(!isEmptyStr(rutByCoding) &amp;&amp; rutByCoding == $(&apos;code.id.control.rep&apos;)){
					value = iden.*::[&apos;value&apos;].@value.toString();
				}
			}	
		}
	}catch(err){
		channelMap.put(&quot;xdsCTxmlPatient&quot;,xmlPatient);
		logger.info(&quot;[HN] XDS - template: It has not been possible to get the patient&apos;s identifier&quot;);
	}
	return value;
}

function getEndpointRepoID(uniqueId) {
	// repository endpoint by default
	var endpoint = $(&apos;repository.xds.services.endpoint&apos;);
	if(!isEmptyStr(uniqueId)){
		var rutEndpoint = $(uniqueId);
		if(!isEmptyStr(rutEndpoint)){
			endpoint = rutEndpoint;
		}
	}
	return endpoint;
}

function isBase64(document){
	try {
    		Packages.java.util.Base64.getDecoder().decode(document.getBytes());
    		return true;
	} catch(err) {
    		return false;
	}
}
</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.6.0">
            <id>ce8bc9ca-4820-4614-973d-c98aa1c265ae</id>
            <name>[IHS] SSL</name>
            <revision>1</revision>
            <lastModified>
              <time>1558089216294</time>
              <timezone>America/Santiago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>CHANNEL_DEPLOY</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>GLOBAL_DEPLOY</contextType>
                <contextType>GLOBAL_UNDEPLOY</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>GLOBAL_POSTPROCESSOR</contextType>
                <contextType>CHANNEL_POSTPROCESSOR</contextType>
                <contextType>CHANNEL_BATCH</contextType>
                <contextType>CHANNEL_PREPROCESSOR</contextType>
                <contextType>CHANNEL_ATTACHMENT</contextType>
                <contextType>GLOBAL_PREPROCESSOR</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>CHANNEL_UNDEPLOY</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>importPackage(org.apache.http.impl.client);
importPackage(org.apache.http.conn.ssl);
importPackage(org.apache.http.client);
importPackage(javax.net.ssl);


function setProtocolHTTPS() {
	//Establecemos para protocolo seguro por defecto que sea gestionado por la clase SSLProtocolSocketFactory
	//Esta clase ya buscará en el cacerts de la maquina virtual el certificado y usara la keyStore y trustStore como deba.
	var myhttps = new Packages.org.apache.commons.httpclient.protocol.Protocol(&quot;https&quot;, new Packages.org.apache.commons.httpclient.protocol.SSLProtocolSocketFactory(), 443)
    Packages.org.apache.commons.httpclient.protocol.Protocol.registerProtocol(&quot;https&quot;, myhttps);
}

function getHttpClient() {
	var builder = HttpClientBuilder.create();
	var sslContext = Packages.org.apache.http.ssl.SSLContextBuilder.create().loadTrustMaterial(new TrustSelfSignedStrategy()).build();
	var allowAllHosts = new NoopHostnameVerifier();
	var connectionFactory = new SSLConnectionSocketFactory(sslContext, allowAllHosts);
	builder.setSSLSocketFactory(connectionFactory);				
	var client = builder.build();
	return client;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.6.0">
            <id>20f2b000-3543-45a3-9e62-70b85cffd53b</id>
            <name>ADT --&gt; Patient</name>
            <revision>4</revision>
            <lastModified>
              <time>1569263863206</time>
              <timezone>America/Santiago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>function adtToPatient(adtMessage) {	
	var msh = adtMessage.MSH;
	var pid = adtMessage.PID;
	var patient = &lt;Patient&gt;&lt;/Patient&gt;;
	mapNationality(pid, patient);
	mapActive(msh, patient);
	mapIdentifiers(pid, patient);
	mapNames(pid, patient);
	mapTelecoms(pid, patient);
	mapGender(pid, patient);
	mapBirthDate(pid, patient);
	mapAddress(pid, patient);
	mapManagingOrganization(msh, patient);
	mapMaritalStatus(pid, patient);
	mapPaisNacimiento(pid, patient);
	mapExtensiones(pid, patient);
	return patient;
}

function mapNationality(pid, patient){
	try{
		for each (pid28 in pid[&apos;PID.28&apos;]){
			var nationality = pid28[&apos;PID.28.1&apos;].toString();
			if (nationality.length &gt; 0){
				patient.appendChild(createExtensionCodeNationality(&apos;http://hl7.org/fhir/StructureDefinition/patient-nationality&apos;, nationality));
			} 		
		}
	} catch (err) {		
	}
}

function mapPaisNacimiento(pid, patient){
	try{
		var campo = pid[&apos;PID.23&apos;][&apos;PID.23.1&apos;].toString();
		if (campo.length &gt; 0){
			patient.appendChild(createExtensionCodePaisNac(&apos;http://hn.indra.es/fhir/StructureDefinition/patient-birthcountry&apos;, campo));
		} 		
	} catch (err) {		
	}
}


function mapMaritalStatus(pid, patient){	
	try{
		var maritalStatus = pid[&apos;PID.16&apos;][&apos;PID.16.1&apos;].toString();		
		if (maritalStatus.length &gt; 0){			
			patient.maritalStatus.coding.code.@value = maritalStatus;
		} 		
	} catch (err) {		
	}
}

function mapExtensiones(pid, patient){
	var campo = &quot;&quot;;
	try{
		campo = pid[&apos;PID.2&apos;][&apos;PID.2.1&apos;].toString();
		if (campo.length &gt; 0){
			patient.appendChild(createExtensionString(&apos;uri:hn:additional-data:patient-id&apos;, campo));
		} 		
	} catch (err) {		
	}
	try{
		campo = pid[&apos;PID.4&apos;][0][&apos;PID.4.1&apos;].toString();
		if (campo.length &gt; 0){
			patient.appendChild(createExtensionString(&apos;uri:hn:additional-data:alternative-patient-id&apos;, campo));
		} 		
	} catch (err) {		
	}
	/*
	try{
		var name = &quot;&quot;;
		var given = pid[&apos;PID.6&apos;][0][&apos;PID.6.2&apos;].toString();
		var family = pid[&apos;PID.6&apos;][0][&apos;PID.6.1&apos;].toString();
		if (given.length &gt; 0){
			name = given + &quot; &quot;;
		}
		if (family.length &gt; 0){
			name = name + family;
		}
		if (name.length &gt; 0){
			patient.appendChild(createExtensionString(&apos;uri:hn:additional-data:mother-maiden-name&apos;, name));
		} 		
	} catch (err) {		
	}
	*/
	/*
	try{
		var name = &quot;&quot;;
		var given = pid[&apos;PID.9&apos;][0][&apos;PID.9.2&apos;].toString();
		var family = pid[&apos;PID.9&apos;][0][&apos;PID.9.1&apos;].toString();
		if (given.length &gt; 0){
			name = given + &quot; &quot;;
		}
		if (family.length &gt; 0){
			name = name + family;
		}
		if (name.length &gt; 0){
			patient.appendChild(createExtensionString(&apos;uri:hn:additional-data:alias&apos;, name));
		} 		
	} catch (err) {		
	}
	*/
	try{
		var name = &quot;&quot;;
		var given = pid[&apos;PID.9&apos;][0][&apos;PID.9.2&apos;].toString();
		var family = pid[&apos;PID.9&apos;][0][&apos;PID.9.1&apos;].toString();
		if (given.length &gt; 0){
			name = given + &quot; &quot;;
		}
		if (family.length &gt; 0){
			name = name + family;
		}
		if (name.length &gt; 0){
			var nameXML = new XML(&lt;name&gt;&lt;/name&gt;);	
			nameXML.use.@value = &apos;official&apos;;			
			nameXML.given.@value = name;
			nameXML.text.@value = name;
			patient.appendChild(nameXML);
		} 		
	} catch (err) {		
	}
	
	try{
		campo = pid[&apos;PID.10&apos;][0][&apos;PID.10.1&apos;].toString();
		if (campo.length &gt; 0){
			patient.appendChild(createExtensionString(&apos;uri:hn:additional-data:race&apos;, campo));
		} 		
	} catch (err) {		
	}
	try{
		campo = pid[&apos;PID.12&apos;][&apos;PID.12.1&apos;].toString();
		if (campo.length &gt; 0){
			patient.appendChild(createExtensionCode(&apos;uri:hn:additional-data:county-code&apos;, campo));
		} 		
	} catch (err) {		
	}
	try{
		campo = pid[&apos;PID.15&apos;][&apos;PID.15.1&apos;].toString();
		if (campo.length &gt; 0){
			patient.appendChild(createExtensionString(&apos;uri:hn:additional-data:primary-language&apos;, campo));
		} else {
			campo = pid[&apos;PID.15&apos;][&apos;PID.15.2&apos;].toString();
			if (campo.length &gt; 0){
				patient.appendChild(createExtensionString(&apos;uri:hn:additional-data:primary-language&apos;, campo));		 		
			}
		}
	} catch (err) {		
	}
	try{
		campo = pid[&apos;PID.17&apos;][&apos;PID.17.1&apos;].toString();
		if (campo.length &gt; 0){
			patient.appendChild(createExtensionString(&apos;uri:hn:additional-data:religion&apos;, campo));
		} else {
			campo = pid[&apos;PID.17&apos;][&apos;PID.17.2&apos;].toString();
			if (campo.length &gt; 0){
				patient.appendChild(createExtensionString(&apos;uri:hn:additional-data:religion&apos;, campo));		 		
			}
		}
	} catch (err) {		
	}
	
	try{
		campo = pid[&apos;PID.18&apos;][&apos;PID.18.1&apos;].toString();
		if (campo.length &gt; 0){
			patient.appendChild(createExtensionString(&apos;uri:hn:additional-data:patient-account-number&apos;, campo));
		} 		
	} catch (err) {		
	}
	try{
		campo = pid[&apos;PID.19&apos;][&apos;PID.19.1&apos;].toString();
		if (campo.length &gt; 0){
			patient.appendChild(createExtensionString(&apos;uri:hn:additional-data:ssn-number&apos;, campo));
		} 		
	} catch (err) {		
	}
	try{
		campo = pid[&apos;PID.20&apos;][&apos;PID.20.1&apos;].toString();
		if (campo.length &gt; 0){
			patient.appendChild(createExtensionString(&apos;uri:hn:additional-data:driver-license-number&apos;, campo));
		} 		
	} catch (err) {		
	}
	try{
		campo = pid[&apos;PID.21&apos;][0][&apos;PID.21.1&apos;].toString();
		if (campo.length &gt; 0){
			patient.appendChild(createExtensionString(&apos;uri:hn:additional-data:mother-identifier&apos;, campo));
		} 		
	} catch (err) {		
	}
	try{
		campo = pid[&apos;PID.22&apos;][0][&apos;PID.22.1&apos;].toString();
		if (campo.length &gt; 0){
			patient.appendChild(createExtensionString(&apos;uri:hn:additional-data:ethnic-group&apos;, campo));
		} else {
			campo = pid[&apos;PID.22&apos;][&apos;PID.22.2&apos;].toString();
			if (campo.length &gt; 0){
				patient.appendChild(createExtensionString(&apos;uri:hn:additional-data:ethnic-group&apos;, campo));		 		
			}
		}
	} catch (err) {		
	}		
	try{
		campo = pid[&apos;PID.25&apos;][&apos;PID.25.1&apos;].toString();
		if (campo.length &gt; 0){
			patient.appendChild(createExtensionString(&apos;uri:hn:additional-data:birth-order&apos;, campo));
		} 		
	} catch (err) {		
	}
	
	try{
		campo = pid[&apos;PID.24&apos;][&apos;PID.24.1&apos;].toString();
		if (campo.length &gt; 0){
			patient.appendChild(createExtensionString(&apos;uri:hn:additional-data:multiple-birth&apos;, campo));
		} 		
	} catch (err) {		
	}
	/*
	try{
		campo = pid[&apos;PID.26&apos;][0][&apos;PID.26.1&apos;].toString();
		if (campo.length &gt; 0){
			patient.appendChild(createExtensionString(&apos;uri:hn:additional-data:citizenship&apos;, campo));
		} 		
	} catch (err) {		
	}
	*/
	try{
		campo = pid[&apos;PID.26&apos;][0][&apos;PID.26.1&apos;].toString();
		if (campo.length &gt; 0){
			patient.appendChild(createExtensionCodeIdentity(&apos;uri:hn:additional-data:identidad_genero&apos;, campo));
		} 		
	} catch (err) {		
	}

	try{
		campo = pid[&apos;PID.26&apos;][1][&apos;PID.26.1&apos;].toString();
		if (campo.length &gt; 0){
			patient.appendChild(createExtensionCodeIdentity(&apos;uri:hn:additional-data:nivel_instruccion&apos;, campo));
		} 		
	} catch (err) {		
	}
	
	try{
		campo = pid[&apos;PID.27&apos;][&apos;PID.27.1&apos;].toString();
		if (campo.length &gt; 0){
			patient.appendChild(createExtensionString(&apos;uri:hn:additional-data:military-status&apos;, campo));
		} 		
	} catch (err) {		
	}
	
	try{
		campo = pid[&apos;PID.30&apos;][&apos;PID.30.1&apos;].toString();
		if (campo.length &gt; 0){
			patient.appendChild(createExtensionString(&apos;uri:hn:additional-data:patient-death-indicator&apos;, campo));
		} 		
	} catch (err) {		
	}							

	if (campo == &apos;Y&apos;) {
		campo = pid[&apos;PID.29&apos;][&apos;PID.29.1&apos;].toString();
		if (campo.length &gt; 0){
			patient.deceasedDateTime.@value = campo;
			patient.active.@value = false;
			patient.appendChild(createExtensionDate(&apos;uri:hn:additional-data:passivate-date&apos;, campo));
		}
	}
	else {
		try{
			campo = pid[&apos;PID.29&apos;][&apos;PID.29.1&apos;].toString();
			if (campo.length &gt; 0){
				patient.appendChild(createExtensionDateTime(&apos;uri:hn:additional-data:patient-death-date&apos;, campo));
			} 		
		} catch (err) {		
		}
	}
}

function mapActive(msh, patient){

	try{
		if (msh[&apos;MSH.9&apos;][&apos;MSH.9.2&apos;] != &apos;A29&apos;){
			patient.active.@value = true;
		}else {
			patient.active.@value = false;
		}
	} catch (err) {}		
}

function mapIdentifiers(pid, patient){
	try{
		for each (pid3 in pid[&apos;PID.3&apos;]){
			patient.appendChild(createIdentifier(pid3, &apos;PID.3&apos;));
		}
	} catch (err) {}		
}

function mapNames(pid, patient){
	try{
		for each (pid5 in pid[&apos;PID.5&apos;]){
			patient.appendChild(createName(pid5));
		}
	} catch (err) {}		
}

function mapTelecoms(pid, patient){
	try{
		for each (pid13 in pid[&apos;PID.13&apos;]){
			patient.appendChild(createTelecom(pid13));
		}
	} catch (err) {}		
	try{
		for each (pid14 in pid[&apos;PID.14&apos;]){
			patient.appendChild(createTelecom2(pid14));
		}
	} catch (err) {}		
}

function mapGender(pid, patient){
	try{
		patient.gender.@value = map(&apos;administrativeGender&apos;, &apos;HL7&apos;, &apos;FHIR&apos;, pid[&apos;PID.8&apos;][&apos;PID.8.1&apos;].toString());
	} catch (err) {}	
}

function mapBirthDate(pid, patient){	
	try{
		var date = pid[&apos;PID.7&apos;][&apos;PID.7.1&apos;];	
		date = convertDateToFhir(date);		
		patient.birthDate.@value = date;			
	} catch (err) { }	
		
}

function mapAddress(pid, patient){
	try{
		for each (pid11 in pid[&apos;PID.11&apos;]){
			var descriptionCity = pid[&apos;PID.11&apos;][&apos;PID.11.3&apos;][&apos;PID.11.3.2&apos;].toString();
			var descriptionState = pid[&apos;PID.11&apos;][&apos;PID.11.4&apos;][&apos;PID.11.4.2&apos;].toString();
			var address = createAddress(pid11, descriptionCity,descriptionState);
			var codeCity = pid[&apos;PID.11&apos;][&apos;PID.11.3&apos;][&apos;PID.11.3.1&apos;].toString();
			var codeState = pid[&apos;PID.11&apos;][&apos;PID.11.4&apos;][&apos;PID.11.4.1&apos;].toString();
			address.appendChild(createExtensionString(&apos;http://hn.indra.es/fhir/StructureDefinition/address-state-code&apos;,codeState));
			address.appendChild(createExtensionString(&apos;http://hn.indra.es/fhir/StructureDefinition/address-city-code&apos;,codeCity));
			patient.appendChild(address);
		}
	} catch (err) {}		
}

function mapManagingOrganization(msh, patient){
	try{
		patient.managingOrganization.display.@value = msh[&apos;MSH.3&apos;][&apos;MSH.3.1&apos;];
	} catch (err) {}		
}

function createIdentifier(cx, field){
	var identifier = new XML(&lt;identifier&gt;&lt;/identifier&gt;);

	identifier.use.@value = &apos;official&apos;;
	var pid342 =  cx[field +&apos;.4&apos;][field +&apos;.4.2&apos;];	
	system = map(&apos;PID.3.4.2&apos;, &apos;HL7&apos;, &apos;FHIR&apos;, pid342);		
	identifier.system.@value = system;
	identifier.value.@value = cx[field +&apos;.1&apos;].toString();
	identifier.type.coding.code.@value = cx[field +&apos;.5&apos;].toString();	
	identifier.type.text.@value=cx[field +&apos;.4&apos;][field +&apos;.4.1&apos;]+&apos;&apos;;
	return identifier;
}



function createName(pid5){
	var name = new XML(&lt;name&gt;&lt;/name&gt;);	
	name.use.@value = &apos;official&apos;;			
	var given = pid5[&apos;PID.5.2&apos;];
	try{
		
		if (pid5[&apos;PID.5.3&apos;].toString().length &gt; 0){			
			given = given + &apos; &apos; + pid5[&apos;PID.5.3&apos;];						
		}
		
	} catch (err) {}
	name.given.@value = given;
	//name.family.@value = $f(&apos;%s %s&apos;, pid5[&apos;PID.5.1&apos;], msg[&apos;PID&apos;][&apos;PID.6&apos;][&apos;PID.6.1&apos;]);	
	//name.family.@value = $f(&apos;%s&apos;, pid5[&apos;PID.5.1&apos;]);	
	name.appendChild(createExtensionString(&apos;http://hl7.org/fhir/StructureDefinition/humanname-fathers-family&apos;, pid5[&apos;PID.5.1&apos;]));
	
	var apellido2 = msg[&apos;PID&apos;][&apos;PID.6&apos;][&apos;PID.6.1&apos;].toString();
	if (apellido2.length &gt; 0){
		name.appendChild(createExtensionString(&apos;http://hl7.org/fhir/StructureDefinition/humanname-mothers-family&apos;,msg[&apos;PID&apos;][&apos;PID.6&apos;][&apos;PID.6.1&apos;]));
	}
		
	//name.text.@value = $f(&apos;%s %s&apos;, name.given.@value, name.family.@value);
	
	return name;
}


function createTelecom(xtn){
	if(xtn != &apos;&apos;){
		var telecom = new XML(&lt;telecom&gt;&lt;/telecom&gt;);		
		var type = xtn[&apos;PID.13.3&apos;]+&apos;&apos;;
		if (type.length == 0){
			return &apos;&apos;;
		}
		telecom.system.@value = map(&apos;contactPointSystem&apos;, &apos;HL7&apos;, &apos;FHIR&apos;, type);
		if (type == &apos;Internet&apos;){
			telecom.value.@value = xtn[&apos;PID.13.4&apos;];	
		} else {
			telecom.value.@value = xtn[&apos;PID.13.7&apos;];
		}		
		
		if (type == &apos;CP&apos;){
			telecom.use.@value = &apos;mobile&apos;;
		} else {
			//telecom.use.@value = map(&apos;contactPointUse&apos;, &apos;HL7&apos;, &apos;FHIR&apos;, xtn[&apos;PID.13.2&apos;]);
			telecom.use.@value = &apos;home&apos;;
		}		
		
		return telecom;
	}
	return &apos;&apos;;
}

function createTelecom2(xtn){
	if(xtn != &apos;&apos;){
		var telecom = new XML(&lt;telecom&gt;&lt;/telecom&gt;);		
		var type = xtn[&apos;PID.14.3&apos;]+&apos;&apos;;
		if (type.length == 0){
			return &apos;&apos;;
		}
		telecom.system.@value = map(&apos;contactPointSystem&apos;, &apos;HL7&apos;, &apos;FHIR&apos;, type);
		if (type == &apos;Internet&apos;){
			telecom.value.@value = xtn[&apos;PID.14.4&apos;];	
		} else {
			telecom.value.@value = xtn[&apos;PID.14.7&apos;];
		}		
		
		if (type == &apos;CP&apos;){
			telecom.use.@value = &apos;mobile&apos;;
		} else {
			//telecom.use.@value = map(&apos;contactPointUse&apos;, &apos;HL7&apos;, &apos;FHIR&apos;, xtn[&apos;PID.14.2&apos;]);
			telecom.use.@value = &apos;work&apos;;
		}		
		
		return telecom;
	}
	return &apos;&apos;;
}

function createExtensionString(url, value){
	var extension = &lt;extension&gt;&lt;/extension&gt;;
	extension.@url = url;
	var extensionValue = &lt;valueString&gt;&lt;/valueString&gt;;
	extensionValue.@value = value;
	extension.appendChild(extensionValue);
	return extension;
}


function createExtensionDateTime(url, value){
	var extension = &lt;extension&gt;&lt;/extension&gt;;
	extension.@url = url;
	var extensionValue = &lt;valueDateTime&gt;&lt;/valueDateTime&gt;;
	extensionValue.@value = value;
	extension.appendChild(extensionValue);
	return extension;
}

function createExtensionDate(url, value){
	var extension = &lt;extension&gt;&lt;/extension&gt;;
	extension.@url = url;
	var extensionValue = &lt;valueDate&gt;&lt;/valueDate&gt;;
	extensionValue.@value = value;
	extension.appendChild(extensionValue);
	return extension;
}

function createExtensionCode(url, value){
	var extension = &lt;extension&gt;&lt;/extension&gt;;
	extension.@url = url;
	var extensionCode = &lt;extension&gt;&lt;/extension&gt;;
	var valueCode = &lt;valueCodeableConcept&gt;&lt;/valueCodeableConcept&gt;
	var coding = &lt;coding&gt;&lt;/coding&gt;
	coding.code.@value=value;
	valueCode.appendChild(coding); 
	extensionCode.appendChild(valueCode); 	
	extension.appendChild(extensionCode);	
	return extension;
}

function createExtensionCodeIdentity(url, value){		
	var extension = &lt;extension&gt;&lt;/extension&gt;;
	extension.@url = url;
	var extensionCode = &lt;extension&gt;&lt;/extension&gt;;
	extensionCode.@url=&apos;code&apos;;
	var valueCode = &lt;valueCodeableConcept&gt;&lt;/valueCodeableConcept&gt;
	var coding = &lt;coding&gt;&lt;/coding&gt;
	coding.code.@value=value;
	valueCode.appendChild(coding); 
	extensionCode.appendChild(valueCode); 	
	extension.appendChild(extensionCode);
	logger.debug(&quot;extension: &quot; + extension);
	return extension;
}

function createExtensionCodeNationality(url, value){		
	var extension = &lt;extension&gt;&lt;/extension&gt;;
	extension.@url = url;
	var extensionCode = &lt;extension&gt;&lt;/extension&gt;;
	extensionCode.@url=&apos;code&apos;;
	var valueCode = &lt;valueCodeableConcept&gt;&lt;/valueCodeableConcept&gt;
	var coding = &lt;coding&gt;&lt;/coding&gt;
	coding.code.@value=value;
	valueCode.appendChild(coding); 
	extensionCode.appendChild(valueCode); 	
	extension.appendChild(extensionCode);
	logger.debug(&quot;extension: &quot; + extension);
	return extension;
}

function createExtensionCodePaisNac(url, value){
	var extension = &lt;extension&gt;&lt;/extension&gt;;
	extension.@url = url;	
	var valueCode = &lt;valueCodeableConcept&gt;&lt;/valueCodeableConcept&gt;
	var coding = &lt;coding&gt;&lt;/coding&gt;
	coding.code.@value=value;
	coding.system.@value=&apos;urn:hn:patient-birthcountry&apos;;
	valueCode.appendChild(coding); 	
	extension.appendChild(valueCode);	
	return extension;
}



function createAddress(xad,descriptionCity,descriptionState){
	var address = &lt;address&gt;&lt;/address&gt;;

	var use = xad[&apos;PID.11.7&apos;];
	address.use.@value = map(&apos;addressUse&apos;, &apos;HL7&apos;, &apos;FHIR&apos;, xad[&apos;PID.11.7&apos;]);
	/*
	if (use == &apos;M&apos;){
		address.type.@value = &apos;postal&apos;;
	}
	*/
	var line1 = &lt;line&gt;&lt;/line&gt;;
	var xad1=xad[&apos;PID.11.1&apos;];	
	//line1.@value = $f(&apos;%s %s %s&apos;, xad1[&apos;PID.11.1.1&apos;], xad1[&apos;PID.11.1.2&apos;], xad1[&apos;PID.11.1.3&apos;]);
	line1.@value = xad1;
	address.appendChild(line1);

	if (xad[&apos;PID.11.2&apos;] != &apos;&apos;){
		var line2 = &lt;line&gt;&lt;/line&gt;
		line2.@value = xad[&apos;PID.11.2&apos;];
		address.appendChild(line2);
	}
	
	if (xad[&apos;PID.11.3&apos;] != &apos;&apos;){
		//address.city.@value = xad[&apos;PID.11.3&apos;];
		address.city.@value = descriptionCity;
	}
	if (xad[&apos;PID.11.9&apos;] != &apos;&apos;){
		address.district.@value = xad[&apos;PID.11.9&apos;];
	}
	//address.state.@value = xad[&apos;PID.11.4&apos;];
	address.state.@value = descriptionState;
	address.postalCode.@value = xad[&apos;PID.11.5&apos;];
	address.country.@value = xad[&apos;PID.11.6&apos;];
	
	return address;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.6.0">
            <id>4c6122f6-7168-4eb4-9e0d-d9f29dd4e3d7</id>
            <name>ADT -&gt; Patient (Project)</name>
            <revision>4</revision>
            <lastModified>
              <time>1570568671090</time>
              <timezone>America/Santiago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>function adtToPatientProject(adtMessage) {	
	var msh = adtMessage.MSH;
	var pid = adtMessage.PID;
	var patient = &lt;Patient&gt;&lt;/Patient&gt;;	
	mapNationality(pid, patient);	
	mapActive(msh, patient);	
	mapIdentifiers(pid, patient);	
	mapNames(pid, patient);	
	mapTelecoms(pid, patient);	
	mapGender(pid, patient);
	mapBirthDate(pid, patient);
	mapAddress(pid, patient);
	mapManagingOrganization(msh, patient);
	mapMaritalStatus(pid, patient);
	mapPrimaryLanguage(pid, patient);
	mapPaisNacimiento(pid, patient);
	mapExtensiones(pid, patient);
	return patient;
}

function mapNationality(pid, patient){
	try{
		for each (pid28 in pid[&apos;PID.28&apos;]){
			var nationality = pid28[&apos;PID.28.1&apos;].toString();
			if (nationality.length &gt; 0){
				patient.appendChild(createExtensionCodeNationality($g(&apos;gsexturlnationality&apos;), nationality));
			} 		
		}
	} catch (err) {		
	}
}

function mapPaisNacimiento(pid, patient){
	try{
		var campo = pid[&apos;PID.23&apos;][&apos;PID.23.1&apos;].toString();
		if (campo.length &gt; 0){
			patient.appendChild(createExtensionCodePaisNac($g(&apos;gsexturlbirthcountry&apos;), campo));
		} 		
	} catch (err) {		
	}
}


function mapMaritalStatus(pid, patient){	
	try{
		var maritalStatus = pid[&apos;PID.16&apos;][&apos;PID.16.1&apos;].toString();		
		if (maritalStatus.length &gt; 0){			
			patient.maritalStatus.coding.code.@value = maritalStatus;
		} 		
	} catch (err) {		
	}
}

function mapPrimaryLanguage(pid, patient){	
	try{
		var primaryLanguage = pid[&apos;PID.15&apos;][&apos;PID.15.1&apos;].toString();		
		if (primaryLanguage.length &gt; 0){			
			patient.communication.language.coding.code.@value = primaryLanguage;
		} 		
	} catch (err) {		
	}
}

function mapExtensiones(pid, patient){
	var campo = &quot;&quot;;
	try{
		campo = pid[&apos;PID.2&apos;][&apos;PID.2.1&apos;].toString();
		if (campo.length &gt; 0){
			patient.appendChild(createExtensionString(&apos;uri:hn:additional-data:patient-id&apos;, campo));
		} 		
	} catch (err) {		
	}
	try{
		campo = pid[&apos;PID.4&apos;][0][&apos;PID.4.1&apos;].toString();
		if (campo.length &gt; 0){
			patient.appendChild(createExtensionString(&apos;uri:hn:additional-data:alternative-patient-id&apos;, campo));
		} 		
	} catch (err) {		
	}
	/*
	try{
		var name = &quot;&quot;;
		var given = pid[&apos;PID.6&apos;][0][&apos;PID.6.2&apos;].toString();
		var family = pid[&apos;PID.6&apos;][0][&apos;PID.6.1&apos;].toString();
		if (given.length &gt; 0){
			name = given + &quot; &quot;;
		}
		if (family.length &gt; 0){
			name = name + family;
		}
		if (name.length &gt; 0){
			patient.appendChild(createExtensionString(&apos;uri:hn:additional-data:mother-maiden-name&apos;, name));
		} 		
	} catch (err) {		
	}
	*/
	/*
	try{
		var name = &quot;&quot;;
		var given = pid[&apos;PID.9&apos;][0][&apos;PID.9.2&apos;].toString();
		var family = pid[&apos;PID.9&apos;][0][&apos;PID.9.1&apos;].toString();
		if (given.length &gt; 0){
			name = given + &quot; &quot;;
		}
		if (family.length &gt; 0){
			name = name + family;
		}
		if (name.length &gt; 0){
			patient.appendChild(createExtensionString(&apos;uri:hn:additional-data:alias&apos;, name));
		} 		
	} catch (err) {		
	}
	*/
	try{
		var name = &quot;&quot;;
		var given = pid[&apos;PID.9&apos;][0][&apos;PID.9.2&apos;].toString();
		var family = pid[&apos;PID.9&apos;][0][&apos;PID.9.1&apos;].toString();
		if (given.length &gt; 0){
			name = given + &quot; &quot;;
		}
		if (family.length &gt; 0){
			name = name + family;
		}
		if (name.length &gt; 0){
			var nameXML = new XML(&lt;name&gt;&lt;/name&gt;);	
			nameXML.use.@value = &apos;official&apos;;			
			nameXML.given.@value = name;
			nameXML.text.@value = name;
			patient.appendChild(nameXML);
		} 		
	} catch (err) {		
	}
	
	try{
		campo = pid[&apos;PID.10&apos;][0][&apos;PID.10.1&apos;].toString();
		if (campo.length &gt; 0){
			patient.appendChild(createExtensionString(&apos;uri:hn:additional-data:race&apos;, campo));
		} 		
	} catch (err) {		
	}
	try{
		campo = pid[&apos;PID.12&apos;][&apos;PID.12.1&apos;].toString();
		if (campo.length &gt; 0){
			patient.appendChild(createExtensionCode(&apos;uri:hn:additional-data:county-code&apos;, campo));
		} 		
	} catch (err) {		
	}
/*
	try{
		campo = pid[&apos;PID.15&apos;][&apos;PID.15.1&apos;].toString();
		if (campo.length &gt; 0){
			patient.appendChild(createExtensionString(&apos;uri:hn:additional-data:primary-language&apos;, campo));
		} else {
			campo = pid[&apos;PID.15&apos;][&apos;PID.15.2&apos;].toString();
			if (campo.length &gt; 0){
				patient.appendChild(createExtensionString(&apos;uri:hn:additional-data:primary-language&apos;, campo));		 		
			}
		}
	} catch (err) {		
	}
*/
	try{
		campo = pid[&apos;PID.17&apos;][&apos;PID.17.1&apos;].toString();
		if (campo.length &gt; 0){
			patient.appendChild(createExtensionString(&apos;uri:hn:additional-data:religion&apos;, campo));
		} else {
			campo = pid[&apos;PID.17&apos;][&apos;PID.17.2&apos;].toString();
			if (campo.length &gt; 0){
				patient.appendChild(createExtensionString(&apos;uri:hn:additional-data:religion&apos;, campo));		 		
			}
		}
	} catch (err) {		
	}
	
	try{
		campo = pid[&apos;PID.18&apos;][&apos;PID.18.1&apos;].toString();
		if (campo.length &gt; 0){
			patient.appendChild(createExtensionString(&apos;uri:hn:additional-data:patient-account-number&apos;, campo));
		} 		
	} catch (err) {		
	}
	try{
		campo = pid[&apos;PID.19&apos;][&apos;PID.19.1&apos;].toString();
		if (campo.length &gt; 0){
			patient.appendChild(createExtensionString(&apos;uri:hn:additional-data:ssn-number&apos;, campo));
		} 		
	} catch (err) {		
	}
	try{
		campo = pid[&apos;PID.20&apos;][&apos;PID.20.1&apos;].toString();
		if (campo.length &gt; 0){
			patient.appendChild(createExtensionString(&apos;uri:hn:additional-data:driver-license-number&apos;, campo));
		} 		
	} catch (err) {		
	}
	try{
		campo = pid[&apos;PID.21&apos;][0][&apos;PID.21.1&apos;].toString();
		if (campo.length &gt; 0){
			patient.appendChild(createExtensionString(&apos;uri:hn:additional-data:mother-identifier&apos;, campo));
		} 		
	} catch (err) {		
	}
	/*
	try{
		campo = pid[&apos;PID.22&apos;][0][&apos;PID.22.1&apos;].toString();
		if (campo.length &gt; 0){
			patient.appendChild(createExtensionString(&apos;uri:hn:additional-data:ethnic-group&apos;, campo));
		} else {
			campo = pid[&apos;PID.22&apos;][&apos;PID.22.2&apos;].toString();
			if (campo.length &gt; 0){
				patient.appendChild(createExtensionString(&apos;uri:hn:additional-data:ethnic-group&apos;, campo));		 		
			}
		}
	} catch (err) {		
	}
	*/		
	try{
		campo = pid[&apos;PID.25&apos;][&apos;PID.25.1&apos;].toString();
		if (campo.length &gt; 0){
			patient.appendChild(createExtensionString(&apos;uri:hn:additional-data:birth-order&apos;, campo));
		} 		
	} catch (err) {		
	}
	
	try{
		campo = pid[&apos;PID.24&apos;][&apos;PID.24.1&apos;].toString();
		if (campo.length &gt; 0){
			patient.appendChild(createExtensionString(&apos;uri:hn:additional-data:multiple-birth&apos;, campo));
		} 		
	} catch (err) {		
	}
	/*
	try{
		campo = pid[&apos;PID.26&apos;][0][&apos;PID.26.1&apos;].toString();
		if (campo.length &gt; 0){
			patient.appendChild(createExtensionString(&apos;uri:hn:additional-data:citizenship&apos;, campo));
		} 		
	} catch (err) {		
	}
	*/
	try{
		campo = pid[&apos;PID.22&apos;][0][&apos;PID.22.1&apos;].toString();
		description = pid[&apos;PID.22&apos;][0][&apos;PID.22.2&apos;].toString();
		if (campo.length &gt; 0){
			patient.appendChild(createExtensionCodeIdentity($g(&apos;gsexturlpuebloindigena&apos;), &apos;uri:hn:pueblos&apos;, campo, description));
		} 		
	} catch (err) {		
	}

	try{
		campo = pid[&apos;PID.26&apos;][0][&apos;PID.26.1&apos;].toString();
		description = pid[&apos;PID.26&apos;][0][&apos;PID.26.2&apos;].toString();
		if (campo.length &gt; 0){
			patient.appendChild(createExtensionCodeIdentity($g(&apos;gsexturlbiologicalgender&apos;), &apos;uri:hn:identidad_genero&apos;, campo, description));
		} 		
	} catch (err) {		
	}

	try{
		campo = pid[&apos;PID.26&apos;][1][&apos;PID.26.1&apos;].toString();
		description = pid[&apos;PID.26&apos;][1][&apos;PID.26.2&apos;].toString();
		if (campo.length &gt; 0){
			patient.appendChild(createExtensionCodeIdentity($g(&apos;gsexturlstudylevel&apos;), &apos;uri:hn:nivel_instruccion&apos;, campo, description));
		} 		
	} catch (err) {		
	}
	
	try{
		campo = pid[&apos;PID.27&apos;][&apos;PID.27.1&apos;].toString();
		if (campo.length &gt; 0){
			patient.appendChild(createExtensionString(&apos;uri:hn:additional-data:military-status&apos;, campo));
		} 		
	} catch (err) {		
	}
	
	try{
		campo = pid[&apos;PID.30&apos;][&apos;PID.30.1&apos;].toString();
		if (campo.length &gt; 0){
			patient.appendChild(createExtensionString(&apos;uri:hn:additional-data:patient-death-indicator&apos;, campo));
		} 		
	} catch (err) {		
	}							

	if (campo == &apos;Y&apos;) {
		var date = pid[&apos;PID.29&apos;][&apos;PID.29.1&apos;].toString();
		if (date.length &gt; 0){
			date = convertDateToFhir(date);	
			patient.deceasedDateTime.@value = date;
			patient.active.@value = false;
			patient.appendChild(createExtensionDate(&apos;uri:hn:additional-data:passivate-date&apos;, date));
		}
	}
	else {
		try{
			var date = pid[&apos;PID.29&apos;][&apos;PID.29.1&apos;].toString();
			if (date.length &gt; 0){
				date = convertDateToFhir(date);	
				patient.appendChild(createExtensionDateTime($g(&apos;gsexturltheoricdeathdate&apos;), date));
			} 		
		} catch (err) {		
		}
	}
}

function mapActive(msh, patient){

	try{
		if (msh[&apos;MSH.9&apos;][&apos;MSH.9.2&apos;] != &apos;A29&apos;){
			patient.active.@value = true;
		}else {
			patient.active.@value = false;
		}
	} catch (err) {}		
}

function mapIdentifiers(pid, patient){
	try{
		for each (pid3 in pid[&apos;PID.3&apos;]){
			patient.appendChild(createIdentifier(pid3, &apos;PID.3&apos;));
		}
	} catch (err) {}		
}

function mapNames(pid, patient){
	try{
		for each (pid5 in pid[&apos;PID.5&apos;]){
			patient.appendChild(createName(pid5));
		}
	} catch (err) {}		
}

function mapTelecoms(pid, patient){
	try{
		for each (pid13 in pid[&apos;PID.13&apos;]){
			patient.appendChild(createTelecom(pid13));
		}
	} catch (err) {}		
	try{
		for each (pid14 in pid[&apos;PID.14&apos;]){
			patient.appendChild(createTelecom2(pid14));
		}
	} catch (err) {}		
}

function mapGender(pid, patient){
	try{
		patient.gender.@value = map(&apos;administrativeGender&apos;, &apos;HL7&apos;, &apos;FHIR&apos;, pid[&apos;PID.8&apos;][&apos;PID.8.1&apos;].toString());
	} catch (err) {}	
}

function mapBirthDate(pid, patient){	
	try{
		var date = pid[&apos;PID.7&apos;][&apos;PID.7.1&apos;];	
		date = convertDateToFhir(date);		
		patient.birthDate.@value = date;			
	} catch (err) { }	
		
}

function mapAddress(pid, patient){
	try{
		for each (pid11 in pid[&apos;PID.11&apos;]){
			var descriptionCity = pid[&apos;PID.11&apos;][&apos;PID.11.3&apos;][&apos;PID.11.3.2&apos;].toString();
			var descriptionState = pid[&apos;PID.11&apos;][&apos;PID.11.4&apos;][&apos;PID.11.4.2&apos;].toString();
			var address = createAddress(pid11, descriptionCity,descriptionState);
			var codeCity = pid[&apos;PID.11&apos;][&apos;PID.11.3&apos;][&apos;PID.11.3.1&apos;].toString();
			var codeState = pid[&apos;PID.11&apos;][&apos;PID.11.4&apos;][&apos;PID.11.4.1&apos;].toString();
			address.appendChild(createExtensionString($g(&apos;gsexturladdrstatecode&apos;),codeState));
			address.appendChild(createExtensionString($g(&apos;gsexturladdrcitycode&apos;),codeCity));
			patient.appendChild(address);
		}
	} catch (err) {}		
}

function mapManagingOrganization(msh, patient){
	try{
		patient.managingOrganization.display.@value = msh[&apos;MSH.3&apos;][&apos;MSH.3.1&apos;];
	} catch (err) {}		
}

function createIdentifier(cx, field){
	var identifier = new XML(&lt;identifier&gt;&lt;/identifier&gt;);

	identifier.use.@value = &apos;official&apos;;
	var pid342 =  cx[field +&apos;.4&apos;][field +&apos;.4.2&apos;];	
	system = map(&apos;PID.3.4.2&apos;, &apos;HL7&apos;, &apos;FHIR&apos;, pid342);		
	identifier.system.@value = system;
	identifier.value.@value = cx[field +&apos;.1&apos;].toString();
	identifier.type.coding.code.@value = cx[field +&apos;.5&apos;].toString();	
	identifier.type.text.@value=cx[field +&apos;.4&apos;][field +&apos;.4.1&apos;]+&apos;&apos;;

	// Tratamiento para determinados tipos de documentos sean tratados como guardian
	var aIdTypesforGuardian = [&apos;827884&apos;];
	var aSystem = system.split(&apos;.&apos;);
	var iNumSystemElem = aSystem.length;
	var bGuardian = ( iNumSystemElem &gt; 0 &amp;&amp; aIdTypesforGuardian.indexOf(aSystem[iNumSystemElem - 1]) &gt; -1 );
	identifier.appendChild( createExtensionBoolean(&quot;http://hn.indra.es/fhir/StructureDefinition/identifier-guardian&quot;, bGuardian) );
	
	//TODO introducir aquí la lógica para el tratamiento del país de emisión

	return identifier;
}

function createName(pid5){	
	var name = new XML(&lt;name&gt;&lt;/name&gt;);	
	name.use.@value = &apos;official&apos;;			
	var given = pid5[&apos;PID.5.2&apos;];
	try{
		
		if (pid5[&apos;PID.5.3&apos;].toString().length &gt; 0){			
			given = given + &apos; &apos; + pid5[&apos;PID.5.3&apos;];						
		}
		
	} catch (err) {}
	name.given.@value = given;	
	//name.family.@value = $f(&apos;%s %s&apos;, pid5[&apos;PID.5.1&apos;], msg[&apos;PID&apos;][&apos;PID.6&apos;][&apos;PID.6.1&apos;]);	
	//name.family.@value = $f(&apos;%s&apos;, pid5[&apos;PID.5.1&apos;]);	
	var apellido1 = pid5[&apos;PID.5.1&apos;];		
	name.appendChild(createExtensionString($g(&apos;gsexturlfatherfamilyname&apos;), pid5[&apos;PID.5.1&apos;]));	
	var apellido2 = msg[&apos;PID&apos;][&apos;PID.6&apos;][&apos;PID.6.1&apos;].toString();	
	if (apellido2.length &gt; 0){
		name.appendChild(createExtensionString($g(&apos;gsexturlmotherfamilyname&apos;),msg[&apos;PID&apos;][&apos;PID.6&apos;][&apos;PID.6.1&apos;]));
		name.text.@value = $f(&apos;%s %s %s&apos;, name.given.@value, apellido1, apellido2);
	} else {
		name.text.@value = $f(&apos;%s %s&apos;, name.given.@value, apellido1);
	}	
	return name;
}


function createTelecom(xtn){
	if(xtn != &apos;&apos;){
		var telecom = new XML(&lt;telecom&gt;&lt;/telecom&gt;);		
		var type = xtn[&apos;PID.13.3&apos;]+&apos;&apos;;
		if (type.length == 0){
			return &apos;&apos;;
		}
		telecom.system.@value = map(&apos;contactPointSystem&apos;, &apos;HL7&apos;, &apos;FHIR&apos;, type);
		if (type == &apos;Internet&apos;){
			telecom.value.@value = xtn[&apos;PID.13.4&apos;];	
		} else {
			telecom.value.@value = xtn[&apos;PID.13.7&apos;];
		}		
		
		if (type == &apos;CP&apos;){
			telecom.use.@value = &apos;mobile&apos;;
		} else {
			//telecom.use.@value = map(&apos;contactPointUse&apos;, &apos;HL7&apos;, &apos;FHIR&apos;, xtn[&apos;PID.13.2&apos;]);
			telecom.use.@value = &apos;home&apos;;
		}		
		
		return telecom;
	}
	return &apos;&apos;;
}

function createTelecom2(xtn){
	if(xtn != &apos;&apos;){
		var telecom = new XML(&lt;telecom&gt;&lt;/telecom&gt;);		
		var type = xtn[&apos;PID.14.3&apos;]+&apos;&apos;;
		if (type.length == 0){
			return &apos;&apos;;
		}
		telecom.system.@value = map(&apos;contactPointSystem&apos;, &apos;HL7&apos;, &apos;FHIR&apos;, type);
		if (type == &apos;Internet&apos;){
			telecom.value.@value = xtn[&apos;PID.14.4&apos;];	
		} else {
			telecom.value.@value = xtn[&apos;PID.14.7&apos;];
		}		
		
		if (type == &apos;CP&apos;){
			telecom.use.@value = &apos;mobile&apos;;
		} else {
			//telecom.use.@value = map(&apos;contactPointUse&apos;, &apos;HL7&apos;, &apos;FHIR&apos;, xtn[&apos;PID.14.2&apos;]);
			telecom.use.@value = &apos;work&apos;;
		}		
		
		return telecom;
	}
	return &apos;&apos;;
}

function createExtensionString(url, value){
	var extension = &lt;extension&gt;&lt;/extension&gt;;
	extension.@url = url;
	var extensionValue = &lt;valueString&gt;&lt;/valueString&gt;;
	extensionValue.@value = value;
	extension.appendChild(extensionValue);
	return extension;
}

function createExtensionBoolean(url, value){
	var extension = &lt;extension&gt;&lt;/extension&gt;;
	extension.@url = url;
	var extensionValue = &lt;valueBoolean&gt;&lt;/valueBoolean&gt;;
	extensionValue.@value = value;
	extension.appendChild(extensionValue);
	return extension;
}

function createExtensionDateTime(url, value){
	var extension = &lt;extension&gt;&lt;/extension&gt;;
	extension.@url = url;
	var extensionValue = &lt;valueDateTime&gt;&lt;/valueDateTime&gt;;
	extensionValue.@value = value;
	extension.appendChild(extensionValue);
	return extension;
}

function createExtensionDate(url, value){
	var extension = &lt;extension&gt;&lt;/extension&gt;;
	extension.@url = url;
	var extensionValue = &lt;valueDate&gt;&lt;/valueDate&gt;;
	extensionValue.@value = value;
	extension.appendChild(extensionValue);
	return extension;
}

function createExtensionCode(url, value){
	var extension = &lt;extension&gt;&lt;/extension&gt;;
	extension.@url = url;
	var extensionCode = &lt;extension&gt;&lt;/extension&gt;;
	var valueCode = &lt;valueCodeableConcept&gt;&lt;/valueCodeableConcept&gt;
	var coding = &lt;coding&gt;&lt;/coding&gt;
	coding.code.@value=value;
	valueCode.appendChild(coding); 
	extensionCode.appendChild(valueCode); 	
	extension.appendChild(extensionCode);	
	return extension;
}

function createExtensionCodeIdentity(url, uri, value, description){		
	var extension = &lt;extension&gt;&lt;/extension&gt;;
	extension.@url = url;
	var valueCode = &lt;valueCodeableConcept&gt;&lt;/valueCodeableConcept&gt;;
	var coding = &lt;coding&gt;&lt;/coding&gt;;
	var system = &lt;system&gt;&lt;/system&gt;;
	var code = &lt;code&gt;&lt;/code&gt;;
	var text = &lt;text&gt;&lt;/text&gt;;
	system.@value= uri;
	code.@value = value;
	text.@value = description;
	coding.appendChild(system);
	coding.appendChild(code);
	valueCode.appendChild(coding);
	valueCode.appendChild(text);
	extension.appendChild(valueCode);
	logger.debug(&quot;extension: &quot; + extension);
	return extension;
}

function createExtensionCodeNationality(url, value){		
	var extension = &lt;extension&gt;&lt;/extension&gt;;
	extension.@url = url;
	var extensionCode = &lt;extension&gt;&lt;/extension&gt;;
	extensionCode.@url=&apos;code&apos;;
	var valueCode = &lt;valueCodeableConcept&gt;&lt;/valueCodeableConcept&gt;
	var coding = &lt;coding&gt;&lt;/coding&gt;
	coding.code.@value=value;
	valueCode.appendChild(coding); 
	extensionCode.appendChild(valueCode); 	
	extension.appendChild(extensionCode);
	logger.debug(&quot;extension: &quot; + extension);
	return extension;
}

function createExtensionCodePaisNac(url, value){
	var extension = &lt;extension&gt;&lt;/extension&gt;;
	extension.@url = url;	
	var valueCode = &lt;valueCodeableConcept&gt;&lt;/valueCodeableConcept&gt;
	var coding = &lt;coding&gt;&lt;/coding&gt;
	coding.code.@value=value;
	coding.system.@value=&apos;urn:hn:patient-birthcountry&apos;;
	valueCode.appendChild(coding); 	
	extension.appendChild(valueCode);	
	return extension;
}

function createAddress(xad,descriptionCity,descriptionState){
	var address = &lt;address&gt;&lt;/address&gt;;

	var use = xad[&apos;PID.11.7&apos;];
	address.use.@value = map(&apos;addressUse&apos;, &apos;HL7&apos;, &apos;FHIR&apos;, xad[&apos;PID.11.7&apos;]);
	/*
	if (use == &apos;M&apos;){
		address.type.@value = &apos;postal&apos;;
	}
	*/
	var line1 = &lt;line&gt;&lt;/line&gt;;
	var xad1=xad[&apos;PID.11.1&apos;];	
	//line1.@value = $f(&apos;%s %s %s&apos;, xad1[&apos;PID.11.1.1&apos;], xad1[&apos;PID.11.1.2&apos;], xad1[&apos;PID.11.1.3&apos;]);
	line1.@value = xad1;
	address.appendChild(line1);

	if (xad[&apos;PID.11.2&apos;] != &apos;&apos;){
		var line2 = &lt;line&gt;&lt;/line&gt;
		line2.@value = xad[&apos;PID.11.2&apos;];
		address.appendChild(line2);
	}
	
	if (xad[&apos;PID.11.3&apos;] != &apos;&apos;){
		//address.city.@value = xad[&apos;PID.11.3&apos;];
		address.city.@value = descriptionCity;
	}
	if (xad[&apos;PID.11.9&apos;] != &apos;&apos;){
		address.district.@value = xad[&apos;PID.11.9&apos;];
	}
	//address.state.@value = xad[&apos;PID.11.4&apos;];
	address.state.@value = descriptionState;
	address.postalCode.@value = xad[&apos;PID.11.5&apos;];
	address.country.@value = xad[&apos;PID.11.6&apos;];
	
	return address;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.6.0">
            <id>3fb2419c-0f5d-4c6b-9c58-0b88ed2bfc33</id>
            <name>DateV</name>
            <revision>6</revision>
            <lastModified>
              <time>1680639836603</time>
              <timezone>America/Santiago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>CHANNEL_DEPLOY</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>GLOBAL_DEPLOY</contextType>
                <contextType>GLOBAL_UNDEPLOY</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>GLOBAL_POSTPROCESSOR</contextType>
                <contextType>CHANNEL_POSTPROCESSOR</contextType>
                <contextType>CHANNEL_BATCH</contextType>
                <contextType>CHANNEL_PREPROCESSOR</contextType>
                <contextType>CHANNEL_ATTACHMENT</contextType>
                <contextType>GLOBAL_PREPROCESSOR</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>CHANNEL_UNDEPLOY</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	[HN] utilidades para trabajar con fechas
*/
var fhirPattern = &quot;yyyy-MM-dd&apos;T&apos;HH:mm:ssXXX&quot;;
var cxfPattern = &quot;yyyy-MM-dd&apos;T&apos;HH:mm:ss&quot;;
var hl72xPattern = &quot;yyyy-MM-dd&apos;T&apos;HHmmssZ&quot;;
//var hl72xPattern = &quot;yyyyMMddHHmmss&quot;;
var hl72xDatePattern = &quot;yyyyMMdd&quot;;
var hl72xReducePattern = &quot;yyyyMMdd&quot;;
var fhirReducePattern = &quot;yyyy-MM-dd&quot;;
var hl7Pattern = [&quot;MM&quot;, &quot;dd&quot;, &quot;HH&quot;, &quot;mm&quot;, &quot;ss&quot;, &quot;.S&quot;,&quot;S&quot;,&quot;S&quot;,&quot;0&quot;,&quot;1&quot;,&quot;2&quot;,&quot;3&quot;,&quot;4&quot;,&quot;5&quot;,&quot;6&quot;,&quot;7&quot;,&quot;8&quot;,&quot;9&quot;,&quot;Z&quot;];

/**
	retorna un date a partir de un string en hl7
*/
function parseDateFromHL7(hl7Date){
	var builder = new Packages.org.joda.time.format.DateTimeFormatterBuilder().appendYear(4, 4);

	for (var i=0; i&lt;hl7Pattern.length;i++){
		var dateTimeFormatter = Packages.org.joda.time.format.DateTimeFormat.forPattern(hl7Pattern[i]);
		var dateTimeParser = new Packages.org.joda.time.format.DateTimeFormatterBuilder().append(dateTimeFormatter).toParser();
		builder.appendOptional(dateTimeParser);
	}				 
	var formatter  = builder.toFormatter(); 
     return formatter.parseDateTime(hl7Date).toDate();
}

function formatDateToCXF(date){
	return DateUtil.formatDate(cxfPattern, date);	
}

function formatDateToFHIR(date){
	return DateUtil.formatDate(fhirPattern, date);
}

function formatDateToHl7(date){
	//logger.error(&apos;date &apos; + date);
	//return isoFormat.format(date);
	return DateUtil.formatDate(hl72xPattern, date);
}

function formatBirthDateToHl7(date){
	
	//logger.error(&apos;date &apos; + date);
	//return isoFormat.format(date);
	return DateUtil.formatDate(hl72xPattern, date);
}

function convertDateToFhir(hl7Date){
	return DateUtil.convertDate(hl72xReducePattern, fhirReducePattern, hl7Date);	
}


function getCurrentDate(){
	return new Packages.java.util.Date();
}

// Calcula la edad a partir de la fecha de nacimiento
function getAge(fecha)
{
        var values=fecha.split(&quot;-&quot;);
        var dia = values[2];
        var mes = values[1];
        var ano = values[0];
 
        // cogemos los valores actuales
        var fecha_hoy = new Date();
        var ahora_ano = fecha_hoy.getYear();
        var ahora_mes = fecha_hoy.getMonth();
        var ahora_dia = fecha_hoy.getDate();
 
        // realizamos el calculo
        var edad = (ahora_ano + 1900) - ano;
        if ( ahora_mes &lt; (mes - 1))
        {
            edad--;
        }
        if (((mes - 1) == ahora_mes) &amp;&amp; (ahora_dia &lt; dia))
        {
            edad--;
        }
        if (edad &gt; 1900)
        {
            edad -= 1900;
        }
	   return edad;
}
</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.6.0">
            <id>f45b574d-5b3f-46e5-8e66-9406b7e1162c</id>
            <name>HCC Template</name>
            <revision>1</revision>
            <lastModified>
              <time>1568300338666</time>
              <timezone>America/Santiago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description 
	@return {String} return description
*/
//http://weblogic.proyvalhnwl1.indra.es/hncat/fhir/ValueSet/pais/$validate-code?code=CHL&amp;_format=xml
//tmp[&apos;parameter&apos;][1][&apos;name&apos;]
//tmp[&apos;parameter&apos;][1][&apos;valueString&apos;]


function HCC_LoadDescPais(pais){	
	var result = sendHttpGet($g(&apos;hncat.fhir.url&apos;) + &apos;/ValueSet/pais/$validate-code?code=&apos; +  pais + &apos;&amp;_format=xml&apos;);	
	var respString = EntityUtils.toString(result.getEntity());		
	respString = respString.replace(&apos;xmlns=&quot;http://hl7.org/fhir&quot;&apos;, &apos;&apos;);	
	var respXml = new XML(respString);
	var it = 0;
	var nombre = &apos;&apos;;
	var descripcion = &apos;&apos;;
	while (respXml[&apos;parameter&apos;][it] != null &amp;&amp; respXml[&apos;parameter&apos;][it] != &apos;&apos;)
	{
	//bucle
		nombre = respXml[&apos;parameter&apos;][it][&apos;name&apos;][&apos;@value&apos;];
		if (nombre ==  &apos;display&apos;) {
			descripcion = respXml[&apos;parameter&apos;][it][&apos;valueString&apos;][&apos;@value&apos;];
		}
		it += 1;
	// Fin bucle
	}
	return descripcion;
}



function HCC_createExtensionCodeNationality(url, value){		
	var extension = &lt;extension&gt;&lt;/extension&gt;;
	extension.@url = url;
	var extensionCode = &lt;extension&gt;&lt;/extension&gt;;
	//extensionCode.@url=&apos;code&apos;;
	var valueCode = &lt;valueCodeableConcept&gt;&lt;/valueCodeableConcept&gt;
	var coding = &lt;coding&gt;&lt;/coding&gt;
	coding.code.@value=value;
	coding.display.@value = HCC_LoadDescPais(value);
	valueCode.appendChild(coding); 
	extension.appendChild(valueCode); 	
	//extension.appendChild(extensionCode);
	//logger.debug(&quot;extension: &quot; + extension);
	return extension;
}


function HCC_ActualizarPais(pais, objetoXML) {
	objetoXML.appendChild(HCC_createExtensionCodeNationality(&quot;http://hn.indra.es/fhir/StructureDefinition/identifier-country&quot;, pais));
	return objetoXML;
}



</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.6.0">
            <id>0e1d1c72-271c-48f5-a1fc-6220a6a4dbe1</id>
            <name>tables</name>
            <revision>2</revision>
            <lastModified>
              <time>1559252320205</time>
              <timezone>America/Santiago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>GLOBAL_DEPLOY</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>var addressUse = [
	[&apos;FHIR&apos;,	&apos;HL7&apos;],
	[&apos;home&apos;,	&apos;H&apos;],
	[&apos;temp&apos;,	&apos;C&apos;],
	[&apos;work&apos;,	&apos;O&apos;],
	[&apos;work&apos;,	&apos;L&apos;],
	[&apos;home&apos;,	&apos;M&apos;],
	[&apos;old&apos;,	&apos;BA&apos;]
];

var contactPointSystem = [
	[&apos;FHIR&apos;,		&apos;HL7&apos;],
	[&apos;phone&apos;,		&apos;PH&apos;],
	[&apos;phone&apos;,		&apos;CP&apos;],
	[&apos;email&apos;,		&apos;Internet&apos;]
];

var contactPointUse = [
	[&apos;FHIR&apos;,		&apos;HL7&apos;],
	[&apos;home&apos;,		&apos;PRN&apos;],
	[&apos;work&apos;,		&apos;WPN&apos;],
	[&apos;others&apos;,	&apos;ORN&apos;]
];

var administrativeGender = [
	[&apos;FHIR&apos;,	&apos;HL7&apos;],
	[&apos;male&apos;,	&apos;M&apos;],
	[&apos;female&apos;,     &apos;F&apos;],
	[&apos;unknown&apos;,     &apos;U&apos;],
	[&apos;other&apos;,     &apos;O&apos;]
];

var nameUse = [
	[&apos;FHIR&apos;,		&apos;HL7&apos;],
	[&apos;usual&apos;,		&apos;D&apos;],
	[&apos;official&apos;,	&apos;L&apos;]	
];


// Tablas necesarias para IHE PIX y PDQ
// HL2.x

/* sms
var namespaceIdMap = [
	[&apos;FHIR&apos;,		&apos;HL7&apos;,			&apos;HN&apos;],			
	[null,		&apos;RCS&apos;,			&apos;2.16.840.1.113883.2.22.0.29.114101.50.1&apos;],
	[null,		&apos;RCA&apos;,			&apos;2.16.840.1.113883.2.22.0.2.102100.50.1&apos;],
	[null,		&apos;RCC&apos;,			&apos;2.16.840.1.113883.2.22.0.101&apos;],
	[null,		&apos;Minsal&apos;,			&apos;2.16.840.1.113883.2.22.0.103&apos;],
	[null,		&apos;2.16.858.1.1111.11.11&apos;,	&apos;2.16.858.1.1111.11.11&apos;]		
];
*/
// FHIR y HL2.x

/*
var universalIdMap = [
	[&apos;FHIR&apos;,								&apos;HL7&apos;,						&apos;HN&apos;],
	[&apos;2.16.840.1.113883.2.22.0.103&apos;,	&apos;2.16.840.1.113883.2.22.0.103&apos;,	&apos;2.16.840.1.113883.2.22.0.103&apos;],
	[&apos;2.16.840.1.113883.2.22.0.29.114101.50.1&apos;,	&apos;2.16.840.1.113883.2.22.0.29.114101.50.1&apos;,	&apos;2.16.840.1.113883.2.22.0.29.114101.50.1&apos;],
	[&apos;2.16.840.1.113883.2.22.0.2.102100.50.1&apos;,	&apos;2.16.840.1.113883.2.22.0.2.102100.50.1&apos;,	&apos;2.16.840.1.113883.2.22.0.2.102100.50.1&apos;],
	[&apos;2.16.840.1.113883.2.22.0.101&apos;,	&apos;2.16.840.1.113883.2.22.0.101&apos;,	&apos;2.16.840.1.113883.2.22.0.101&apos;],
	[&apos;2.16.858.1.1111.11.11&apos;,	&apos;2.16.858.1.1111.11.11&apos;,	&apos;2.16.858.1.1111.11.11&apos;]
];
*/


// HL2.x
/* sms
var universalIdTypeMap = [
	[&apos;FHIR&apos;,		&apos;HL7&apos;,		&apos;HN&apos;],
	[null,		&apos;ISO&apos;,		&apos;2.16.840.1.113883.2.22.0.103&apos;],
	[null,		&apos;ISO&apos;,		&apos;2.16.840.1.113883.2.22.0.29.114101.50.1&apos;],
	[null,		&apos;ISO&apos;,		&apos;2.16.840.1.113883.2.22.0.2.102100.50.1&apos;],
	[null,		&apos;ISO&apos;,		&apos;2.16.840.1.113883.2.22.0.101&apos;],
	[null,		&apos;ISO&apos;,		&apos;2.16.858.1.1111.11.11&apos;]
		
];
*/
// FHIR y HL2.x
/* sms
var documentMap = [
	[&apos;FHIR&apos;,	&apos;HL7&apos;,	&apos;HN&apos;],
	[&apos;PN&apos;,	&apos;PN&apos;,	&apos;PN&apos;],
	//[&apos;AN&apos;,	&apos;AN&apos;,	&apos;AN&apos;],
	[&apos;AN&apos;,	null,	&apos;urn:oid:an&apos;],
	[&apos;NNESP&apos;,	&apos;NNESP&apos;,	&apos;NNESP&apos;],
	[&apos;OTROS&apos;,	&apos;OTROS&apos;,	&apos;OTROS&apos;],
	[&apos;PRC&apos;,	&apos;PRC&apos;,	&apos;PRC&apos;],
	//[&apos;SS&apos;,	&apos;SS&apos;,	&apos;SS&apos;],
	[&apos;PI&apos;,	&apos;PI&apos;,	&apos;urn:oid:2.16.840.1.113883.3.72.5.9.1&apos;],
	[&apos;PI&apos;,	&apos;PI&apos;,	&apos;urn:oid:1.3.6.1.4.1.21367.13.20.1000&apos;],
	[&apos;PI&apos;,	&apos;PI&apos;,	&apos;SS3&apos;],
	[&apos;PI&apos;,	&apos;PI&apos;,	&apos;SS4&apos;],
	[&apos;PI&apos;,	&apos;PI&apos;,	&apos;SS5&apos;],
	[&apos;PI&apos;,	&apos;PI&apos;,	&apos;RUT&apos;],
	[&apos;PPN&apos;,	&apos;PPN&apos;,	&apos;PPN&apos;],
	//[&apos;PI&apos;,	&apos;PI&apos;,	&apos;PI&apos;]
	
];
*/
/*sms
var domain_namespace = [
	[&apos;msh3&apos;, &apos;namespace&apos;, &apos;oid&apos;],
	[&apos;Minsal&apos;, &apos;Minsal&apos;, &apos;2.16.840.1.113883.2.22.0.103&apos;],
	[&apos;RCS&apos;, &apos;RCS&apos;, &apos;2.16.840.1.113883.2.22.0.29.114101.50.1&apos;],
	[&apos;RCA&apos;, &apos;RCA&apos;, &apos;2.16.840.1.113883.2.22.0.2.102100.50.1&apos;],
	[&apos;RCC&apos;, &apos;RCC&apos;, &apos;2.16.840.1.113883.2.22.0.101&apos;]
];
*/

//var domains=[&apos;Minsal&apos;, &apos;RCS&apos;, &apos;RCA&apos;, &apos;RCC&apos;];</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.6.0">
            <id>286338d6-c123-4ffb-ad4c-ef8bee481b14</id>
            <name>utils</name>
            <revision>5</revision>
            <lastModified>
              <time>1568301211592</time>
              <timezone>America/Santiago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>CHANNEL_DEPLOY</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>GLOBAL_DEPLOY</contextType>
                <contextType>GLOBAL_UNDEPLOY</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>GLOBAL_POSTPROCESSOR</contextType>
                <contextType>CHANNEL_POSTPROCESSOR</contextType>
                <contextType>CHANNEL_BATCH</contextType>
                <contextType>CHANNEL_PREPROCESSOR</contextType>
                <contextType>CHANNEL_ATTACHMENT</contextType>
                <contextType>GLOBAL_PREPROCESSOR</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>CHANNEL_UNDEPLOY</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
[HN] Funciones de ayuda para mapear
*/

var tokenEscapeCode = &apos;\\|&apos;;
//var tokenEscapeCode = &apos;%7C&apos;;
var identifiers;
var universalIdMap;
var domains;
var application_identifier;

// prefijo para el system en FHIR
//var hl7System = &apos;urn:oid:&apos;;
var hl7System = &apos;&apos;;

function loadDomains(){
	var result = sendHttpGet($g(&apos;hnconf.fhir.url&apos;) + &apos;/rest/ExternalDomainRS?_format=xml&apos;);	
	var respString = EntityUtils.toString(result.getEntity());		
	respString = respString.replace(&apos;xmlns=&quot;http://hl7.org/fhir&quot;&apos;, &apos;&apos;);	
	var respXml = new XML(respString);
	logger.info(&apos;respString --&gt; &apos; + respString);
	var total = respXml.total.@value;
	domains = new Array(total);	
	application_identifier = new Array(total+1);	
	application_identifier[0] = [&quot;SENDING_APP&quot;, &quot;ID_NAME&quot;, &quot;ID_OID&quot;, &quot;SENDING_FAC&quot;];
	var i = 0;
	for each (entry in respXml[&apos;entry&apos;]){	
		var sendingApplication = entry.resource.ExternalDomainRS.sendingApplication.@value + &apos;&apos;;		
		var domain_name = entry.resource.ExternalDomainRS.identifier.IdentifierRS.name.@value + &apos;&apos;;
		var domain_oid = entry.resource.ExternalDomainRS.identifier.IdentifierRS.oid.@value + &apos;&apos;;
		var sendingFacility = entry.resource.ExternalDomainRS.sendingFacility.@value + &apos;&apos;;		
		domains[i]=domain_name;		
		application_identifier[i+1]=[sendingApplication, domain_name, domain_oid, sendingFacility];		
		i++;		
	}	
}

// Llama al modulo de configuracion para obtener la lista de identificadores.
function loadIdentifiers(){	
	var result = sendHttpGet($g(&apos;hnconf.fhir.url&apos;) + &apos;/rest/IdentifierRS?_format=xml&apos;);	
	var respString = EntityUtils.toString(result.getEntity());		
	respString = respString.replace(&apos;xmlns=&quot;http://hl7.org/fhir&quot;&apos;, &apos;&apos;);	
	var respXml = new XML(respString);
	var total = respXml.total.@value;
	identifiers = new Array(total+1);	
	identifiers[0] = [&quot;NAME&quot;, &quot;OID&quot;, &quot;TYPE&quot;];		
	universalIdMap = new Array(total+1);	
	universalIdMap[0] = [&quot;FHIR&quot;, &quot;HL7&quot;, &quot;HN&quot;];		
	var i = 1;
	for each (entry in respXml[&apos;entry&apos;]){	
		var oid = entry.resource.IdentifierRS.oid.@value + &apos;&apos;;
		var oidHL7 = oid.replace(hl7System, &apos;&apos;);
		var type = entry.resource.IdentifierRS.oidType.@value + &apos;&apos;;
		var name = entry.resource.IdentifierRS.name.@value + &apos;&apos;;
		var temp = [name, oidHL7, type];
		var temp2 = [oid, oidHL7, oid];
		identifiers[i]=temp;
		universalIdMap[i]=temp2;
		i++;		
	}		
}



// Inicializacion del mapa. Esto se puede modificar para leer de csv en un directorio. De momento se hacen a mano y se tienen como variables en el code templates
function initMappings(){
	loadIdentifiers();
	loadDomains();
	var mappings = new Packages.java.util.HashMap();
	var hash = new Packages.java.util.HashMap();		
	initialize(&apos;administrativeGender&apos;, administrativeGender, mappings, hash);
	initialize(&apos;gender&apos;, administrativeGender, mappings, hash);
	initialize(&apos;nameUse&apos;, nameUse, mappings, hash);
	initialize(&apos;addressUse&apos;, addressUse, mappings, hash);
	initialize(&apos;contactPointSystem&apos;, contactPointSystem, mappings, hash);
	initialize(&apos;contactPointUse&apos;, contactPointUse, mappings, hash);
	initialize(&apos;identifiers&apos;, identifiers, mappings, hash);
	//initialize(&apos;PID.3.4.1&apos;, namespaceIdMap, mappings, hash);
	initialize(&apos;PID.3.4.2&apos;, universalIdMap, mappings, hash);
	//initialize(&apos;PID.3.4.3&apos;, universalIdTypeMap, mappings, hash);
	//initialize(&apos;PID.3.5&apos;, documentMap, mappings, hash);
	//initialize(&apos;PID.18.4.1&apos;, namespaceIdMap, mappings, hash);
	initialize(&apos;PID.18.4.2&apos;, universalIdMap, mappings, hash);
	//initialize(&apos;PID.18.4.3&apos;, universalIdTypeMap, mappings, hash);	
	initialize(&apos;sendingApp&apos;, application_identifier, mappings, hash);		
	globalMap.put(&apos;mappings&apos;, mappings);
	globalMap.put(&apos;hash&apos;, hash);
	globalMap.put(&apos;domains&apos;, domains);	
}

/**
 dada una entidad (entity), mapea el valor de un estandar (HL7, FHIR o ad hoc (HN)) a otro
*/
function map(entity, from, to, value){	
	try{		
		var mappings = globalMap.get(&apos;mappings&apos;);
		var hash = globalMap.get(&apos;hash&apos;);
		// se decodifica para trabajar con el |
		
		value = Packages.java.net.URLDecoder.decode(value).toString();
		value = Packages.java.net.URLDecoder.decode(value).toString();
		
		if (value != null){
		
			var token = value.split(tokenEscapeCode)[0];
			var entityMap = hash.get(entity);
			var keyMap =  entityMap.get(from);
			var row = keyMap.get(token.toString());
			var column = getColumnName(to); 
		
			try {
				var result = mappings.get(entity)[parseInt(row)][parseInt(column)];
			}catch (e){
				logger.warn(e);
				logger.warn(&quot;No se ha podido convertir el &quot;+entity+&quot;, valor \&apos;&quot;+token+ &quot;\&apos;, de &quot;+from+&quot; a &quot;+to);
				return value;
			}

			if (isToken(value)){
				return result+&apos;|&apos;+value.split(tokenEscapeCode)[1];
			}else {
				return result;
			}		
			return result;
		}else{
			return value;
		}
	} catch (err){}
}

function isToken(value){
	if (value.split(tokenEscapeCode).length &gt; 1){
		return true;
	}
}

function initialize(name, entity, mappings, hash) {
	mappings.put(name, entity);
	
	var rows = new Packages.java.util.HashMap();
	
	var map;
	for (var column = 0; column &lt; entity[0].length; column++) {
		map = new Packages.java.util.HashMap();

		for (var row = 1; row &lt; entity.length; row++) {
			map.put(entity[row][column], row);
		}
		var catalog = entity[0][column];
		rows.put(catalog, map);
	}
	hash.put(name, rows);
}

function getColumnName(name){
	switch(name){
		case &quot;FHIR&quot;: return 0;
		case &quot;HL7&quot;: return 1;
		case &quot;HN&quot;: return 2;
		case &quot;FHIR-DSTU1&quot;: return 3;
		case &quot;NAME&quot;: return 0;
		case &quot;OID&quot;: return 1;
		case &quot;TYPE&quot;: return 2;
		case &quot;SENDING_APP&quot;: return 0;
		case &quot;ID_NAME&quot;: return 1;
		case &quot;ID_OID&quot;: return 2;
		case &quot;SENDING_FAC&quot;: return 3;
	}
}

function checkDomainName(nameSpace){	
	var domains = $(&apos;domains&apos;);			
	var posicion = domains.indexOf(nameSpace);	
	if (posicion == -1){
		throw(&apos;unknown-domain&apos;);
	}
}

function checkSendingApplication(nameSpace, sendingApp){	
	var result = map(&apos;sendingApp&apos;, &apos;SENDING_APP&apos;, &apos;ID_NAME&apos;, sendingApp);			
	if (result != nameSpace){
		throw(&apos;identifier-not-correct&apos;);
	}
}
	
</code>
            </properties>
          </codeTemplate>
        </codeTemplates>
      </codeTemplateLibrary>
    </codeTemplateLibraries>
  </exportData>
</channel>